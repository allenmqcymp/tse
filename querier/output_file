overview
engs
labs
notes
reading
resources
examples
overview
engs
you
will
learn
how
design
amp
build
large
reliable
maintainable
and
understandable
software
systems
the
process
you
will
learn
program
with
unix
development
tools
let
break
that
down
the
objectives
this
course
are
for
you
learn
software
design
principles
good
coding
style
and
documentation
debugging
and
testing
design
and
coding
with
team
programming
programming
unix
use
git
for
source
code
management
the
first
few
weeks
this
course
are
crash
course
unix
and
please
sure
follow
the
course
coding
style
guide
all
your
assignments
finally
you
join
team
other
students
design
build
document
and
test
large
software
project
your
very
own
search
engine
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
labs
engs
labs
notes
reading
resources
examples
labs
this
legacy
page
and
not
used
please
refer
canvas
modules
for
assignments
click
view
lab
bash
lab
lab
data
structures
lab
tse
crawler
lab
tse
indexer
lab
tse
querier
please
follow
the
coding
style
assignments
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
notes
engs
labs
notes
reading
resources
examples
notes
wide
variety
examples
are
available
examples
getting
started
the
bash
shell
the
bash
shell
continued
shell
scripts
with
bash
introduction
strings
and
stdio
memory
pointers
and
malloc
malloc
and
linked
lists
modules
makefiles
debugging
with
gdb
and
valgrind
git
and
gitlab
searching
the
web
crawler
design
software
design
makefiles
bugs
and
testing
unit
testing
indexer
iterators
cohesion
and
coupling
routines
and
modules
querier
fuzz
testing
and
expressions
networking
and
socket
programming
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
reading
assignments
engs
labs
notes
reading
resources
examples
reading
assignments
week
unix
shell
and
commands
choose
your
tools
well
giovanni
asproni
learn
use
real
editor
diomidis
spinellis
basics
the
unix
philosophy
just
few
pages
subset
chapter
the
art
unix
programming
eric
raymond
the
strange
birth
and
long
life
unix
warren
toomey
ieee
spectrum
interview
with
doug
mcilroy
rik
farrow
login
optional
minix
retrospective
andrew
tanenbaum
professor
who
created
minix
and
whose
student
linus
torvalds
created
linux
week
shell
and
programming
coding
style
guidelines
the
unix
tools
are
your
friends
diomidis
spinellis
the
professional
programmer
uncle
bob
know
how
use
command
line
tools
carroll
robinson
comment
only
what
the
code
cannot
say
kevlin
henney
lecture
notes
and
any
lecture
extras
associated
with
this
week
lectures
week
programming
memory
allocation
data
structures
coding
style
guidelines
don
just
learn
the
language
understand
its
culture
anders
nor
comments
comments
cal
evans
take
advantage
code
analysis
tools
sarah
mount
lecture
notes
and
any
lecture
extras
associated
with
this
week
lectures
week
web
searching
skim
searching
the
web
arasu
this
paper
provides
foundation
for
the
tinysearchengine
assignments
labs
prevent
errors
giles
colborne
use
the
right
algorithm
and
data
structure
van
winkel
write
small
functions
using
examples
keith
braithwaite
the
linker
not
magical
program
walter
bright
lecture
notes
and
any
lecture
extras
associated
with
this
week
lectures
week
software
design
testing
debugging
fighting
bugs
remove
retry
replicate
and
rejuvenate
grottke
and
trivedi
code
the
language
the
domain
dan
north
don
afraid
break
things
mike
lewis
finish
skimming
searching
the
web
arasu
lecture
notes
and
any
lecture
extras
associated
with
this
week
lectures
week
coding
tse
indexer
verbose
logging
will
disturb
your
sleep
johannes
brodwall
code
layout
matters
steve
freeman
only
the
code
tells
the
truth
peter
sommerlad
section
searching
the
web
arasu
lecture
notes
and
any
lecture
extras
associated
with
this
week
lectures
week
testing
networking
berkeley
sockets
wikipedia
don
ignore
that
error
pete
goodliffe
keep
the
build
clean
johannes
brodwall
lecture
notes
and
any
lecture
extras
associated
with
this
week
lectures
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
resources
engs
labs
notes
reading
resources
examples
resources
textbooks
and
resources
there
required
textbook
for
this
course
however
highly
recommend
reference
manual
harbison
and
steele
have
found
invaluable
and
always
near
desk
there
copy
reserve
baker
library
there
may
copies
available
local
bookstores
you
can
order
from
amazon
barnes
amp
noble
look
for
the
most
recent
fifth
edition
when
need
more
traditional
text
refer
the
book
second
edition
mike
banahan
declan
brady
and
mark
doran
originally
published
addison
wesley
this
book
available
online
here
the
unix
operating
system
and
the
programming
language
have
both
been
around
for
quite
some
time
unix
was
originally
developed
the
late
assembly
language
and
was
mostly
reimplemented
the
new
programming
language
the
early
the
first
book
kernighan
and
ritchie
programming
language
still
print
and
owned
most
unix
geeks
not
because
such
great
reference
but
well
just
because
there
are
large
number
number
books
unix
and
all
its
variants
including
linux
see
below
unix
systems
contain
lots
documentation
the
form
what
are
called
man
pages
which
short
for
manual
pages
thus
hardcopy
book
unix
may
not
really
necessary
didn
own
unix
book
until
many
years
after
began
using
unix
documentation
for
many
the
tools
will
using
will
either
found
man
pages
will
supplied
url
this
page
course
you
welcome
employ
your
favorite
search
engine
but
beware
that
there
are
subtle
variations
unix
tools
across
its
many
flavors
and
distributions
for
the
man
pages
department
servers
are
the
definitive
reference
other
resources
papers
and
references
will
appear
this
page
they
are
identified
you
find
others
that
you
like
please
let
know
and
share
them
with
everyone
general
department
user
faq
you
need
log
using
your
unix
username
and
password
bash
here
are
some
good
links
bash
scripting
information
short
bash
tutorial
gnu
bash
manual
bash
programming
introduction
how
advanced
bash
scripting
guide
bash
pocket
reference
help
for
power
users
and
sys
admins
edition
arnold
robbins
short
and
useful
book
for
less
than
ten
bucks
explainshell
very
cool
website
that
lets
you
type
bash
command
and
get
feedback
what
supposed
drawing
the
man
pages
editors
editor
software
very
personal
choice
have
used
emacs
for
many
years
extensible
via
lisp
and
customizable
others
prefer
the
increasingly
popular
sublime
text
editor
told
fast
highly
extensible
using
python
amp
json
they
are
both
excellent
for
longer
sessions
others
prefer
vim
for
quick
fixes
and
slow
ssh
connections
the
editor
workable
alternative
getting
started
with
sublime
text
and
great
tutorial
emacs
tutorial
emacs
quick
reference
guide
extremely
quick
and
simple
introduction
the
text
editor
vim
tutorial
markdown
file
with
extension
assumed
text
file
markdown
syntax
which
provides
very
simple
and
readable
markup
for
headings
lists
italics
bold
hyperlinks
code
snippets
and
embedded
images
this
course
website
written
markdown
and
rendered
with
jekyll
many
source
code
web
portals
like
our
gitlab
and
the
popular
github
allow
you
browse
the
files
your
repository
automatically
rendering
any
that
are
markdown
format
making
such
files
much
nicer
look
than
plain
text
files
you
can
edit
markdown
files
any
text
editor
but
there
are
some
specialized
editors
available
markdown
easy
learn
and
there
are
many
useful
resources
online
quick
tutorial
gitlab
markdown
guide
after
all
uses
gitlab
github
mastering
markdown
tutorial
github
markdown
cheatsheet
brett
terpstra
write
better
markdown
which
recognizes
that
many
flavors
markdown
exist
markoff
macos
application
for
previewing
markdown
files
macdown
macos
application
for
editing
markdown
files
git
great
references
for
the
git
distributed
version
control
system
that
use
instructions
for
setting
gitlab
with
ssh
free
pro
git
book
scott
chacon
plus
the
website
has
lots
additional
git
references
including
videos
some
interactive
tutorials
try
github
explain
git
some
other
non
interactive
video
tutorials
learn
version
control
with
git
git
tutorial
requires
ruby
resolving
conflicts
very
slick
and
free
gui
for
git
called
sourcetree
very
popular
the
excellent
licensed
not
free
application
tower
reference
for
common
gitignore
files
tools
software
tools
may
using
valgrind
family
tools
for
dynamic
analysis
programs
quick
guide
valgrind
gnu
make
utility
for
determining
what
needs
done
compile
link
copy
etc
build
program
other
target
and
then
issues
the
commands
pandoc
universal
document
converter
gtk
popular
toolkit
for
creating
graphical
user
interfaces
follow
the
instructions
below
learn
how
compile
and
use
gtk
and
xquartz
run
window
based
graphical
applications
the
unix
servers
but
allow
them
pop
open
windows
your
mac
you
need
install
xquartz
installation
simple
this
link
has
instructions
for
installing
and
using
xquartz
and
for
compiling
gtk
applications
unix
books
unix
amp
linux
books
links
practical
guide
linux
commands
editors
and
shell
programming
mark
sobell
excellent
comprehensive
hands
book
linux
and
shell
programming
well
python
perl
and
mysql
beginning
linux
programming
edition
neil
matthew
richard
stones
really
good
book
covering
debugging
processes
threads
and
socket
programming
clear
and
easy
manner
the
practice
programming
brian
kernighan
rob
pike
great
classic
book
design
and
programming
for
unix
and
professional
linux
programming
jon
masters
and
richard
blum
oldie
but
goodie
unix
network
programming
richard
stevens
prentice
hall
linux
nutshell
linux
system
programming
what
the
window
system
from
reilly
linux
devcenter
com
unix
linux
and
variants
free
website
listing
common
unix
commands
bash
command
line
editing
unix
for
macos
users
video
tutorial
from
version
macos
from
lynda
com
which
free
dartmouth
users
homebrew
tool
for
installing
unix
tools
macos
highly
recommended
for
programming
programming
tutorials
video
tutorials
from
lynda
com
which
are
free
dartmouth
users
the
pragmatic
programmer
andrew
hunt
and
david
thomas
addison
wesley
things
every
programmer
should
know
kevlin
henney
reilly
first
book
ansi
fourth
edition
gary
bronson
very
good
book
for
learning
the
wikipedia
entry
for
the
programming
language
the
usenet
discussion
why
good
introduction
the
programming
language
charles
palmer
easy
read
with
lots
simple
examples
skip
page
start
and
remember
some
the
comments
are
dated
variables
all
lower
case
quick
reference
cards
for
and
gdb
remember
that
not
suggesting
you
buy
all
these
books
the
text
harbison
and
steele
highly
recommended
for
this
course
and
may
local
bookstores
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
examples
engs
labs
notes
reading
resources
examples
examples
click
download
args
arguments
atoi
template
auto
auto
buffer
overflow
clean
client
server
http
fork
zip
client
server
http
zip
client
server
udp
select
zip
client
server
udp
zip
client
server
zip
combined
command
curse
data
types
deadlock
enum
files
input
txt
files
freadline
freadline
function
table
zip
getchar
guessprime
guessprime
guessprime
guessprime
guessprime
guessprime
guessprime
guessprime
guessprime
guessprime
guessprimefunction
increment
life
lifeboard
txt
madlib
madlib
txt
madlib
madlib
txt
memory
memory
mutex
names
makefile
names
names
names
names
names
names
names
names
names
names
namesb
nosort
getopt
nosort
operator
overflow
password
pointer
pointer
pointer
pointer
print
random
readline
readline
readlinep
readlinep
scope
section
template
set
iterate
makefile
set
iterate
set
iterate
seuss
zip
shifter
static
stringcopy
strings
subtemplate
readme
txt
subtemplate
testing
txt
subtemplate
trees
zip
unittest
unsafe
unused
zip
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
programming
style
engs
labs
notes
reading
resources
examples
programming
style
coding
style
computer
program
meant
for
two
audiences
the
computer
that
compiles
and
runs
and
the
people
who
must
read
modify
maintain
and
test
think
about
writing
program
the
same
way
you
think
about
writing
paper
structure
organization
word
choice
and
formatting
are
just
important
content
program
that
works
but
has
terrible
style
unreadable
and
therefore
useless
real
world
software
development
teams
use
common
programming
style
guides
for
example
you
are
working
the
linux
kernel
you
would
use
linus
coding
style
you
are
working
gnu
project
you
would
closely
follow
the
instructions
chapter
making
the
best
use
their
gnu
coding
standards
document
other
organizations
might
adopt
other
long
respected
coding
standards
like
the
netbsd
source
code
style
guide
they
might
produce
their
own
guidelines
based
several
others
your
company
will
most
likely
have
one
they
prefer
style
guides
include
things
like
formatting
your
source
code
comment
requirements
how
certain
constructs
should
shouldn
used
variable
naming
conventions
cross
platform
compatibility
requirements
and
more
realize
that
coding
style
can
very
personal
choice
but
the
professional
world
you
will
seldom
have
the
privilege
choosing
your
own
style
style
for
assignments
involving
programming
you
must
follow
these
guidelines
inspired
the
amp
book
and
linus
avoid
placing
multiple
statements
single
line
break
long
statements
more
than
characters
over
multiple
lines
indent
appropriately
emacs
and
other
savvy
text
editors
can
indent
automatically
see
below
use
braces
for
every
nested
block
can
save
you
from
accidental
nesting
bugs
place
the
opening
brace
the
end
the
line
and
for
statements
use
spaces
around
binary
operators
except
struct
and
pointer
references
not
use
spaces
between
unary
operator
and
its
operand
see
below
use
parentheses
liberally
when
helps
make
expression
clear
adding
parentheses
rarely
hurts
and
might
actually
prevent
mistake
avoid
calling
exit
from
anywhere
other
than
main
unwind
back
main
using
error
return
values
and
exit
cleanly
exception
recommend
use
function
called
parse
args
and
often
cleanest
for
that
function
exit
when
there
are
problems
with
command
line
arguments
always
initialize
variables
either
when
they
are
created
soon
thereafter
initialize
pointers
null
target
not
yet
known
use
typedef
designate
abstract
data
types
and
use
name
that
ends
person
car
queue
hashtable
bag
etc
when
using
pointers
use
names
that
are
suggestive
pointers
spacep
linep
endp
etc
declare
function
prototypes
with
type
and
name
formal
parameters
avoid
using
global
variables
they
are
absolutely
necessary
restrict
their
use
single
source
file
using
the
static
keyword
not
use
using
goto
unless
absolutely
necessary
you
must
have
really
good
reason
for
using
goto
very
exceptional
cases
avoid
preprocessor
macros
define
macros
tend
source
difficult
bugs
instead
use
const
for
constants
and
use
real
functions
inline
functions
you
must
don
use
magic
numbers
your
code
use
const
create
named
constant
const
float
use
const
wherever
you
can
indicate
value
that
will
not
change
use
the
bool
type
whenever
function
should
return
boolean
value
variable
should
hold
boolean
flag
avoid
old
conventions
that
use
for
false
and
non
zero
for
true
wrap
calls
malloc
type
specific
helper
functions
see
below
choose
either
camelcase
snake
case
and
consistent
break
large
programs
into
multiple
files
every
file
except
for
that
containing
main
should
have
corresponding
file
that
declares
all
functions
constants
and
global
variables
meant
visible
outside
the
file
break
large
functions
aiming
for
strong
cohesion
and
weak
coupling
always
remember
you
are
writing
for
clarity
and
communication
not
show
how
clever
you
are
how
short
and
dense
you
can
make
your
code
commenting
comment
your
code
you
write
much
easier
write
comments
while
your
intentions
are
fresh
your
mind
than
back
later
and
keep
comments
short
simple
and
the
point
comment
wherever
the
code
not
self
describing
see
the
reading
assignments
use
the
style
commenting
for
one
line
comments
and
the
style
for
multi
line
block
comments
use
four
types
comments
start
file
comments
start
function
comments
paragraph
comments
end
line
comments
use
them
the
following
fashion
start
file
comments
you
should
place
block
comment
the
start
each
file
this
comment
should
include
the
names
programmers
the
date
the
file
was
written
and
high
level
description
the
file
contents
stack
bill
stubblefield
november
this
file
contains
the
definitions
stack
class
includes
functions
list
functions
with
brief
descriptions
needed
start
function
comments
write
header
for
each
function
this
comment
should
describe
the
contract
between
the
caller
and
the
function
describe
what
the
function
does
the
meaning
its
parameters
the
meaning
its
return
value
any
and
assumptions
about
the
responsibilities
the
caller
and
the
function
for
example
function
float
sqrt
float
number
requires
its
argument
positive
document
similarly
specify
any
constraints
the
output
list
all
error
conditions
and
what
the
function
does
with
them
list
any
side
effects
explicit
about
memory
allocation
the
function
returns
pointer
space
from
malloc
who
responsible
for
calling
free
the
function
algorithm
not
obvious
describe
often
good
idea
also
you
borrow
the
algorithm
from
another
source
credit
the
source
and
author
paragraph
comments
often
procedures
can
divided
into
series
steps
such
initialization
reading
data
writing
output
place
small
comment
before
each
such
section
describing
what
does
end
line
comments
place
brief
comment
the
end
those
lines
where
needed
clarify
the
code
don
overdo
but
use
them
call
the
reader
attention
subtleties
the
code
align
the
comments
that
all
the
comments
for
function
begin
the
same
column
although
this
column
can
vary
for
different
functions
spacing
place
space
after
keywords
like
else
for
while
switch
etc
after
commas
function
calls
after
semicolons
for
loop
between
right
parenthesis
and
left
bracket
and
around
binary
operators
except
and
and
remember
that
assignment
binary
operator
usually
not
put
spaces
between
function
name
and
its
parameter
list
array
name
and
its
subscripts
for
example
for
indenting
let
your
text
editor
help
you
auto
indent
your
code
often
trouble
with
auto
indentation
clue
your
own
syntax
mistake
such
forgetting
brackets
when
you
create
open
file
emacs
will
recognize
the
filename
extension
and
switch
mode
you
see
this
mode
the
emacs
status
line
mode
hitting
the
tab
key
while
the
cursor
given
line
indents
the
correct
level
assuming
that
the
preceding
non
blank
line
has
been
indented
correctly
ending
line
with
left
bracket
and
hitting
return
will
automatically
indent
the
next
line
appropriately
also
line
beginning
with
right
bracket
will
indent
the
correct
level
finally
typing
new
line
will
create
comment
and
indent
the
line
code
dynamic
memory
allocation
avoid
sprinking
calls
malloc
and
free
throughout
your
code
instead
think
about
the
kinds
things
you
need
create
and
destroy
and
write
type
specific
wrapper
for
each
such
type
for
example
your
program
manipulates
things
type
struct
listnode
you
would
write
two
functions
struct
listnode
listnode
new
void
listnode
delete
struct
listnode
node
the
first
function
calls
malloc
sizeof
struct
listnode
and
initializes
all
its
contents
perhaps
using
parameters
passed
the
caller
the
second
calls
free
node
both
involve
careful
error
checking
code
see
example
names
there
are
many
advantages
this
approach
the
mainline
code
more
readable
because
clear
what
listnode
new
doing
code
involving
malloc
can
sometimes
tricky
and
you
isolate
that
trickiness
one
spot
and
focus
getting
right
once
some
new
types
might
need
multiple
malloc
calls
our
linked
list
example
names
all
those
malloc
calls
and
corresponding
free
calls
can
the
new
free
functions
the
new
function
acts
like
constructor
object
oriented
languages
and
can
ensure
the
newly
returned
memory
initialized
least
not
random
bytes
you
can
insert
debugging
output
reference
counting
logic
set
debugger
breakpoints
these
new
free
functions
and
immediately
have
that
feature
apply
all
occurrences
your
program
work
with
this
type
program
structure
although
allows
very
flexible
with
where
put
declarations
standard
layout
makes
easier
read
the
code
good
convention
start
file
comments
include
stdio
include
stdlib
global
type
and
constant
definitions
const
float
function
prototypes
void
push
int
item
start
function
comments
int
main
const
int
argc
char
argv
local
const
type
and
variable
declarations
body
code
start
function
comments
void
push
int
item
local
const
type
and
variable
declarations
function
body
although
you
can
declare
variables
anytime
before
they
are
used
sometimes
best
place
all
declarations
the
beginning
the
function
that
way
reader
can
easily
find
them
there
are
times
when
convenient
prudent
otherwise
come
back
this
issue
also
good
idea
break
large
programs
into
multiple
files
for
example
stack
module
may
declared
stack
defined
stack
and
used
main
simplicity
this
single
most
important
thing
you
can
write
good
code
keep
simple
william
occam
said
the
century
not
multiply
entities
without
necessity
simplicity
has
many
aspects
few
these
include
make
all
functions
small
coherent
and
specific
every
function
should
exactly
one
thing
good
rule
thumb
that
you
should
able
describe
what
function
does
single
sentence
generally
functions
occupy
less
than
page
with
most
functions
occupying
lines
use
small
parameter
lists
avoid
extremely
long
parameter
lists
you
find
the
parameters
function
growing
ask
yourself
the
function
trying
too
much
the
function
too
vague
its
intent
avoid
deeply
nested
blocks
structures
such
for
and
while
define
blocks
code
blocks
can
contain
other
blocks
try
not
nest
blocks
too
deeply
any
function
with
more
than
couple
levels
nesting
can
confusing
you
find
yourself
with
deeply
nested
structures
consider
either
simplifying
the
structure
defining
functions
handle
some
the
nested
parts
use
the
simplest
algorithm
that
meets
your
needs
einstein
once
said
things
should
simple
possible
but
simpler
this
good
advice
for
selecting
algorithm
there
are
great
many
extremely
clever
complex
algorithms
computer
science
make
effort
know
them
and
use
the
algorithm
that
meets
your
needs
for
efficiency
not
shun
complex
algorithms
but
not
choose
them
without
reason
consistent
consistency
can
come
many
forms
few
these
include
try
consistent
numbers
and
types
function
parameters
two
functions
have
similar
function
try
give
them
similar
sets
parameters
try
consistent
your
use
loops
and
other
program
constructs
use
consistent
naming
and
commenting
styles
don
clever
samuel
johnson
once
said
may
not
quoting
him
exactly
when
you
find
something
particularly
clever
your
writing
strike
out
offers
many
constructs
such
conditional
expressions
unary
operators
etc
that
make
possible
write
extremely
compact
dense
unreadable
code
use
these
features
but
also
ask
yourself
will
another
programmer
understand
what
mean
here
practice
defensive
programming
important
you
write
programs
defensively
that
you
need
check
the
input
the
program
receives
make
sure
expected
range
correct
datatype
length
strings
etc
and
not
acceptable
provide
appropriate
message
back
the
user
terms
the
program
usage
the
user
should
never
able
cause
your
program
adversely
impact
any
aspect
the
system
running
including
system
files
other
users
files
processes
network
access
make
sure
command
line
arguments
and
function
parameters
have
legal
values
check
the
results
all
calls
standard
libraries
the
operating
system
for
example
check
all
memory
allocations
malloc
detect
out
memory
conditions
check
all
data
obtained
from
users
other
programs
check
limit
conditions
loops
and
arrays
for
example
what
happens
you
try
access
value
that
out
bounds
when
you
detect
error
condition
first
consider
ways
modify
the
code
prevent
the
error
from
happening
the
first
place
that
not
possible
ask
there
way
the
code
can
recover
from
the
error
there
reasonable
way
recovering
print
error
message
and
exit
the
program
short
someone
can
crash
your
program
you
lose
points
whether
this
class
future
job
required
compiler
options
for
all
programming
assignments
this
class
you
must
use
minimum
the
following
gcc
compile
options
gcc
std
wall
pedantic
program
all
programs
must
compile
without
errors
warnings
these
instruct
the
compiler
compile
for
the
language
standard
display
all
possible
warnings
and
issue
warnings
any
non
iso
standard
features
proided
gcc
are
used
respectively
you
will
likely
need
add
other
options
these
for
example
you
use
mathematics
functions
you
need
include
math
your
program
and
add
the
command
line
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
lab
bash
engs
labs
notes
reading
resources
examples
lab
bash
due
sunday
april
this
first
lab
relatively
quick
and
should
get
you
speed
working
with
the
command
line
basic
shell
commands
editor
and
small
shell
program
materials
preparation
assignment
what
hand
and
how
bursting
html
file
into
many
sonnets
materials
you
will
need
these
materials
for
this
assignment
alice
wonderland
which
you
will
find
plaintext
file
alice
gutenberg
txt
canvas
credit
project
gutenberg
shakespeare
sonnets
which
you
will
find
plaintext
files
are
available
the
tar
file
sonnets
tar
canvas
this
file
unpacks
into
subdirectory
sonnets
credit
project
gutenberg
curious
how
the
sonnets
directory
from
gutenberg
sonnets
html
file
look
the
bottom
this
page
preparation
set
for
your
work
this
course
you
have
not
already
mkdir
labs
lab
chmod
rwx
labs
lab
these
commands
create
directory
labs
lab
prevent
others
from
peeking
your
work
and
change
the
working
directory
lab
you
ready
for
the
work
below
assignment
write
single
bash
command
pipeline
that
will
extract
the
text
alice
wonderland
into
file
alice
txt
your
lab
directory
note
that
the
provided
file
has
header
and
footer
material
added
project
gutenberg
want
only
the
stuff
lewis
carroll
wrote
write
single
bash
command
pipeline
that
will
read
alice
txt
and
print
crude
table
contents
write
single
bash
command
pipeline
that
will
read
alice
txt
and
print
the
words
order
exactly
one
word
per
line
into
alicewords
txt
word
sequence
letters
write
single
bash
command
pipeline
that
will
read
alicewords
txt
and
print
the
number
times
the
word
alice
appears
regardless
how
capitalized
write
single
bash
command
pipeline
that
will
read
alicewords
txt
and
print
the
number
times
the
word
wonder
appears
regardless
how
capitalized
careful
not
count
other
words
write
single
bash
command
pipeline
that
will
read
alicewords
txt
and
print
the
top
most
common
words
regardless
capitalization
write
single
bash
command
pipeline
that
will
read
alicewords
txt
and
print
the
number
unique
words
regardless
capitalization
that
are
not
stop
words
use
the
sorted
list
stop
words
stopwords
txt
available
canvas
going
keep
things
simple
here
the
words
account
accounts
and
accounting
are
all
unique
words
for
our
purposes
though
fancier
solution
would
stem
them
all
account
given
our
definition
word
above
the
word
account
would
appear
alicewords
txt
account
and
and
the
latter
will
stripped
out
stopword
you
may
find
comm
useful
here
write
bash
script
called
shake
that
allows
the
user
search
for
word
all
shakespeare
sonnets
for
each
matching
sonnet
the
script
prints
one
line
the
sonnet
number
colon
space
the
first
line
the
sonnet
then
elipses
the
user
provides
too
few
too
many
arguments
should
print
usage
shake
searchword
and
exit
with
status
the
script
cannot
find
the
sonnets
directory
the
expected
location
should
print
cannot
find
sonnets
directory
and
exit
with
status
write
three
test
cases
write
each
test
command
separate
single
line
file
shaketest
run
each
test
and
save
its
output
separate
file
bash
shaketest
shaketest
out
for
example
shake
spring
cii
love
strengthen
though
more
weak
seeming
civ
fair
friend
you
never
can
old
from
fairest
creatures
desire
increase
liii
what
your
substance
whereof
are
you
made
lxiii
against
love
shall
now
xcviii
from
you
have
been
absent
the
spring
shake
computer
how
many
hits
will
you
get
you
shake
love
what
hand
and
how
for
the
command
pipeline
questions
write
all
your
answers
single
file
commands
txt
include
each
command
and
its
output
when
finished
you
should
have
the
following
files
alice
txt
alicewords
txt
commands
txt
shake
shaketest
shaketest
out
shaketest
shaketest
out
shaketest
shaketest
out
bursting
html
file
into
many
sonnets
this
section
brought
you
curiosity
how
was
the
files
the
sonnets
directory
produced
from
gutenberg
sonnets
html
file
little
sed
and
little
awk
mkdir
sonnets
sed
start
end
project
gutenberg
amp
nbsp
class
poem
pre
sonnets
html
awk
printing
header
next
header
sonnet
sonnets
print
sonnet
printing
header
next
printing
print
sonnet
you
don
need
learn
awk
and
you
will
not
need
for
this
assignment
but
interesting
language
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
lab
and
bash
engs
labs
notes
reading
resources
examples
lab
and
bash
this
second
lab
focused
three
small
programs
and
regression
testing
bash
script
they
start
easy
and
get
progressively
more
difficult
reminder
preparation
assignment
regress
chill
words
histo
representing
histogram
what
hand
and
how
reminder
grading
will
focus
coding
style
including
consistent
formatting
selection
identifier
names
and
use
meaningful
comments
addition
correctness
and
testing
your
code
must
compile
without
producing
any
compiler
warnings
you
will
lose
points
the
compiler
produces
warnings
when
using
our
standard
compiler
flags
your
submitted
code
fails
compile
triggers
segmentation
fault
notify
you
and
give
you
opportunity
repair
and
resubmit
see
programs
that
crash
preparation
set
four
directories
for
this
lab
mkdir
labs
lab
labs
lab
mkdir
regress
chill
histo
words
assignment
please
follow
the
coding
style
design
write
document
and
fully
test
the
following
three
separate
programs
and
one
bash
script
point
breakdown
points
regress
points
chill
points
words
points
histo
regress
regression
testing
important
any
quality
software
development
process
software
project
evolves
each
new
revision
tested
against
thorough
suite
test
cases
ensure
that
the
new
revision
still
performs
correctly
where
had
before
new
functionality
added
new
tests
are
added
the
suite
write
bash
script
regress
perform
regression
testing
its
command
line
looks
like
regress
dirname
testfilename
where
dirname
the
name
directory
containing
test
results
and
where
each
testfilename
the
name
file
containing
bash
command
for
one
test
case
the
script
verifies
the
validity
its
arguments
exit
with
non
zero
status
any
error
there
must
least
two
arguments
something
the
name
dirname
exists
must
directory
each
testfilename
must
regular
file
and
readable
after
checking
its
arguments
the
script
creates
new
directory
whose
name
has
the
form
yyyymmdd
hhmmss
representing
the
current
date
and
time
the
current
directory
for
example
any
error
exit
with
non
zero
status
the
script
then
runs
each
test
case
with
bash
redirecting
stdin
from
dev
null
producing
four
files
for
each
case
yyyymmdd
hhmmss
testfilename
test
copy
testfilename
yyyymmdd
hhmmss
testfilename
status
the
exit
status
bash
testfilename
yyyymmdd
hhmmss
testfilename
stdout
the
stdout
from
bash
testfilename
yyyymmdd
hhmmss
testfilename
stderr
the
stderr
from
bash
testfilename
the
directory
dirname
does
not
exist
yyyymmdd
hhmmss
renamed
dirname
exit
success
non
zero
any
error
the
directory
dirname
already
exists
yyyymmdd
hhmmss
compared
with
dirname
provide
brief
listing
any
differences
the
simple
statement
differences
exit
differences
non
zero
differences
typical
usage
the
first
time
the
developer
runs
regress
the
script
creates
directory
name
dirname
subsequent
runs
compares
the
new
test
results
with
those
from
the
prior
run
over
time
directories
yyyymmdd
hhmmss
accumulate
providing
historical
record
test
results
exit
non
zero
any
error
any
differences
from
the
earlier
dirname
directory
zero
dirname
created
successfully
there
were
differences
from
existing
dirname
example
suppose
used
regress
support
development
the
shake
solution
the
directory
contains
the
script
and
four
test
files
each
with
one
line
command
here
regress
elsewhere
the
path
start
out
listing
the
four
test
cases
then
run
regress
twice
then
add
test
case
then
change
test
case
finally
test
some
erroneous
cases
lab
shake
test
test
test
test
lab
cat
test
cat
shake
shake
shake
love
shake
computer
lab
regress
base
test
saved
test
results
base
lab
regress
base
test
comparing
with
base
differences
lab
echo
shake
two
words
test
lab
regress
base
test
comparing
with
base
only
test
status
only
test
stderr
only
test
stdout
only
test
test
lab
echo
shake
rose
test
lab
cat
test
cat
shake
shake
shake
rose
shake
computer
shake
two
words
lab
regress
base
test
comparing
with
base
files
base
test
stdout
and
test
stdout
differ
files
base
test
test
and
test
test
differ
only
test
status
only
test
stderr
only
test
stdout
only
test
test
lab
shake
test
test
test
test
base
test
lab
now
some
error
cases
lab
regress
usage
regress
dirname
testfilename
lab
regress
base
usage
regress
dirname
testfilename
lab
regress
test
first
argument
test
not
directory
lab
regress
base
test
rename
base
permission
denied
failed
save
test
results
base
they
remain
lab
regress
base
testing
test
case
testing
not
file
not
readable
lab
regress
base
base
test
case
base
not
file
not
readable
lab
chmod
test
lab
regress
base
test
test
case
test
not
file
not
readable
lab
note
above
how
use
the
bash
globbing
syntax
indicate
wildcard
that
matches
any
single
character
thus
test
expands
test
test
test
test
test
note
how
test
simply
prints
the
current
copy
shake
which
adds
nicely
the
historic
record
the
name
test
files
not
important
regress
but
development
team
may
want
agree
naming
convention
for
example
suppose
you
chose
name
them
all
with
extension
test
you
had
saved
the
first
run
regress
directory
named
base
you
could
then
run
future
tests
regress
base
test
just
clear
each
testfile
contains
bash
command
and
your
regress
script
should
execute
those
commands
running
bash
and
providing
testfilename
argument
recall
how
did
the
test
cases
for
shake
but
you
should
run
each
test
only
once
within
any
given
run
regress
not
only
that
more
efficient
possible
that
the
commands
within
some
test
files
might
actually
not
amenable
being
run
multiple
times
they
have
side
effects
like
creating
removing
files
easily
possible
redirect
the
stdin
stdout
and
stderr
all
one
run
test
and
catch
the
exit
status
that
run
assumptions
please
expect
that
dirname
names
directory
that
could
anywhere
not
necessarily
subdirectory
the
current
working
directory
this
assumption
should
not
complicate
your
work
please
assume
that
the
testfilenames
name
files
that
are
the
current
directory
principle
should
support
testfiles
from
anywhere
but
bit
trickier
this
assumption
simplifies
your
work
your
script
need
not
validate
the
assumption
just
assume
please
not
assume
that
the
script
itself
regress
the
current
working
directory
this
assumption
should
not
complicate
your
work
hints
check
out
the
date
command
and
its
option
check
out
the
diff
brief
command
form
check
out
the
shift
built
bash
command
and
this
example
shifting
file
chill
write
program
calculate
wind
chill
based
the
current
temperature
and
wind
speed
the
standard
formula
for
this
calculation
wind
chill
where
the
temperature
degrees
fahrenheit
when
less
than
and
the
wind
velocity
miles
per
hour
the
character
denotes
exponentiation
note
that
the
above
formula
not
programming
language
syntax
input
input
files
stdin
ignored
the
user
may
run
your
program
with
arguments
one
argument
two
arguments
explained
below
output
arguments
the
user
provides
arguments
your
program
should
print
out
table
temperatures
from
and
and
wind
speeds
from
your
output
should
look
similar
the
following
with
nice
columns
and
titles
chill
temp
wind
chill
output
one
argument
the
user
provides
one
argument
will
assumed
temperature
expressed
floating
point
number
that
temperature
less
than
acceptable
chill
then
prints
table
wind
speeds
from
and
the
calculated
wind
chills
for
that
temperature
only
your
program
output
for
one
argument
should
look
like
this
chill
temp
wind
chill
output
two
arguments
the
user
provides
two
arguments
they
will
temperature
and
velocity
respectively
expressed
floating
point
numbers
the
temperature
must
less
than
and
the
velocity
must
greater
than
equal
the
arguments
are
acceptable
then
your
program
should
calculate
and
print
the
wind
chill
for
that
temperature
and
velocity
only
your
program
output
for
two
arguments
should
look
like
this
chill
temp
wind
chill
either
argument
out
range
your
program
should
issue
message
and
exit
here
example
chill
temperature
must
less
than
degrees
fahrenheit
chill
temperature
must
greater
than
fahrenheit
coldest
recorded
earth
temperature
see
https
wikipedia
org
wiki
lowest
temperature
recorded
earth
chill
wind
velocity
must
greater
than
equal
mph
the
preceding
examples
some
values
were
printed
integers
and
some
decimal
fractions
you
may
print
everything
the
format
you
wish
but
not
print
more
than
one
decimal
place
indeed
may
wise
use
this
format
when
the
user
specifies
temperature
windspeed
because
the
user
may
specify
non
integral
value
and
may
misleading
print
integer
output
more
than
two
arguments
print
usage
line
and
exit
with
error
status
exit
the
program
terminates
normally
exits
with
return
code
otherwise
terminates
with
documented
non
zero
return
code
compiling
you
will
likely
need
the
math
library
use
add
include
math
your
chill
file
and
add
your
mygcc
command
that
dash
ell
emm
which
short
for
library
math
mygcc
chill
chill
words
write
program
reminiscent
one
the
pipelines
explored
lab
specifically
program
called
words
that
breaks
its
input
into
series
words
one
per
line
may
take
input
from
stdin
from
files
whose
names
are
listed
arguments
usage
words
filename
input
when
filenames
are
given
the
command
line
words
reads
from
stdin
when
one
more
filenames
are
given
the
command
line
words
reads
from
each
file
sequence
the
special
filename
given
one
the
filenames
the
stdin
read
that
point
the
sequence
output
any
case
the
stdout
should
consist
sequence
lines
with
exactly
one
word
each
output
line
each
output
line
contains
exactly
one
word
and
other
characters
word
sequence
letters
although
you
may
tempted
think
the
input
sequence
lines
may
helpful
think
sequence
characters
note
possible
for
the
output
empty
there
are
words
any
the
input
files
any
error
messages
are
written
stderr
exit
the
program
terminates
normally
exits
with
return
code
otherwise
terminates
with
documented
non
zero
return
code
hints
check
out
man
ctype
mac
man
ctype
linux
system
consider
function
that
processes
file
given
file
parameter
would
easier
process
the
file
one
character
time
histo
write
program
that
reads
series
positive
integers
from
stdin
and
prints
out
histogram
there
should
bins
your
histogram
the
catch
you
don
know
advance
the
range
input
values
assume
the
integers
range
from
some
unknown
positive
maximum
thus
you
will
need
dynamically
scale
the
bin
size
for
your
histogram
example
below
usage
there
are
command
line
arguments
requirements
you
must
begin
with
bin
size
and
double
needed
all
positive
integers
observed
input
fit
within
the
histogram
you
must
have
bins
the
number
should
appear
only
once
your
code
input
input
read
from
stdin
whether
from
the
keyboard
redirected
from
file
piped
from
another
command
you
can
use
simple
scanf
for
this
assume
the
input
contains
only
integers
separated
white
space
space
tab
newline
assume
the
smallest
integer
zero
ignore
any
negative
integers
there
non
integer
non
space
content
the
file
for
the
program
treat
that
the
end
input
the
program
should
not
crash
enter
infinite
loop
should
just
silently
behave
there
are
more
integers
these
assumptions
make
easy
use
scanf
for
your
input
always
any
other
assumptions
you
make
should
documented
your
readme
file
and
your
testing
procedure
should
documented
your
testing
file
output
see
examples
below
exit
this
program
has
arguments
and
does
not
check
its
input
for
errors
should
always
exit
with
zero
status
examples
here
compile
and
run
the
program
and
type
set
numbers
spread
over
three
lines
but
doesn
matter
long
put
space
newline
between
numbers
ending
with
ctrl
the
beginning
line
that
sends
eof
the
program
then
printed
histogram
nicely
labeling
each
line
with
the
range
values
assigned
that
bin
and
printing
row
represent
the
count
values
that
fell
into
that
bin
mygcc
histo
histo
histo
bins
size
for
range
the
notation
includes
all
values
such
that
that
the
range
includes
but
does
not
include
for
example
now
watch
what
happens
input
number
outside
the
original
range
histo
bins
size
for
range
bins
size
for
range
bins
size
for
range
each
time
sees
number
outside
the
current
range
doubles
the
range
and
doubles
the
size
each
bin
notice
also
the
low
high
labels
the
histogram
this
notation
includes
both
low
and
high
and
everything
between
might
have
repeat
the
doubling
put
number
well
past
the
current
bin
size
histo
bins
size
for
range
bins
size
for
range
bins
size
for
range
bins
size
for
range
bins
size
for
range
here
example
using
bash
syntax
generate
list
numbers
and
piping
the
output
histo
echo
histo
bins
size
for
range
bins
size
for
range
bins
size
for
range
bins
size
for
range
bins
size
for
range
although
scale
the
bin
size
axis
not
asking
you
scale
the
bin
count
axis
for
printing
which
can
lead
some
really
wide
output
echo
histo
bins
size
for
range
bins
size
for
range
bins
size
for
range
bins
size
for
range
bins
size
for
range
bins
size
for
range
bins
size
for
range
bins
size
for
range
took
some
pains
format
the
low
high
range
indicators
for
each
row
using
fixed
width
field
just
wide
enough
hold
the
biggest
number
nice
touch
read
man
printf
for
some
clues
but
you
make
simpler
assumption
always
use
digit
field
width
representing
histogram
you
will
need
array
bins
represent
the
number
integers
observed
each
bin
you
need
keep
track
the
bin
size
and
the
range
the
histogram
you
observe
value
outside
the
range
you
should
double
the
bin
size
and
range
but
first
you
need
compress
the
current
bins
into
the
first
bins
you
likely
need
one
loop
compute
the
new
values
for
the
lower
half
the
bins
each
bin
receiving
the
sum
two
bins
counts
and
then
another
assign
the
new
value
the
upper
half
the
bins
again
the
number
may
only
occur
once
your
code
scattering
hard
coded
numbers
around
your
code
bad
style
notice
that
the
number
bins
bin
size
and
histogram
range
are
all
powers
what
hand
and
how
make
sure
compile
and
test
your
solutions
one
the
machines
you
choose
develop
your
solutions
some
other
system
you
are
responsible
ensure
that
the
work
you
submit
runs
correctly
machine
which
where
where
will
test
addition
your
code
each
the
four
subdirectories
lab
must
include
two
simple
text
files
readme
which
describes
how
your
program
should
compiled
and
executed
along
with
explanation
any
assumptions
you
made
about
the
assignment
see
the
example
readme
file
testing
which
describes
how
you
tested
the
program
including
test
inputs
and
test
scripts
these
test
inputs
and
test
scripts
should
included
files
the
same
directory
see
the
example
testing
file
that
case
would
not
need
include
testing
inputs
because
they
were
provided
files
generated
within
the
testing
file
itself
created
this
file
macos
terminal
choosing
export
text
from
the
shell
menu
when
had
finished
all
the
testing
commands
edited
with
emacs
add
the
comments
when
finished
you
should
have
the
following
files
lab
chill
readme
testing
chill
histo
readme
testing
histo
regress
readme
testing
regress
words
readme
testing
words
this
listing
was
produced
the
tree
command
neat
huh
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
lab
data
structures
engs
labs
notes
reading
resources
examples
lab
data
structures
due
friday
april
this
lab
you
code
set
data
structures
that
will
support
the
needs
the
tiny
search
engine
tse
assignment
about
the
data
structures
bag
set
counters
hashtable
general
notes
hints
what
hand
and
how
submitting
your
lab
this
lab
you
will
develop
some
general
purpose
data
structures
that
with
modular
design
can
used
for
other
labs
most
notably
the
tiny
search
engine
grading
will
focus
coding
style
including
consistent
formatting
selection
identifier
names
and
use
meaningful
comments
addition
correctness
and
testing
your
code
must
compile
without
producing
any
compiler
warnings
you
will
lose
points
the
compiler
produces
warnings
when
using
our
standard
compiler
flags
your
submitted
code
fails
compile
triggers
segmentation
fault
notify
you
and
give
you
opportunity
repair
and
resubmit
see
programs
that
crash
write
defensive
code
each
function
should
check
its
pointer
parameters
for
null
and
take
some
appropriate
safe
action
assignment
obtain
our
starter
kit
which
implements
the
bag
module
and
includes
the
readlinep
and
memory
module
your
assignment
add
three
new
modules
each
which
defines
different
data
structure
points
set
points
counters
points
hashtable
you
can
copy
the
starter
kit
your
own
work
directory
the
department
systems
assuming
you
logged
into
system
mkdir
labs
lab
public
html
labs
lab
starter
labs
lab
your
mac
using
scp
scp
username
flume
public
html
labs
lab
starter
lab
about
the
data
structures
the
specific
data
structures
are
defined
the
sections
below
the
table
below
compare
these
data
structures
with
the
two
explored
class
most
these
data
structures
allow
you
store
collection
items
both
the
set
and
hashtable
are
examples
abstract
data
structure
called
dictionary
which
provide
methods
like
insert
key
item
and
item
retrieve
key
where
the
key
allows
the
structure
distinguish
among
the
items
stores
behavior
list
bag
set
counters
hashtable
stores
item
yes
yes
yes
yes
uses
key
yes
yes
yes
keeps
items
order
yes
retrieval
first
item
any
item
key
key
key
insertion
duplicates
allowed
allowed
error
increment
count
error
notice
that
list
keeps
items
order
but
bag
set
does
not
set
and
hashtable
allow
you
retrieve
specific
item
indicated
its
key
whereas
bag
might
return
any
item
because
the
bag
and
list
don
distinguish
among
items
they
store
they
can
hold
duplicates
the
others
cannot
the
counters
data
structure
maintains
set
counters
each
identified
key
but
stores
items
instead
keeps
counter
for
each
key
attempting
insert
duplicate
key
results
increment
the
counter
bag
bag
unordered
collection
items
the
bag
starts
empty
grows
the
caller
adds
one
item
time
and
shrinks
the
caller
extracts
one
item
time
could
empty
could
contain
hundreds
items
items
are
indistinguishable
the
extract
function
free
return
any
item
from
the
bag
the
starter
kit
includes
our
bag
module
which
contains
bag
implements
bag
void
and
exports
exactly
the
following
functions
through
bag
create
new
empty
bag
return
null
error
bag
bag
new
void
add
new
item
the
bag
null
bag
ignored
null
item
ignored
void
bag
insert
bag
bag
void
item
return
any
data
item
from
the
bag
return
null
bag
null
empty
void
bag
extract
bag
bag
print
the
whole
bag
provide
the
output
file
and
func
print
each
item
null
nothing
bag
null
print
null
itemprint
null
print
nothing
for
each
item
void
bag
print
bag
bag
file
void
itemprint
file
void
item
iterate
over
the
whole
bag
call
the
given
function
each
item
passing
both
the
item
and
argument
ignore
null
bag
null
itemfunc
void
bag
iterate
bag
bag
void
arg
void
itemfunc
void
arg
void
item
delete
the
whole
bag
ignore
null
bag
provide
function
that
will
delete
each
item
may
null
void
bag
delete
bag
bag
void
itemdelete
void
item
set
set
maintains
unordered
collection
key
item
pairs
any
given
key
can
only
occur
the
set
once
starts
out
empty
and
grows
the
caller
inserts
new
key
item
pairs
the
caller
can
retrieve
items
asking
for
their
key
but
cannot
remove
update
pairs
items
are
distinguished
their
key
your
set
should
implement
set
void
with
char
keys
and
export
exactly
the
following
functions
through
set
create
new
empty
set
return
null
error
set
set
new
void
insert
item
identified
key
string
into
the
given
set
the
key
string
copied
for
use
the
set
return
false
key
exists
any
parameter
null
error
return
true
iff
new
item
was
inserted
bool
set
insert
set
set
const
char
key
void
item
return
the
item
associated
with
the
given
key
return
null
set
null
key
null
key
not
found
void
set
find
set
set
const
char
key
print
the
whole
set
provide
the
output
file
and
func
print
each
item
ignore
null
print
null
null
set
print
set
with
items
null
itemprint
void
set
print
set
set
file
void
itemprint
file
const
char
key
void
item
iterate
over
all
items
the
set
undefined
order
call
the
given
function
each
item
with
arg
key
item
set
null
itemfunc
null
nothing
void
set
iterate
set
set
void
arg
void
itemfunc
void
arg
const
char
key
void
item
delete
the
whole
set
ignore
null
set
provide
function
that
will
delete
each
item
may
null
void
set
delete
set
set
void
itemdelete
void
item
counters
counter
set
set
counters
each
distinguished
integer
key
set
each
key
can
only
occur
once
the
set
but
instead
storing
key
item
pairs
tracks
counter
for
each
key
starts
empty
each
time
counters
add
called
given
key
that
key
counter
incremented
the
current
counter
value
can
retrieved
asking
for
the
relevant
key
your
counters
should
implement
set
integer
counters
with
int
keys
where
keys
must
non
negative
and
export
exactly
the
following
functions
through
counters
create
new
empty
counter
structure
return
null
error
counters
counters
new
void
increment
the
counter
indicated
key
key
must
the
key
does
not
yet
exist
create
counter
for
and
initialize
ignore
ctrs
null
key
negative
void
counters
add
counters
ctrs
const
int
key
return
current
value
counter
associated
with
the
given
key
return
ctrs
null
key
not
found
int
counters
get
counters
ctrs
const
int
key
set
the
current
value
counter
associated
with
the
given
key
the
key
does
not
yet
exist
create
counter
for
and
initialize
the
given
value
ignore
ctrs
null
key
count
void
counters
set
counters
ctrs
const
int
key
int
count
print
all
counters
provide
the
output
file
ignore
null
print
null
null
ctrs
void
counters
print
counters
ctrs
file
iterate
over
all
counters
the
set
undefined
order
call
itemfunc
for
each
item
with
arg
key
count
ctrs
null
itemfunc
null
nothing
void
counters
iterate
counters
ctrs
void
arg
void
itemfunc
void
arg
const
int
key
int
count
delete
the
whole
counters
ignore
null
ctrs
void
counters
delete
counters
ctrs
hashtable
hashtable
set
key
item
pairs
acts
just
like
set
but
far
more
efficient
for
large
collections
your
hashtable
should
implement
set
void
with
char
keys
and
export
exactly
the
following
functions
through
hashtable
create
new
empty
hashtable
return
null
error
hashtable
hashtable
new
const
int
num
slots
insert
item
identified
key
string
into
the
given
hashtable
the
key
string
copied
for
use
the
hashtable
return
false
key
exists
any
parameter
null
error
return
true
iff
new
item
was
inserted
bool
hashtable
insert
hashtable
const
char
key
void
item
return
the
item
associated
with
the
given
key
return
null
hashtable
null
key
null
key
not
found
void
hashtable
find
hashtable
const
char
key
print
the
whole
table
provide
the
output
file
and
func
print
each
item
ignore
null
print
null
null
print
table
with
items
null
itemprint
void
hashtable
print
hashtable
file
void
itemprint
file
const
char
key
void
item
iterate
over
all
items
the
table
undefined
order
call
the
given
function
each
item
with
arg
key
item
null
itemfunc
null
nothing
void
hashtable
iterate
hashtable
void
arg
void
itemfunc
void
arg
const
char
key
void
item
delete
the
whole
hashtable
ignore
null
provide
function
that
will
delete
each
item
may
null
void
hashtable
delete
hashtable
void
itemdelete
void
item
the
starter
kit
provides
code
for
the
hash
function
general
notes
your
modules
must
implement
exactly
the
above
interface
not
modify
those
function
prototypes
you
need
helper
functions
data
types
likely
struct
types
those
should
defined
within
your
module
and
marked
static
they
are
not
visible
users
the
module
your
modules
must
print
nothing
except
course
the
xxx
print
function
you
want
add
debugging
printf
they
must
protected
something
like
ifdef
debug
ifdef
test
you
can
see
some
examples
bag
where
protected
some
debugging
code
with
ifdef
memtest
and
spot
the
bag
makefile
that
controls
that
flag
from
the
compiler
command
line
your
modules
must
have
global
variables
your
modules
must
have
main
function
modules
they
are
meant
used
other
programs
recall
how
the
module
defined
bag
and
bag
used
test
program
bagtest
your
modules
store
void
items
this
type
way
describing
pointer
anything
the
caller
user
your
module
must
pass
pointer
address
some
item
your
code
your
data
structure
holds
that
pointer
and
later
returns
the
caller
response
extract
find
operation
your
module
doesn
know
doesn
care
what
kind
things
the
items
are
your
module
doesn
allocate
memory
for
items
free
memory
for
items
copy
items
just
tracks
the
pointer
the
item
for
all
modules
the
caller
responsible
for
the
item
pointer
which
must
allocated
somehow
the
caller
the
modules
delete
function
like
destructor
allows
the
caller
provide
custom
itemdelete
function
that
knows
how
free
any
memory
consumed
item
for
this
reason
the
caller
must
avoid
inserting
the
same
item
same
address
multiple
times
later
the
itemdelete
method
would
called
multiple
times
that
item
which
could
lead
trouble
both
set
and
hashtable
work
with
string
type
keys
when
adding
new
item
with
set
insert
hashtable
insert
both
modules
make
their
own
copy
the
string
presumably
memory
allocated
malloc
the
module
then
responsible
for
this
memory
and
later
freeing
just
like
any
other
memory
allocates
this
copy
semantic
convenient
for
the
caller
who
need
not
worry
about
how
allocate
and
manage
the
key
string
after
inserting
into
the
set
hashtable
you
may
assume
that
non
null
key
proper
string
that
null
terminated
you
may
use
the
memory
module
use
the
native
malloc
and
free
and
you
may
use
valgrind
not
however
will
checking
your
code
for
memory
leaks
your
modules
must
each
have
makefile
compile
and
test
the
module
code
your
directory
for
module
must
therefore
have
xtest
program
hints
you
are
encouraged
follow
the
style
and
layout
the
bag
module
when
developing
new
modules
you
can
also
learn
lot
from
our
binary
trees
example
you
are
welcome
copy
snippets
code
from
this
any
other
example
code
long
you
add
comment
indicating
you
done
suggest
implementing
the
set
and
counters
simplified
linked
lists
much
like
did
for
bag
each
should
separate
implementation
because
they
differ
detail
and
semantics
your
hashtable
module
the
other
hand
should
make
use
the
set
data
structure
indeed
your
hashtable
will
array
pointers
sets
allocating
array
pointers
can
tricky
consider
these
tips
linked
lists
were
demonstrated
names
although
for
specialized
case
you
will
need
generalize
they
were
also
covered
see
the
notes
hashtables
were
also
covered
notes
slides
what
hand
and
how
make
sure
compile
and
test
your
solutions
one
the
linux
systems
before
submission
you
choose
develop
your
solutions
some
other
system
you
are
responsible
ensure
that
the
work
you
submit
runs
correctly
system
which
where
where
will
test
indeed
you
must
place
your
solutions
your
labs
lab
directory
the
department
linux
servers
you
worked
your
laptop
use
scp
copy
files
from
your
laptop
the
server
addition
your
code
each
the
four
subdirectories
lab
must
include
two
simple
text
files
readme
which
describes
how
your
program
should
compiled
and
executed
along
with
explanation
any
assumptions
you
made
about
the
assignment
see
the
readme
for
the
bag
module
testing
which
describes
how
you
tested
the
program
including
any
test
inputs
test
programs
and
test
scripts
these
test
files
should
included
your
submission
see
the
testing
for
the
bag
module
the
starter
kit
these
examples
are
written
markdown
format
hence
the
filename
extension
you
need
use
markdown
later
labs
now
great
time
learn
this
lab
the
use
markdown
optional
think
your
audience
for
each
file
the
readme
file
written
for
the
user
your
module
for
example
bag
readme
refers
the
interface
bag
and
describe
any
assumptions
implementation
details
compilation
instructions
basically
make
bag
the
testing
file
written
for
your
grader
for
example
bag
testing
describes
how
tested
bag
referring
bagtest
and
including
the
results
test
run
bagtest
out
your
test
requires
some
input
files
include
those
data
files
your
submission
and
refer
them
your
testing
file
the
solution
the
makefile
generates
the
necessary
input
files
downloading
them
from
the
web
your
lab
directory
must
contain
the
following
five
subdirectories
bag
with
makefile
bagtest
bag
bag
set
with
makefile
settest
set
set
readme
testing
counters
with
makefile
counterstest
counters
counters
readme
testing
hashtable
with
makefile
hashtabletest
hashtable
hashtable
readme
testing
common
directory
with
contents
inherited
from
our
starter
kit
each
readme
readme
explains
any
assumptions
and
acknowledges
any
limitations
each
testing
testing
shows
how
you
tested
the
module
include
any
special
input
files
you
used
for
testing
submitting
your
lab
before
the
deadline
run
labs
submit
make
sure
confirms
success
you
need
update
your
submission
run
the
same
command
again
will
overwrite
the
prior
submission
with
the
current
contents
your
lab
directory
you
wish
use
one
your
hour
extensions
run
this
command
before
the
deadline
labs
submit
extension
this
command
deletes
any
submission
you
may
have
made
previously
and
leaves
single
file
extension
there
indication
you
are
requesting
extension
when
you
are
later
ready
submit
your
work
above
labs
submit
this
overwrites
any
prior
submission
even
the
extension
request
thus
you
submit
before
the
deadline
you
effectively
cancel
your
request
for
extension
will
grade
the
first
submission
present
after
the
original
deadline
avoid
confusion
please
blitz
dartmouth
edu
you
want
late
submission
graded
instead
your
time
submission
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
lab
crawler
engs
labs
notes
reading
resources
examples
lab
crawler
due
friday
april
this
lab
you
begin
the
tiny
search
engine
tse
coding
the
crawler
according
the
crawler
requirements
spec
and
the
crawler
design
spec
preparation
assignment
submission
what
submission
how
extensions
hints
and
tips
libcs
markdown
testing
crawler
use
valgrind
and
gdb
memory
allocation
hashtable
url
pseudocode
pagedirectory
preparation
fork
copy
our
tse
starter
kit
make
new
project
your
gitlab
account
see
instructions
the
readme
there
ensure
the
repo
private
give
master
access
professor
palmer
ccpalmer
and
head
grader
haider
syed
may
have
two
ids
gitlab
use
the
one
with
clone
the
new
project
git
repository
your
unix
account
again
see
instructions
your
fork
readme
edit
the
readme
file
remove
the
git
instructions
suggested
template
the
bottom
the
file
include
your
name
the
terminal
copy
your
lab
sources
just
counters
set
hashtable
the
libcs
subdirectory
your
brand
new
repository
try
make
that
directory
ensure
everything
works
git
add
libcs
git
commit
git
push
visit
your
repo
gitlab
and
you
should
see
the
updated
readme
and
your
new
source
files
double
check
the
visibility
your
repo
ensure
private
assignment
write
the
crawler
first
sub
system
the
tiny
search
engine
please
follow
the
coding
style
guidelines
the
crawler
requirements
spec
and
the
crawler
design
spec
create
subdirectory
crawler
that
directory
write
program
crawler
that
implements
the
requirements
spec
leveraging
your
data
structures
please
take
special
care
that
your
crawler
does
not
explore
urls
that
are
not
internal
according
isinternalurl
that
directory
write
makefile
you
can
build
everything
from
the
top
level
directory
simply
typing
make
and
clean
everything
typing
make
clean
build
crawler
you
will
need
add
lcurl
include
the
libcurl
library
that
directory
write
readme
file
provide
any
special
information
about
how
compile
use
your
crawler
this
file
likely
short
you
must
use
markdown
see
below
that
directory
write
implementation
file
describe
the
implementation
your
crawler
you
must
use
markdown
see
below
add
testing
file
the
crawler
directory
telling
the
grader
how
you
tested
your
crawler
you
may
find
helpful
write
bash
script
execute
your
crawler
and
make
test
target
read
about
testing
below
you
create
files
and
directories
add
them
your
git
repository
important
not
add
any
compiled
files
git
short
your
repo
should
not
contain
any
data
files
core
dumps
files
built
with
make
and
removed
make
clean
commit
and
push
least
once
day
submission
what
this
lab
you
shall
add
edit
these
files
your
repo
readme
edited
makefile
possibly
edited
crawler
makefile
crawler
readme
implementation
testing
optional
other
files
related
testing
common
you
follow
our
tip
suggestion
below
pagedir
pagedir
libcs
you
wish
use
your
lab
solution
set
counters
hashtable
you
shall
not
modify
any
the
code
provide
libcs
you
shall
not
include
any
data
files
produced
the
crawler
any
binary
object
files
produced
the
compiler
backup
files
core
dumps
etc
submission
how
when
you
are
ready
for
final
submission
add
all
required
files
using
appropriate
git
add
commandline
commit
all
changes
using
appropriate
git
commit
commandline
tag
git
tag
lab
submit
push
git
push
tags
ensure
the
tags
are
pushed
the
remote
see
more
about
tags
use
your
web
browser
view
your
remote
gitlab
and
make
sure
there
tag
lab
submit
and
the
files
associated
with
that
tagged
commit
include
everything
need
grade
your
lab
grade
the
version
tagged
lab
submit
safe
for
you
continue
work
you
can
start
work
lab
even
you
commit
push
will
clone
your
repo
and
after
the
original
deadline
will
start
grading
when
first
see
one
with
tag
lab
submit
and
judge
late
that
tag
was
added
after
the
deadline
avoid
confusion
please
blitz
dartmouth
edu
you
want
late
submission
graded
instead
your
time
submission
your
entire
codebase
must
compile
with
make
from
the
top
level
directory
and
produce
compiler
warnings
find
that
your
code
will
not
compile
has
segmentation
faults
will
send
back
you
soon
can
for
repair
recall
the
grading
policy
will
run
your
crawler
our
own
set
test
data
will
run
valgrind
your
program
look
for
memory
leaks
you
will
lose
points
for
memory
leaks
memory
errors
important
the
libcurl
library
known
leave
some
still
reachable
memory
these
are
not
your
fault
and
will
not
count
against
you
extensions
you
want
claim
your
extension
create
file
extension
the
top
level
directory
your
repository
don
forget
git
push
before
the
deadline
will
see
the
file
for
example
touch
extension
git
add
extension
git
commit
extension
request
git
tag
lab
submit
add
tag
above
git
push
tags
push
gitlab
including
tags
use
your
web
browser
view
your
remote
gitlab
and
make
sure
there
tag
lab
submit
and
that
its
files
include
extension
when
you
are
ready
submit
your
code
remove
extension
follows
update
your
submission
tag
and
push
gitlab
git
extension
git
commit
ready
for
grading
git
push
delete
origin
lab
submit
remove
the
tag
from
remote
git
tag
lab
submit
move
the
local
tag
forward
this
commit
git
push
tags
push
gitlab
remote
including
tags
use
your
web
browser
view
your
remote
gitlab
and
make
sure
there
tag
lab
submit
that
its
files
not
include
extension
and
its
files
include
everything
need
grade
your
lab
hints
and
tips
libcs
provide
several
modules
the
libcs
directory
which
compiles
library
libcs
you
can
link
with
your
crawler
you
should
not
change
any
our
code
you
may
drop
your
set
counters
hashtable
files
from
lab
you
prefer
use
our
version
set
counters
and
hashtable
that
totally
fine
the
starter
kit
includes
pre
compiled
library
you
can
use
instead
see
libcs
readme
most
the
modules
this
directory
are
documented
with
corresponding
markdown
file
markdown
this
and
subsequent
labs
you
must
provide
documentation
files
markdown
format
that
you
should
supply
readme
implementation
and
testing
the
markdown
syntax
provides
very
simple
and
readable
markup
for
headings
lists
italics
bold
and
code
snippets
this
course
website
written
markdown
see
markdown
resources
testing
crawler
your
responsibility
test
your
crawler
and
write
about
your
approach
testing
consider
following
some
the
testing
plan
discussed
lecture
some
safe
seeds
you
might
test
include
http
old
www
dartmouth
edu
data
tse
letters
http
old
www
dartmouth
edu
index
html
http
old
www
dartmouth
edu
data
tse
wikipedia
the
first
two
are
good
depths
and
higher
but
the
wikipedia
case
likely
too
slow
run
past
maxdepth
you
may
point
your
crawler
any
other
user
home
page
but
your
seed
url
must
begin
with
http
old
www
dartmouth
edu
for
example
you
might
construct
your
own
test
files
your
unix
account
directory
like
public
html
tse
and
crawl
the
url
http
old
www
dartmouth
edu
youruserid
tse
use
valgrind
and
gdb
lecture
learned
how
use
valgrind
and
gdb
make
use
them
memory
allocation
you
may
find
the
memory
module
useful
its
use
optional
but
ready
use
part
library
libcs
our
lab
tried
recover
gracefully
from
memory
allocation
failures
the
tse
application
programs
bit
more
lazy
null
return
from
malloc
calloc
you
can
print
error
and
exit
with
non
zero
exit
status
you
may
find
the
assertp
function
defined
the
memory
module
useful
here
hashtable
url
our
design
calls
for
use
hashtable
store
the
urls
already
seen
our
hashtable
implementation
stores
void
item
with
each
key
but
you
just
storing
urls
keys
what
item
you
store
our
hashtable
disallows
null
items
suggestion
just
pass
constant
string
the
item
pseudocode
your
implementation
does
not
need
follow
our
pseudocode
this
one
reason
why
you
need
write
about
your
implementation
choices
implementation
our
pseudocode
refers
pagefetcher
note
this
effectively
webage
fetch
note
that
webage
fetch
inserts
second
delay
after
every
fetch
attempt
your
crawler
thus
gets
this
behavior
for
free
our
pseudocode
refers
pagescanner
yours
should
leverage
webage
getnexturl
pagedirectory
the
crawler
supposed
determine
whether
the
pathname
provided
pagedirectory
indeed
directory
and
writable
meaning
you
can
create
files
there
how
the
simplest
method
create
file
there
you
construct
string
filename
that
the
directory
name
followed
slash
followed
file
name
like
crawler
you
could
call
fopen
filename
returns
null
failure
then
either
the
directory
does
not
exist
not
writable
returns
non
null
success
close
the
file
fine
leave
crawler
the
page
directory
actually
the
presence
this
file
will
later
help
your
indexer
confirm
the
pagedirectory
indeed
crawler
produced
directory
tip
think
ahead
and
put
the
code
for
writing
webpages
the
pagedirectory
separate
pagedir
module
the
common
directory
write
makefile
that
produces
library
common
common
not
required
for
lab
but
you
end
needing
take
this
step
lab
anyway
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
lab
indexer
engs
labs
notes
reading
resources
examples
lab
indexer
due
friday
may
this
lab
you
continue
the
tiny
search
engine
tse
coding
the
indexer
and
program
for
testing
unit
that
saves
and
loads
index
files
according
the
indexer
requirements
spec
preparation
assignment
submission
what
submission
how
extensions
hints
and
tips
review
the
lecture
notes
libcs
markdown
testing
use
valgrind
and
gdb
memory
allocation
hashtable
pagedirectory
index
files
makefile
preparation
start
with
the
same
gitlab
project
you
used
for
lab
before
you
begin
make
sure
you
submitted
lab
correctly
you
tagged
the
submitted
version
with
lab
submit
instructed
and
pushed
that
tag
your
gitlab
remote
check
ensure
your
local
repo
clean
with
make
clean
and
everything
has
been
committed
and
pushed
according
git
status
you
have
files
that
need
committed
commits
that
should
pushed
that
now
oops
were
those
supposed
part
your
lab
submission
see
the
first
step
above
not
proceed
you
have
uncommitted
changes
unpushed
commits
seek
help
you
need
sort
out
your
repo
and
gitlab
pull
the
updated
and
additional
files
from
the
upstream
master
the
tse
starter
kit
into
your
local
repository
git
pull
upstream
master
this
works
you
earlier
followed
the
instructions
from
section
meeting
here
you
can
see
the
changes
that
will
happen
when
you
run
this
command
all
the
changes
made
the
starter
kit
since
was
released
commit
and
push
your
changes
perhaps
tag
this
commit
for
easy
reference
later
git
commit
git
tag
lab
start
git
push
tags
check
again
sure
your
gitlab
repo
private
not
internal
public
visit
your
repo
gitlab
click
settings
and
scroll
down
project
visibility
assignment
write
the
indexer
second
sub
system
the
tiny
search
engine
please
follow
the
coding
style
guidelines
and
the
indexer
requirements
spec
and
make
good
use
our
abstract
data
structures
now
good
time
read
section
searching
the
web
the
paper
about
search
engines
the
indexer
subdirectory
write
program
indexer
program
indextest
short
file
readme
provide
any
special
information
about
compiling
using
your
indexer
indextest
programs
file
design
provide
the
design
spec
for
indexer
not
index
tester
drawing
inspiration
from
the
lecture
notes
file
implementation
provide
the
implementation
spec
and
testing
plan
for
indexer
not
index
tester
file
testing
telling
the
grader
how
you
tested
your
indexer
see
about
testing
below
gitignore
file
telling
git
ignore
the
binary
files
libraries
executables
this
directory
both
programs
shall
leverage
common
code
from
common
the
common
directory
module
index
that
contains
all
the
logic
for
saving
and
loading
index
files
this
module
common
between
the
indexer
querier
and
indextest
module
pagedir
that
contains
all
the
logic
for
saving
pages
crawler
output
directory
for
loading
pages
from
crawler
output
directory
this
module
common
between
the
crawler
and
indexer
optionally
module
word
that
implements
normalizeword
this
module
common
between
the
indexer
and
querier
makefile
that
builds
common
for
use
the
programs
short
readme
file
explaining
how
build
common
gitignore
file
telling
git
ignore
the
binary
files
libraries
executables
this
directory
review
your
top
level
readme
and
makefile
update
needed
submission
what
this
lab
you
shall
edit
add
files
described
above
you
must
arrange
your
directory
like
ours
can
better
navigate
and
test
your
code
course
you
may
have
additional
files
test
scripts
test
output
code
you
chosen
break
into
multiple
files
here
the
solution
directory
structure
includes
some
the
optional
files
and
some
the
testing
files
which
may
not
present
your
solution
the
point
that
your
code
must
organized
the
same
directory
structure
you
shall
not
modify
any
the
code
provide
libcs
you
shall
not
include
any
data
files
produced
the
crawler
indexer
any
binary
object
files
produced
the
compiler
backup
files
core
dumps
etc
submission
how
when
you
are
ready
for
final
submission
add
all
required
files
using
appropriate
git
add
commandline
commit
all
changes
using
appropriate
git
commit
commandline
tag
git
tag
lab
submit
push
git
push
tags
ensure
the
tags
are
pushed
the
remote
see
more
about
tags
use
your
web
browser
view
your
remote
gitlab
and
make
sure
there
tag
lab
submit
and
the
files
associated
with
that
tagged
commit
include
everything
need
grade
your
lab
grade
the
version
tagged
lab
submit
safe
for
you
continue
work
you
can
start
work
lab
even
you
commit
push
will
clone
your
repo
and
after
the
original
deadline
will
start
grading
when
first
see
one
with
tag
lab
submit
and
judge
late
that
tag
was
added
after
the
deadline
avoid
confusion
please
blitz
the
team
dartmouth
edu
you
want
late
submission
graded
instead
your
time
submission
your
entire
codebase
must
compile
with
make
from
the
top
level
directory
and
produce
compiler
warnings
find
that
your
code
will
not
compile
has
segmentation
faults
will
send
back
you
soon
can
for
repair
recall
the
grading
policy
will
run
your
indexer
our
own
set
test
data
will
run
valgrind
your
program
look
for
memory
leaks
you
will
lose
points
for
memory
leaks
memory
errors
extensions
you
want
claim
your
extension
create
file
extension
the
top
level
directory
your
repository
don
forget
git
push
before
the
deadline
will
see
the
file
for
example
touch
extension
git
add
extension
git
commit
extension
request
git
tag
lab
submit
add
tag
above
git
push
tags
push
gitlab
including
tags
use
your
web
browser
view
your
remote
gitlab
and
make
sure
there
tag
lab
submit
and
that
its
files
include
extension
when
you
are
ready
submit
your
code
remove
extension
follows
update
your
submission
tag
and
push
gitlab
git
extension
git
commit
ready
for
grading
git
push
delete
origin
lab
submit
remove
the
tag
from
remote
git
tag
lab
submit
move
the
local
tag
forward
this
commit
git
push
tags
push
gitlab
remote
including
tags
use
your
web
browser
view
your
remote
gitlab
and
make
sure
there
tag
lab
submit
that
its
files
not
include
extension
and
its
files
include
everything
need
grade
your
lab
hints
and
tips
review
the
lecture
notes
there
are
some
design
tips
the
lecture
notes
this
week
reading
great
too
libcs
provide
several
modules
the
libcs
directory
which
compiles
library
libcs
you
can
link
with
your
indexer
you
should
not
change
any
our
code
you
may
drop
your
set
counters
hashtable
files
from
lab
you
prefer
use
our
version
set
counters
and
hashtable
that
totally
fine
the
starter
kit
includes
pre
compiled
library
you
can
use
instead
see
libcs
readme
most
the
modules
this
directory
are
documented
with
corresponding
markdown
file
markdown
this
and
subsequent
labs
you
must
provide
documentation
files
markdown
format
that
you
should
supply
readme
design
implementation
and
testing
the
markdown
syntax
provides
very
simple
and
readable
markup
for
headings
lists
italics
bold
and
code
snippets
this
course
website
written
markdown
see
markdown
resources
testing
your
crawler
never
quite
worked
never
fear
you
not
need
working
crawler
write
test
your
indexer
try
your
indexer
the
crawler
output
which
demo
crawler
output
recommend
that
you
write
bash
script
execute
your
indexer
you
might
run
that
script
from
make
test
target
your
testing
file
can
name
the
script
and
describe
what
does
because
some
our
data
structure
implementations
have
unspecified
ordering
the
order
which
data
appears
when
traversing
the
structure
may
not
the
same
the
order
items
were
inserted
the
file
saved
the
index
tester
may
not
literally
identical
the
file
read
that
program
provide
indexsort
awk
script
that
sorts
the
index
file
into
canonical
ordering
making
possible
compare
two
index
files
for
their
content
note
that
testing
different
from
the
testing
plan
which
short
high
level
description
written
before
you
code
testing
contains
refers
results
from
the
tests
may
refer
other
files
that
contain
input
output
from
your
test
runs
scripts
run
the
tests
they
need
not
copied
into
this
file
indeed
your
file
will
much
more
readable
you
don
fill
with
long
scripts
output
use
valgrind
and
gdb
lecture
learned
how
use
valgrind
and
gdb
make
use
them
memory
allocation
you
may
find
the
memory
module
useful
its
use
optional
but
ready
use
part
library
libcs
our
lab
tried
recover
gracefully
from
memory
allocation
failures
the
tse
application
programs
bit
more
lazy
null
return
from
malloc
calloc
you
can
print
error
and
exit
with
non
zero
exit
status
you
may
find
the
assertp
function
defined
the
memory
module
useful
here
hashtable
how
big
should
the
hashtable
the
indexer
querier
use
hashtable
store
inverted
index
words
documents
and
thus
the
hashtable
keyed
words
the
answer
the
above
question
then
depends
how
many
words
will
the
index
when
building
the
inverted
index
impossible
know
advance
how
many
words
you
will
find
all
those
pages
encountered
the
crawler
pick
reasonable
size
perhaps
something
the
range
slots
when
loading
inverted
index
from
file
though
you
can
know
how
many
words
because
there
one
word
per
line
the
index
file
and
easy
count
the
number
lines
see
file
once
your
code
can
obtain
the
number
words
think
about
how
can
compute
good
size
for
your
hashtable
pagedirectory
recall
that
the
crawler
fills
directory
with
saved
pages
lab
recommended
that
you
also
create
and
leave
file
crawler
the
page
directory
you
followed
that
advice
you
now
have
great
opportunity
you
might
include
function
iscrawlerdirectory
char
dir
your
pagedir
module
which
can
easily
verify
whether
dir
indeed
crawler
produced
directory
can
open
file
dir
crawler
for
reading
then
dir
crawler
produced
directory
not
either
the
dir
not
valid
pathname
not
directory
not
readable
directory
not
crawler
produced
directory
some
other
error
all
easily
caught
this
simple
test
index
files
read
each
line
the
index
file
works
well
read
the
word
then
loop
calling
fscanf
with
format
pull
off
one
pair
time
checking
the
return
value
fscanf
write
the
index
file
use
the
iterate
methods
built
into
your
data
structures
indeed
you
may
need
have
iterators
call
iterators
not
use
your
print
methods
for
this
purpose
those
are
meant
for
producing
pretty
human
readable
output
for
debugging
purposes
the
functions
found
file
should
helpful
makefile
your
indexer
makefile
needs
build
both
indexer
and
indextest
may
most
convenient
add
phony
top
most
rule
all
indexer
indextest
that
make
make
all
will
build
both
programs
you
want
build
just
one
run
make
indexer
make
indextest
you
may
also
find
useful
add
phony
rules
you
can
make
test
make
valgrind
good
luck
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
lab
querier
engs
labs
notes
reading
resources
examples
lab
querier
due
friday
may
this
lab
you
continue
the
tiny
search
engine
tse
coding
the
querier
according
the
querier
requirements
spec
preparation
assignment
submission
what
submission
how
extensions
grading
hints
and
tips
review
the
lecture
notes
hashtable
parsing
queries
combining
results
ranking
results
testing
your
querier
chopping
string
into
array
strings
ctype
preparation
start
with
the
same
gitlab
project
you
used
for
labs
before
you
begin
make
sure
you
submitted
lab
correctly
you
tagged
the
submitted
version
with
lab
submit
instructed
and
pushed
that
tag
your
gitlab
remote
check
ensure
your
local
repo
clean
with
make
clean
and
everything
has
been
committed
and
pushed
according
git
status
you
have
files
that
need
committed
commits
that
should
pushed
that
now
oops
were
those
supposed
part
your
lab
submission
see
the
first
step
above
not
proceed
you
have
uncommitted
changes
unpushed
commits
seek
help
you
need
sort
out
your
repo
and
gitlab
pull
the
updated
and
additional
files
from
the
upstream
master
the
tse
starter
kit
into
your
local
repository
git
pull
upstream
master
this
works
you
earlier
followed
the
instructions
from
section
meeting
here
you
can
see
the
changes
that
will
happen
when
you
run
this
command
all
the
changes
made
the
starter
kit
since
was
released
commit
and
push
your
changes
perhaps
tag
this
commit
for
easy
reference
later
git
commit
git
tag
lab
start
git
push
tags
check
again
sure
your
gitlab
repo
private
not
internal
public
visit
your
repo
gitlab
click
settings
and
scroll
down
project
visibility
assignment
write
the
querier
third
sub
system
the
tiny
search
engine
please
follow
the
coding
style
guidelines
and
the
querier
requirements
spec
and
make
good
use
our
abstract
data
structures
the
querier
subdirectory
write
program
querier
makefile
build
querier
short
file
readme
provide
any
special
information
about
compiling
using
your
querier
file
design
provide
the
design
spec
for
querier
drawing
inspiration
from
the
lecture
notes
file
implementation
provide
the
implementation
spec
and
testing
plan
for
querier
file
testing
telling
the
grader
how
you
tested
your
querier
see
about
testing
below
gitignore
file
telling
git
ignore
the
binary
files
libraries
executables
this
directory
your
program
shall
leverage
common
code
from
common
the
common
directory
module
index
that
contains
all
the
logic
for
saving
and
loading
index
files
this
module
common
between
the
indexer
querier
and
indextest
module
pagedir
that
contains
all
the
logic
for
saving
pages
crawler
output
directory
for
loading
pages
from
crawler
output
directory
this
module
common
between
the
crawler
and
indexer
optionally
module
word
that
implements
normalizeword
this
module
common
between
the
indexer
and
querier
makefile
that
builds
common
for
use
the
programs
short
readme
file
explaining
how
build
common
gitignore
file
telling
git
ignore
the
binary
files
libraries
executables
this
directory
review
your
top
level
readme
and
makefile
update
needed
submission
what
this
lab
you
shall
edit
add
files
described
above
you
must
arrange
your
directory
like
ours
can
better
navigate
and
test
your
code
course
you
may
have
additional
files
test
scripts
test
output
code
you
chosen
break
into
multiple
files
here
the
solution
directory
structure
includes
some
the
optional
files
and
some
the
testing
files
which
may
not
present
your
solution
the
point
that
your
code
must
organized
the
same
directory
structure
you
shall
not
modify
any
the
code
provide
libcs
you
shall
not
include
any
data
files
produced
the
crawler
indexer
any
binary
object
files
produced
the
compiler
backup
files
core
dumps
etc
submission
how
when
you
are
ready
for
final
submission
add
all
required
files
using
appropriate
git
add
commandline
commit
all
changes
using
appropriate
git
commit
commandline
tag
git
tag
lab
submit
push
git
push
tags
ensure
the
tags
are
pushed
the
remote
see
more
about
tags
use
your
web
browser
view
your
remote
gitlab
and
make
sure
there
tag
lab
submit
and
the
files
associated
with
that
tagged
commit
include
everything
need
grade
your
lab
will
clone
your
repo
and
after
the
original
deadline
will
start
grading
when
first
see
one
with
tag
lab
submit
and
judge
late
that
tag
was
added
after
the
deadline
avoid
confusion
please
blitz
the
team
dartmouth
edu
you
want
late
submission
graded
instead
your
time
submission
your
entire
codebase
must
compile
with
make
from
the
top
level
directory
and
produce
compiler
warnings
find
that
your
code
will
not
compile
has
segmentation
faults
will
send
back
you
soon
can
for
repair
recall
the
grading
policy
will
run
your
querier
our
own
set
test
data
will
run
valgrind
your
program
look
for
memory
leaks
you
will
lose
points
for
memory
leaks
memory
errors
extensions
you
want
claim
your
extension
create
file
extension
the
top
level
directory
your
repository
don
forget
git
push
before
the
deadline
will
see
the
file
for
example
touch
extension
git
add
extension
git
commit
extension
request
git
tag
lab
submit
add
tag
above
git
push
tags
push
gitlab
including
tags
use
your
web
browser
view
your
remote
gitlab
and
make
sure
there
tag
lab
submit
and
that
its
files
include
extension
when
you
are
ready
submit
your
code
remove
extension
follows
update
your
submission
tag
and
push
gitlab
git
extension
git
commit
ready
for
grading
git
push
delete
origin
lab
submit
remove
the
tag
from
remote
git
tag
lab
submit
move
the
local
tag
forward
this
commit
git
push
tags
push
gitlab
remote
including
tags
use
your
web
browser
view
your
remote
gitlab
and
make
sure
there
tag
lab
submit
that
its
files
not
include
extension
and
its
files
include
everything
need
grade
your
lab
grading
lab
scored
the
basis
points
with
delivery
documentation
style
testing
comprising
most
the
points
functionality
represents
points
recognition
that
you
might
find
best
start
simple
and
slowly
enhance
your
solution
you
get
the
simpler
version
working
you
can
earn
points
follows
points
your
querier
prints
the
set
documents
that
contain
all
the
words
the
query
you
may
treat
operators
and
regular
words
points
your
querier
also
supports
and
and
operators
but
without
precedence
mathematical
terms
treats
them
left
associative
equal
precedence
operators
points
your
querier
also
supports
and
precedence
over
points
your
querier
also
prints
the
document
set
decreasing
order
score
thus
meeting
the
full
specs
partial
credit
available
course
per
the
judgement
the
grader
but
above
the
coarse
grain
rubric
hints
and
tips
processing
query
and
ranking
the
results
are
tricky
encourage
you
start
with
simplified
case
test
thoroughly
then
enhance
easier
code
test
and
debug
and
when
facing
deadline
nice
have
less
functional
program
that
works
than
full
functional
program
that
doesn
work
see
the
above
section
grading
regarding
the
points
allocated
you
achieve
higher
levels
functionality
review
the
lecture
notes
there
are
some
examples
and
design
tips
the
lecture
notes
hashtable
how
big
should
your
hashtable
well
you
can
know
how
many
words
will
store
because
the
index
file
has
one
word
per
line
and
you
can
count
the
number
lines
the
index
file
before
creating
index
data
structure
and
before
loading
the
file
into
the
structure
just
think
about
how
the
hash
table
size
slots
might
relate
the
number
words
will
need
store
parsing
queries
strongly
recommend
that
your
code
read
the
entire
query
line
input
into
single
string
then
tokenize
the
query
string
that
you
should
write
function
that
takes
string
and
builds
array
words
should
use
white
space
space
tab
the
delimiter
each
word
can
normalized
lower
cased
and
checked
for
illegal
characters
before
being
added
the
array
see
one
approach
bottom
now
that
all
the
character
character
parsing
behind
you
and
you
have
array
words
you
can
step
through
the
array
print
clean
query
that
with
extraneous
spaces
and
all
letters
lower
case
you
can
then
step
through
the
array
according
the
structure
defined
the
bnf
two
tips
validate
the
basic
structure
neither
the
first
last
word
may
operator
and
two
operators
may
not
adjacent
valid
proceed
next
step
otherwise
print
suitable
error
message
structure
your
code
follow
the
structure
the
grammar
which
has
two
non
terminals
query
and
andsequence
write
function
that
handles
each
one
function
return
set
documents
that
satisfy
andsequence
looping
over
words
accumulate
answer
like
running
product
you
another
function
return
set
documents
that
satisfy
query
looping
over
calls
the
above
function
for
each
andsequence
accumulate
answer
like
running
total
you
see
lecture
notes
for
more
hints
about
how
this
might
work
combining
results
suppose
you
have
one
counters
object
representing
the
set
documents
which
given
word
appears
and
another
counters
object
representing
the
set
documents
which
another
word
appears
each
counter
set
really
set
docid
count
pairs
how
you
combine
them
recall
lecture
you
are
processing
worda
and
wordb
the
set
documents
that
match
both
words
the
intersection
the
two
sets
and
the
score
for
each
document
per
the
specs
the
minimum
the
count
for
each
document
you
need
way
intersect
two
counters
recommend
iterating
over
one
set
and
for
each
item
checking
whether
that
document
exists
the
other
set
update
the
first
set
according
what
you
find
you
can
use
counters
iterate
counters
get
and
counters
set
this
without
modifying
your
counters
module
you
are
processing
worda
wordb
the
set
documents
that
match
either
word
the
union
the
two
sets
and
the
score
for
each
document
per
the
definition
above
the
sum
the
count
for
each
document
you
need
way
union
two
counters
recommend
iterating
over
the
second
set
and
for
each
item
checking
whether
that
document
exists
the
first
set
update
the
first
set
according
what
you
find
again
you
can
use
counters
iterate
counters
get
and
counters
set
this
without
modifying
your
counters
module
while
processing
andsequence
you
can
compute
running
product
that
counters
object
that
represents
the
intersection
everything
seen
far
the
sequence
when
processing
query
that
disjunction
andsequence
results
you
can
similarly
compute
running
sum
that
counters
object
that
represents
the
union
everything
seen
far
the
sequence
ranking
results
after
parsing
and
interpreting
query
you
will
likely
have
counters
object
representing
the
score
for
each
satisfying
document
the
counters
module
does
not
have
sort
method
way
iterate
over
the
items
sorted
order
suggest
you
use
counters
iterate
which
the
itemfunc
inserts
the
items
into
new
array
structs
each
struct
representing
one
satisfying
document
docid
score
use
counters
iterate
twice
once
count
the
number
items
the
set
you
can
allocate
appropriate
sized
array
and
again
stuff
each
item
into
the
new
array
your
itemfunc
uses
insertion
sort
approach
drop
the
new
item
into
the
array
the
array
sorted
decreasing
score
order
you
end
the
iteration
with
nicely
sorted
array
structs
then
you
can
simply
loop
over
the
array
print
out
the
list
documents
testing
your
querier
your
querier
reads
queries
from
stdin
one
per
line
you
can
test
interactively
but
thorough
and
repeated
testing
you
can
write
collection
little
files
each
which
contains
one
more
queries
your
querier
and
run
commands
like
querier
testquery
you
might
write
short
bash
script
run
the
querier
through
several
such
test
files
that
script
might
even
compare
the
output
known
good
output
for
regression
testing
you
are
welcome
but
not
required
use
the
fuzzquery
provided
the
updated
starter
kit
for
testing
your
querier
again
you
might
write
short
bash
script
and
makefile
rules
help
you
run
tests
using
this
program
you
choose
use
this
program
you
will
need
change
the
std
switch
the
cflags
definition
your
makefile
follows
cflags
wall
pedantic
std
gnu
ggdb
flags
your
indexer
never
quite
worked
never
fear
you
not
need
working
indexer
write
test
your
querier
try
your
querier
the
indexer
output
data
tse
output
chopping
string
into
array
strings
here
nice
trick
for
breaking
single
string
char
line
into
array
strings
char
words
the
example
below
the
query
has
two
words
and
there
are
leading
spaces
separating
spaces
and
trailing
space
terminated
null
because
string
just
pointer
array
characters
terminated
null
character
can
chop
this
single
string
into
multiple
strings
replacing
two
the
spaces
with
nulls
and
recording
pointer
the
beginning
each
word
don
need
allocate
any
memory
for
these
new
strings
copy
these
strings
they
stay
right
where
they
are
make
this
happen
think
about
sliding
two
pointers
along
the
array
starting
line
one
pointer
might
char
word
and
you
slide
over
the
first
non
space
the
other
pointer
might
char
rest
and
you
slide
from
word
the
first
non
letter
squash
that
character
rest
with
null
and
you
created
null
terminated
string
starting
word
think
carefully
about
the
edge
cases
you
construct
the
loops
and
slide
the
pointers
ctype
you
may
find
the
functions
isalpha
and
isspace
useful
read
the
man
page
they
are
from
the
ctype
package
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
moved
permanently
moved
permanently
nginx
welcome
engs
engs
labs
notes
reading
resources
examples
welcome
engs
this
note
discusses
the
aim
and
schedule
the
course
and
takes
brief
look
unix
programming
and
computer
architecture
the
course
the
aim
this
course
develop
the
necessary
systems
programming
skills
and
unix
foundation
tackle
the
design
implementation
and
integration
large
software
project
working
small
teams
the
challenge
the
course
quickly
get
people
speed
there
sufficient
time
get
into
the
details
complex
software
design
project
the
first
part
the
course
serves
develop
design
programming
and
other
systems
skills
such
source
code
management
testing
and
debugging
the
second
part
the
course
all
about
the
project
and
team
work
good
team
work
will
lead
success
that
the
message
note
about
unix
linux
unix
came
first
all
the
others
including
bsd
macos
and
all
the
variants
linux
are
derivations
that
original
effort
while
use
ubuntu
linux
the
machines
you
may
elect
use
your
own
copy
linux
the
unix
that
mac
osx
based
except
when
really
matters
use
the
term
unix
refer
them
all
the
syllabus
nutshell
unix
shell
commands
shell
programming
structure
arrays
pointers
dynamic
memory
files
programming
tools
gcc
gnu
compiler
make
maintain
groups
programs
gdb
gnu
debugger
git
source
code
management
valgrind
profiling
and
memory
leak
checker
software
development
methodology
design
implement
unit
test
debug
integration
demo
maintenance
programming
building
search
engine
crawler
indexer
query
engine
team
project
surprise
the
course
includes
several
unix
shell
and
programming
assignments
listed
under
modules
canvas
there
are
lectures
all
the
lecture
material
videos
for
easy
reference
class
time
devoted
working
programming
problems
individually
module
and
teams
for
the
remainder
the
course
please
take
note
the
reading
assigned
each
week
will
list
the
reading
week
week
rather
than
lecture
lecture
give
you
some
flexibility
but
please
the
reading
you
find
interesting
and
valuable
logistics
read
the
logistics
information
about
communication
sure
track
canvas
for
announcements
and
updates
about
engagement
you
will
learn
more
from
this
course
you
are
actively
engaged
where
engagement
preparation
participation
read
the
lecture
notes
and
weekly
reading
practice
home
and
participate
with
your
team
mates
about
the
programming
there
significant
amount
programming
this
course
requiring
considerable
time
commitment
the
part
the
student
you
will
need
well
organized
complete
all
the
programming
assignments
and
project
start
each
lab
early
will
challenging
but
hope
will
fun
about
the
project
you
will
assigned
team
and
given
about
three
weeks
complete
large
project
requiring
strong
collaboration
and
problem
solving
mindset
each
member
responsible
for
contributing
the
overall
system
design
implementation
testing
integration
and
documentation
the
goal
this
activity
help
you
develop
the
confidence
skills
and
habits
necessary
write
large
computer
programs
while
part
multi
person
team
you
will
become
conversant
software
engineering
paradigms
such
source
code
control
with
git
and
other
open
source
tools
that
ease
the
software
development
process
addition
you
will
develop
vital
skills
self
directed
learning
problem
solving
and
communication
the
project
concludes
with
demo
and
review
your
design
and
implementation
the
first
few
modules
cover
unix
the
shell
and
shell
programming
this
not
meant
detailed
presentation
the
unix
and
its
programming
tools
would
require
whole
term
cover
all
that
material
detail
need
know
enough
about
unix
and
its
tools
able
navigate
our
way
around
the
system
write
some
basic
shell
scripts
and
use
its
programming
tools
important
that
you
use
these
notes
starting
point
but
like
any
budding
engineer
you
need
some
experimenting
and
read
the
details
you
need
the
web
and
find
information
there
are
gaps
your
knowledge
and
then
come
see
the
instructor
tas
for
help
you
still
stuck
there
are
many
references
the
resources
page
caveat
please
take
note
that
the
notes
will
not
always
detailed
you
will
need
augment
these
notes
with
your
own
comments
and
using
the
references
and
reading
assignments
you
can
dive
deeper
into
the
topic
the
command
line
shell
examples
unix
was
originally
developed
for
computers
with
hardwired
terminals
each
which
was
basically
electronic
typewriter
printer
with
keyboard
there
were
graphical
displays
and
the
concepts
windows
and
mouse
had
not
yet
been
invented
interact
with
the
computer
the
user
types
the
keyboard
and
the
computer
echos
the
keystrokes
the
paper
see
the
historical
note
below
the
system
controlled
typing
commands
most
which
print
results
for
the
user
see
the
interaction
occurs
over
the
command
line
modern
unix
systems
support
rich
graphical
user
interfaces
but
under
the
hood
they
all
support
the
command
line
this
class
will
demonstrate
everything
using
the
macos
command
line
accessed
via
the
macos
application
called
terminal
you
have
mac
you
can
follow
along
you
use
windows
consider
installing
linux
your
laptop
either
dual
boot
virtual
machine
but
all
can
and
will
also
use
the
thayer
machines
when
open
new
terminal
window
mac
can
type
unix
commands
the
prompt
this
prompt
from
the
shell
program
that
interprets
your
command
line
and
runs
program
representing
each
command
your
prompt
may
look
different
the
shell
allows
users
customize
prompts
and
you
see
few
formats
the
examples
below
macbook
applications
movies
bin
creative
cloud
files
music
desktop
pictures
lib
documents
pictures
personal
projects
downloads
public
public
html
dropbox
scans
repositories
google
drive
shared
src
library
sites
macbook
echo
hello
hello
macbook
the
command
the
list
directory
contents
command
the
echo
command
like
print
statement
echos
its
arguments
back
most
commands
quickly
produce
some
output
and
then
exit
some
will
run
too
long
perhaps
printing
too
much
output
you
can
stop
kill
the
command
forcing
exit
typing
control
the
keyboard
one
silly
program
yes
just
prints
infinite
sequence
characters
until
you
kill
dfk
yes
dfk
some
commands
ask
for
your
input
and
continue
read
input
until
they
read
end
file
eof
you
can
cause
the
program
detect
eof
typing
control
the
beginning
input
line
below
typed
three
lines
text
the
the
start
the
fourth
input
line
the
cat
program
flume
mail
kotz
subject
hello
from
this
email
message
from
kotz
can
end
the
message
typing
ctrl
bye
eot
flume
here
when
typed
ctrl
the
mail
program
detected
end
file
eof
its
input
the
keyboard
then
printed
eot
and
exited
moments
later
the
mail
message
landed
inbox
notice
the
difference
between
and
the
former
kills
the
program
immediately
whereas
the
latter
causes
detect
eof
when
next
reads
input
from
the
keyboard
logging
into
remote
machine
using
ssh
thayer
operates
set
linux
machines
called
hubn
thayer
dartmouth
edu
where
number
between
and
you
can
use
these
practice
using
ssh
but
use
the
machines
for
verifying
your
labs
before
you
hand
them
your
labs
login
from
mac
using
the
ecure
ell
ssh
unix
command
the
ssh
command
establishes
secure
channel
and
uses
public
key
cryptography
authenticate
the
remote
computer
and
the
user
the
ssh
command
replaces
the
archaic
telnet
remote
communications
with
another
computer
and
rlogin
remote
login
because
they
lack
security
the
ssh
command
exclusively
used
these
days
because
your
session
encrypted
when
transmitted
over
the
network
rather
than
being
sent
clear
text
below
remotely
log
user
kotz
the
server
named
flume
giving
its
full
name
flume
dartmouth
edu
macbook
ssh
kotz
flume
dartmouth
edu
last
login
fri
jan
from
kotz
flume
old
public
html
kotz
flume
labs
kotz
flume
labs
kotz
flume
logout
connection
flume
dartmouth
edu
closed
macbook
also
possible
connect
remote
linux
server
using
windows
early
form
graphical
user
interface
that
has
the
capability
run
applications
remote
server
but
put
the
windows
your
local
computer
won
using
this
course
but
you
may
wish
explore
the
option
there
are
hundreds
unix
commands
but
you
probably
only
need
few
dozen
get
each
unix
command
has
short
abbreviated
command
name
list
directory
secure
shell
ssh
and
its
associated
syntax
that
typically
includes
various
arguments
and
options
typically
these
options
switches
they
are
also
known
are
either
single
letter
preceded
hyphen
one
more
words
preceded
two
hyphens
verbose
for
example
the
format
ssh
command
line
looks
like
this
ssh
options
user
hostname
command
ssh
kotz
flume
dartmouth
edu
the
switch
informs
the
ssh
command
that
the
username
the
user
logging
kotz
alternately
could
have
used
the
form
ssh
kotz
flume
dartmouth
edu
this
good
time
look
the
formatting
these
command
help
texts
the
are
used
denote
optional
things
like
command
while
the
things
outside
the
like
hostname
must
specified
getting
information
using
the
online
manual
man
you
want
the
detailed
syntax
unix
command
you
can
use
the
manual
command
followed
the
command
man
ssh
which
produced
the
following
ssh
bsd
general
commands
manual
ssh
name
ssh
openssh
ssh
client
remote
login
program
synopsis
ssh
aacfgkkmnnqsttvvxxyy
bind
address
cipher
spec
bind
address
port
escape
char
configfile
pkcs
identity
file
bind
address
port
host
hostport
login
name
mac
spec
ctl
cmd
option
port
bind
address
port
host
hostport
ctl
path
host
port
local
tun
remote
tun
user
hostname
command
description
ssh
ssh
client
program
for
logging
into
remote
machine
and
for
executing
commands
remote
machine
intended
replace
rlogin
and
rsh
and
provide
secure
encrypted
communications
between
two
untrusted
hosts
over
insecure
network
connections
and
arbitrary
tcp
ports
can
also
forwarded
over
the
secure
channel
ssh
connects
and
logs
into
the
specified
hostname
with
optional
user
name
the
user
must
prove
his
her
identity
the
remote
machine
using
one
several
methods
depending
the
protocol
version
used
see
below
command
specified
executed
the
remote
host
instead
login
shell
the
options
are
follows
forces
ssh
try
protocol
version
only
forces
ssh
try
protocol
version
only
forces
ssh
use
ipv
addresses
only
forces
ssh
use
ipv
addresses
only
enables
forwarding
the
authentication
agent
connection
this
can
also
specified
per
host
and
whole
lot
more
this
just
snippet
the
man
ssh
output
man
short
for
manual
the
manual
output
includes
all
the
nitty
gritty
details
options
and
about
the
command
for
most
commands
you
can
use
the
common
option
help
two
hyphens
get
brief
breakdown
the
command
and
its
switches
this
doesn
work
for
all
commands
including
ssh
interestingly
but
that
case
the
use
help
interpreted
invalid
entry
ssh
and
lists
the
options
anyway
you
can
use
man
keyword
search
through
the
manual
pages
for
matches
keyword
for
example
kotz
flume
man
shell
bash
gnu
bourne
again
shell
capsh
capability
shell
wrapper
chroot
run
command
interactive
shell
with
special
root
directory
chsh
change
your
login
shell
cpan
admin
cpan
shell
for
cpan
admins
cpan
plugin
base
class
for
cpan
shell
extensions
csh
shell
with
file
name
completion
and
command
line
editing
and
much
more
your
home
directory
and
its
files
each
user
has
home
directory
after
you
have
logged
using
ssh
you
are
your
home
directory
that
the
shell
notion
your
current
working
directory
your
home
directory
can
look
our
home
directory
path
using
the
pwd
print
working
directory
command
you
can
always
use
the
man
and
info
commands
get
more
information
kotz
flume
pwd
net
nusers
kotz
kotz
flume
the
tilde
above
shorthand
for
home
let
take
look
the
contents
home
directory
using
the
switch
which
means
long
format
kotz
flume
old
public
html
kotz
flume
total
drwxrwxr
kotz
root
feb
drwxrwxr
kotz
root
jan
old
drwxr
kotz
root
mar
public
html
kotz
flume
bash
such
file
directory
kotz
flume
bash
command
not
found
kotz
flume
kotz
flume
total
drwxr
kotz
root
jan
lab
drwxr
kotz
root
feb
lab
drwxr
kotz
root
jan
project
kotz
root
feb
testfile
rwxr
kotz
root
feb
testread
kotz
flume
yes
mistyped
two
commands
that
example
and
wanted
you
see
what
the
system
says
when
you
make
mistake
just
case
you
make
one
yourself
sometime
the
command
changes
the
current
working
directory
finally
typed
right
and
the
shell
reported
that
working
directory
the
same
command
listed
that
directory
the
second
time
files
can
plain
files
directories
special
files
more
later
can
see
that
each
file
has
file
permissions
and
other
data
associated
with
for
example
the
directory
public
html
drwxr
kotz
root
mar
public
html
you
can
traverse
directory
trees
assuming
you
have
the
appropriate
permission
unix
supports
number
shells
command
line
interpreters
use
the
echo
command
can
look
the
environment
variable
that
tells
which
shell
running
for
this
course
will
use
the
bash
born
again
shell
shell
again
the
shell
the
command
processor
for
unix
systems
one
way
find
out
what
shell
you
running
try
this
kotz
flume
echo
shell
shell
shell
bin
bash
kotz
flume
the
last
parameter
echo
substitutes
the
value
the
variable
shell
more
the
bash
shell
later
another
useful
command
for
copying
files
between
machines
the
scp
secure
copy
remote
file
copy
program
command
below
find
then
copy
the
schedule
for
from
the
course
website
dfk
ssh
kotz
flume
last
login
mon
mar
from
kotz
flume
kotz
flume
net
class
archive
master
bashrc
proc
log
src
web
tse
from
download
repos
awk
private
public
html
web
kotz
flume
net
class
public
html
kotz
flume
net
class
public
html
css
labs
logistics
reading
schedule
pdf
index
html
lectures
project
resources
schedule
xlsx
kotz
flume
net
class
public
html
logout
connection
flume
closed
dfk
scp
flume
dartmouth
edu
net
class
public
html
schedule
pdf
schedule
pdf
dfk
open
schedule
pdf
dfk
recall
that
home
directory
the
home
directory
for
user
changed
working
directory
the
home
then
into
its
public
html
and
listed
the
files
there
now
know
the
path
name
for
the
desired
file
the
directory
name
followed
slash
followed
the
filename
the
scp
command
allows
specify
the
host
and
pathname
for
the
source
and
destination
the
copy
here
the
destination
shorthand
for
current
working
directory
finally
used
the
macos
command
open
open
the
file
which
launches
preview
show
the
pdf
logging
out
when
are
ready
logout
from
our
session
flume
dartmouth
edu
use
logout
exit
kotz
flume
logout
connection
flume
dartmouth
edu
closed
one
more
thing
unix
machines
note
the
following
depending
your
personal
computer
operating
system
linux
the
systems
are
running
ubuntu
gnu
linux
your
linux
will
likely
sufficiently
compatible
that
you
won
have
any
trouble
developing
your
machine
and
delivering
your
assignments
machine
mac
mac
osx
unix
conforms
the
posix
standard
for
the
api
shell
utilities
and
threads
and
can
compile
and
run
your
existing
code
the
gnu
tools
will
using
such
gcc
make
etc
are
either
included
freely
available
you
may
need
install
command
line
tools
via
xcode
you
will
prompted
when
you
first
type
gcc
make
related
commands
you
can
use
the
terminal
application
you
can
also
use
the
ssh
command
remotely
log
computers
discussed
above
recommend
you
install
homebrew
windows
there
are
unix
command
shells
for
windows
and
even
window
system
for
windows
systems
however
since
this
unix
course
you
would
far
better
off
doing
your
assignments
the
thayer
machines
historical
note
the
name
terminal
still
commonly
used
unix
parlance
right
down
the
macos
app
that
name
this
term
refers
the
fact
that
early
unix
computers
like
other
computers
its
time
had
small
number
interactive
terminals
connected
each
directly
connected
dedicated
wire
card
within
the
computer
each
terminal
was
little
more
than
keyboard
and
screen
the
early
days
keyboard
and
printer
that
would
print
each
character
was
typed
and
print
the
characters
sent
the
computer
the
first
such
terminals
were
teletypes
adapted
from
the
device
used
newsrooms
around
the
country
which
printed
characters
transmitted
over
the
phone
line
from
distant
device
this
video
shows
teletype
model
asr
from
the
sound
this
machine
can
you
tell
why
television
news
shows
opening
music
usually
has
stocatto
tap
tap
tap
tap
tap
background
theme
one
the
first
interactive
computer
systems
ever
used
was
pdp
running
etos
and
basic
far
simpler
than
unix
with
couple
teletype
terminals
found
video
refurbished
pdp
driving
teletype
https
www
youtube
com
watch
ylvwo
fun
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
introduction
bash
engs
labs
notes
reading
resources
examples
introduction
bash
don
forget
this
week
reading
this
note
discuss
the
unix
shell
and
its
commands
the
shell
command
line
interpreter
and
invokes
kernel
level
commands
also
can
used
programming
language
design
your
own
commands
come
shell
programming
future
note
not
recommend
that
you
buy
book
about
unix
the
shell
there
are
some
very
good
references
and
free
access
online
books
see
the
resources
page
and
have
selected
some
interesting
and
useful
readings
you
need
help
the
meaning
syntax
any
unix
shell
command
you
can
use
the
manual
man
pages
unix
system
see
below
the
web
unix
commands
just
keep
mind
that
some
commands
syntax
varies
bit
across
unix
flavors
when
doubt
check
the
man
page
the
system
you
using
unix
philosophy
their
book
program
design
the
unix
environment
rob
pike
and
brian
kernighan
put
this
way
much
the
power
the
unix
operating
system
comes
from
style
program
design
that
makes
programs
easy
use
and
more
important
easy
combine
with
other
programs
this
style
has
been
called
the
use
software
tools
and
depends
more
how
the
programs
fit
into
the
programming
environment
and
how
they
can
used
with
other
programs
than
how
they
are
designed
internally
this
style
was
based
the
use
tools
using
programs
separately
combination
get
job
done
rather
than
doing
hand
monolithic
self
sufficient
subsystems
special
purpose
one
time
programs
historical
note
unix
unix
was
developed
bell
labs
the
group
led
doug
mcilroy
this
the
unix
philosophy
write
programs
that
one
thing
and
well
write
programs
work
together
write
programs
handle
text
streams
because
that
universal
interface
doug
mcilroy
goals
plan
cover
the
following
topics
this
note
the
shell
the
file
system
the
shell
commands
switches
arguments
the
shell
the
unix
command
line
interpreter
provides
interface
between
the
user
and
the
kernel
and
executes
programs
called
commands
for
example
user
enters
then
the
shell
executes
the
command
which
actually
executes
program
stored
the
file
bin
the
shell
can
also
execute
other
programs
including
scripts
text
files
interpreted
program
like
python
bash
and
compiled
programs
written
even
your
own
programs
once
marked
executable
become
commands
you
can
run
from
the
shell
you
will
get
the
course
becoming
familiar
with
subset
the
unix
commands
don
let
yourself
overwhelmed
the
presence
hundreds
commands
you
will
probably
regularly
using
dozen
them
the
end
the
term
unix
has
often
been
criticized
for
being
very
terse
rumored
that
its
designers
were
bad
typists
many
commands
have
short
cryptic
names
and
vowels
are
rarity
awk
cat
chmod
echo
find
grep
sed
comm
will
learn
use
all
these
commands
and
more
unix
command
output
also
very
terse
the
default
action
success
silence
only
errors
are
reported
and
error
messages
are
often
terse
unix
commands
are
often
termed
tools
utilities
because
they
are
meant
simple
tools
that
you
can
combine
novel
ways
instructions
entered
response
the
shell
prompt
are
interpreted
first
the
shell
expanding
any
variable
references
filename
wildcards
special
syntax
thus
the
shell
can
rewrite
the
command
line
then
expects
the
command
line
have
the
following
syntax
command
arg
the
brackets
indicate
that
the
arguments
are
optional
and
the
notation
above
means
that
there
are
zero
more
arguments
arguments
are
separated
white
space
many
commands
can
executed
with
without
arguments
others
require
arguments
certain
number
arguments
sort
anothersort
work
correctly
none
are
supplied
they
will
provide
some
error
message
return
another
part
the
unix
philosophy
avoid
explosion
the
number
commands
having
most
commands
support
various
options
sometimes
called
flags
switches
which
modify
the
actions
the
commands
for
example
let
use
the
command
and
the
option
switch
list
long
format
the
file
filename
filename
switches
are
often
single
characters
preceded
hyphen
most
commands
accept
switches
any
order
though
they
generally
must
appear
before
all
the
real
arguments
usually
filenames
the
case
the
example
below
the
command
arguments
represent
file
directory
names
the
options
modify
the
operation
the
command
and
are
usually
operated
the
program
invoked
the
shell
rather
than
the
shell
itself
unix
programs
always
receive
list
arguments
containing
least
one
argument
which
always
the
command
name
itself
for
that
first
argument
would
the
first
argument
referred
argument
the
zero
argument
our
example
argument
and
argument
filename
some
commands
also
accept
their
switches
grouped
together
for
example
the
following
switches
are
identical
tla
foople
foople
the
shell
parses
the
words
tokens
command
name
and
arguments
you
type
the
command
line
and
asks
the
kernel
execute
the
program
corresponding
that
command
the
interpretation
the
arguments
switches
filenames
something
else
determined
that
program
typically
the
shell
processes
the
complete
line
after
carriage
return
entered
and
then
goes
off
find
the
program
that
the
command
line
specified
the
command
pathname
whether
relative
mycommand
absolute
bin
engs
mycommand
the
shell
simply
executes
the
program
that
file
the
command
not
pathname
the
shell
searches
through
list
directories
your
path
which
defined
the
shell
variable
called
path
shell
path
take
look
your
path
asking
the
shell
substitute
its
value
path
and
pass
argument
the
echo
command
engs
echo
path
usr
lib
bin
usr
lib
ccache
usr
local
bin
usr
bin
usr
local
sbin
usr
sbin
net
class
engs
bin
bin
usr
bin
sbin
usr
sbin
usr
java
sdk
bin
usr
local
bin
usr
local
bin
engs
note
that
general
the
output
from
the
commands
shown
this
note
demonstrate
notional
output
you
will
not
see
exactly
the
same
information
portrayed
you
execute
the
same
commands
shell
prompts
show
you
the
current
user
machine
and
location
engs
shell
prompt
for
user
engs
machine
with
the
shell
currently
the
users
home
directory
where
does
the
command
executed
above
reside
the
unix
directory
hierarchy
let
use
another
command
find
out
engs
which
aliased
usr
bin
bin
usr
bin
engs
the
first
line
response
says
that
aliased
this
shell
feature
the
shell
allows
define
aliases
which
act
just
like
commands
but
are
actually
just
textual
substitution
command
name
the
alias
some
other
string
this
case
thus
any
time
type
blah
blah
treats
had
typed
blah
blah
the
option
tells
add
trailing
symbol
some
names
its
output
adds
the
names
directories
the
names
symbolic
links
that
another
conversation
and
some
other
even
specialized
cases
course
the
shell
then
still
needs
resolve
then
searches
the
path
find
executable
file
with
that
name
this
case
appears
that
exists
both
usr
bin
and
bin
the
shell
will
execute
the
first
one
because
found
first
the
path
below
you
can
see
the
effect
running
the
alias
and
bin
the
raw
command
without
the
engs
archive
private
proc
log
public
html
resources
web
engs
bin
archive
private
proc
log
public
html
resources
web
engs
viewing
files
you
can
see
the
contents
any
file
with
the
cat
command
named
because
concatenates
all
the
files
listed
arguments
printing
one
after
the
other
for
very
long
files
though
the
output
will
quickly
scroll
off
your
terminal
less
more
the
less
and
more
commands
are
handy
for
quickly
looking
files
the
syntax
less
filename
and
more
filename
take
look
the
man
pages
get
the
details
each
similarly
head
and
tail
display
number
lines
selectable
via
switches
course
the
beginning
and
end
file
respectively
see
what
these
cat
etc
passwd
head
etc
passwd
tail
etc
passwd
more
etc
passwd
and
less
etc
passwd
the
file
etc
passwd
lists
all
the
accounts
the
system
and
information
about
each
account
editing
files
long
before
there
were
windows
and
graphical
displays
even
screens
there
were
text
editors
two
are
common
use
unix
system
today
emacs
and
actually
there
expanded
improved
version
called
vim
which
quite
popular
strongly
recommend
emacs
you
are
planning
take
engs
our
embedded
systems
course
since
the
xilinx
vivado
tool
chain
provides
emacs
mode
for
editing
also
you
will
find
that
many
emacs
commands
are
available
bash
for
working
the
command
line
you
should
try
both
and
become
comfortable
with
least
one
yes
tempting
use
external
graphical
editor
like
sublime
but
frequently
the
case
when
working
with
embedded
systems
and
servers
that
there
simply
not
graphical
user
interface
these
cases
you
must
use
text
only
editor
you
should
get
used
now
see
engs
resources
editors
for
some
resources
that
can
help
you
learn
emacs
vim
provided
min
learn
emacs
fast
video
help
unix
file
system
the
unix
file
system
hierarchical
file
system
the
file
system
consists
very
small
number
different
file
types
the
two
most
common
types
are
files
and
directories
directory
akin
folder
macos
windows
computer
contains
the
names
and
locations
all
files
and
directories
below
directory
always
contains
two
special
files
dot
and
dot
dot
represents
the
directory
itself
and
represents
the
directory
parent
the
following
make
new
directory
change
current
working
directory
that
new
directory
create
new
file
that
directory
and
use
explore
the
contents
the
new
directory
and
its
parent
engs
mkdir
test
engs
test
engs
test
echo
hello
somefile
engs
test
somefile
engs
test
somefile
engs
test
somefile
engs
test
archive
private
proc
log
public
html
resources
test
web
engs
test
directory
names
are
separated
forward
slash
forming
pathnames
pathname
filename
that
includes
some
all
the
directories
leading
the
file
absolute
pathname
relative
the
root
directory
and
begins
with
the
first
example
below
whereas
relative
pathname
relative
the
current
working
directory
the
second
example
below
notice
that
relative
pathname
can
also
use
the
third
example
below
engs
net
class
engs
public
html
labs
net
class
engs
public
html
labs
index
html
net
class
engs
public
html
labs
lab
preliminaries
html
net
class
engs
public
html
labs
usernames
txt
engs
public
html
resources
public
html
resources
dougmcilroy
pdf
public
html
resources
homebrew
png
public
html
resources
homebrew
png
public
html
resources
homebrew
html
public
html
resources
index
html
public
html
resources
programming
docx
public
html
resources
programming
pdf
public
html
resources
startingsublime
pdf
public
html
resources
toomey
unix
pdf
engs
public
html
azul
css
help
html
lab
oldindex
html
software
html
exams
indexbak
html
lectures
syllabus
html
exams
html
index
html
old
schedule
html
engs
implied
the
shell
prompt
the
current
working
directory
engs
which
shorthand
for
the
home
directory
user
engs
which
happens
the
directory
path
net
class
engs
moving
around
the
file
system
the
change
directory
command
allows
move
around
the
unix
directory
hierarchy
that
change
our
current
working
directory
from
which
all
relative
filenames
and
pathnames
will
resolved
let
combine
pwd
and
move
around
the
local
directories
that
are
rooted
net
class
engs
remember
that
refers
the
home
directory
and
refers
the
parent
directory
engs
mkdir
test
engs
test
engs
test
engs
test
engs
public
html
engs
public
html
css
labs
logistics
reading
schedule
pdf
index
html
notes
project
resources
schedule
xlsx
engs
public
html
resources
engs
public
html
resources
dougmcilroy
pdf
homebrew
html
programming
pdf
homebrew
png
index
html
startingsublime
pdf
homebrew
png
programming
docx
toomey
unix
pdf
engs
public
html
resources
engs
archive
private
proc
log
public
html
resources
test
web
engs
the
shell
prompt
helpfully
tracking
the
current
working
directory
move
listing
and
globbing
files
here
are
popular
set
switches
you
can
use
with
list
long
format
have
been
doing
list
all
entries
including
dot
files
which
are
normally
hidden
sort
modification
time
latest
first
list
reverse
order
alphabetical
time
list
the
directory
and
its
subdirectories
recursively
the
shell
also
interprets
certain
special
characters
like
and
matches
zero
more
characters
matches
one
character
and
matches
one
character
from
the
set
range
characters
listed
within
the
brackets
engs
public
html
resources
engs
public
html
resources
dougmcilroy
pdf
homebrew
html
programming
pdf
homebrew
png
index
html
startingsublime
pdf
homebrew
png
programming
docx
toomey
unix
pdf
engs
public
html
resources
pdf
dougmcilroy
pdf
startingsublime
pdf
programming
pdf
toomey
unix
pdf
engs
public
html
resources
homebrew
png
homebrew
png
homebrew
html
engs
public
html
resources
programming
docx
programming
pdf
toomey
unix
pdf
engs
public
html
resources
homebrew
homebrew
png
homebrew
png
homebrew
html
engs
public
html
resources
homebrew
homebrew
png
homebrew
png
engs
public
html
resources
homebrew
png
homebrew
png
homebrew
png
engs
public
html
resources
hidden
files
the
program
normally
does
not
list
any
files
whose
filename
begins
with
there
nothing
special
about
these
files
except
and
far
unix
concerned
simply
convention
files
whose
names
begin
with
are
considered
hidden
and
thus
not
listed
matched
with
the
shell
globbing
character
home
directories
particular
include
many
hidden
but
important
files
the
switch
tells
list
all
files
including
those
that
begin
with
dot
aka
the
hidden
files
engs
archive
private
public
html
resources
web
engs
archive
bash
logout
bashrc
environset
private
public
html
ssh
viminfo
web
bash
history
bash
profile
emacs
forward
procmailrc
resources
vim
vimrc
see
just
the
dot
files
let
get
clever
with
the
shell
glob
characters
engs
bash
history
bash
profile
emacs
forward
ssh
viminfo
bash
logout
bashrc
environset
procmailrc
vim
vimrc
engs
all
these
dot
files
dot
directories
are
important
one
program
another
bash
history
used
bash
record
history
the
commands
you
typed
bash
logout
executed
bash
when
you
log
out
bash
profile
executed
bash
when
you
log
bashrc
executed
bash
whenever
you
start
new
shell
emacs
directory
used
emacs
text
editor
environset
dartmouth
specific
thing
read
bashrc
forward
tells
mail
where
forwad
your
email
procmailrc
for
handling
email
with
procmail
ssh
directory
used
inbound
ssh
connections
vim
directory
used
vim
text
editor
viminfo
used
vim
text
editor
vimrc
used
vim
text
editor
bash
shell
startup
files
the
bash
shell
looks
for
several
files
your
home
directory
bash
profile
executed
bash
when
you
log
bashrc
executed
bash
whenever
you
start
new
shell
bash
logout
executed
bash
when
you
log
out
bash
history
used
bash
record
history
the
commands
you
typed
the
bashrc
file
especially
important
because
bash
reads
every
time
you
start
new
bash
shell
that
when
you
log
when
you
start
new
interactive
shell
when
you
run
new
bash
script
contrast
bash
profile
only
read
when
you
login
each
case
bash
reads
the
files
and
executes
the
commands
therein
thus
you
can
configure
your
bash
experience
having
declare
some
variables
define
some
aliases
and
set
some
personal
favorites
locating
files
many
times
you
want
find
file
but
not
know
where
the
directory
tree
unix
directory
structure
tree
rooted
the
directory
the
find
command
can
walk
file
hierarchy
engs
find
name
dougmcilroy
pdf
print
public
html
resources
dougmcilroy
pdf
engs
find
public
html
iname
reading
print
public
html
reading
engs
find
public
html
type
print
public
html
public
html
logistics
public
html
resources
public
html
labs
public
html
project
public
html
notes
public
html
css
public
html
reading
engs
find
public
html
name
html
print
public
html
logistics
index
html
public
html
resources
index
html
public
html
resources
homebrew
html
public
html
labs
index
html
public
html
labs
lab
preliminaries
html
public
html
project
index
html
public
html
notes
gettingstarted
html
public
html
notes
index
html
public
html
index
html
public
html
reading
index
html
engs
find
public
html
name
png
mtime
print
public
html
resources
homebrew
png
public
html
resources
homebrew
png
engs
the
first
example
searches
directory
find
file
specific
name
and
prints
its
pathname
the
second
example
used
iname
case
insensitive
search
instead
name
which
case
sensitive
search
public
html
for
the
reading
directory
the
third
example
searches
public
html
for
any
directories
type
and
prints
their
pathnames
the
fourth
example
uses
wildcard
print
pathnames
files
whose
name
matches
pattern
the
backslash
there
prevent
the
shell
from
interpreting
the
allowing
part
the
argument
find
which
interprets
that
character
itself
the
fifth
example
combines
two
factors
print
pathnames
files
whose
name
matches
png
and
whose
modication
time
mtime
less
than
one
day
the
past
our
top
commands
explored
almost
four
dozen
shell
commands
below
those
with
asterisk
will
introduced
later
you
often
need
only
about
half
them
alias
cat
chmod
comm
cut
date
echo
emacs
expr
exit
file
find
gcc
gdb
git
grep
head
less
logout
lpr
make
man
mkdir
more
open
macos
pbpaste
pbcopy
macos
pwd
rmdir
scp
sed
sort
ssh
tail
tar
touch
uniq
whereis
which
vim
historical
note
recall
mentioned
teletypes
the
first
lecture
was
dartmouth
that
teletype
was
actually
used
interact
with
remote
computer
the
first
ever
long
distance
terminal
decades
before
the
internet
navigating
within
man
pages
you
may
have
found
the
man
system
little
challenging
navigate
there
message
that
displayed
the
very
bottom
the
screen
when
you
first
enter
the
command
that
you
might
have
missed
most
people
manual
page
xxx
line
press
for
help
quit
you
enter
see
the
help
you
will
find
many
more
commands
than
you
likely
ever
use
when
reading
man
pages
this
because
the
man
page
reader
actually
the
less
command
unix
tend
use
only
few
space
the
spacebar
advances
the
next
screenful
goes
back
the
previous
screenful
down
arrow
advances
one
more
line
arrow
goes
back
one
line
allows
one
type
search
phrase
and
hit
return
quits
man
and
returns
the
shell
prompt
there
are
shells
shells
and
more
shells
there
are
number
shells
available
unix
user
which
one
you
select
the
most
common
shells
are
the
original
shell
known
the
bourne
shell
csh
tcsh
well
known
and
widely
used
derivatives
the
bourne
shell
ksh
the
korn
shell
and
bash
the
bourne
again
shell
developed
gnu
the
most
popular
shell
used
for
linux
bash
the
default
shell
for
new
unix
accounts
our
department
the
basic
shell
operation
follows
the
shell
parses
the
command
line
the
first
word
the
line
the
command
name
the
command
alias
substitutes
the
alias
text
and
again
identifies
the
command
the
command
one
built
the
shell
there
are
few
like
echo
pwd
and
which
performs
that
command
action
otherwise
the
shell
looks
for
the
executable
file
that
matches
that
program
name
searching
directories
listed
the
path
variable
the
shell
then
starts
that
program
new
process
and
passes
any
options
and
arguments
the
program
process
running
program
you
can
see
list
your
processes
with
the
command
file
type
unix
itself
imposes
almost
constraints
interpretation
the
contents
files
the
only
common
case
that
compiled
executable
program
has
very
specific
binary
format
for
the
operating
system
unix
execute
all
other
files
are
used
some
program
another
and
those
programs
interpret
the
contents
they
see
fit
the
great
power
unix
and
the
common
shell
commands
that
any
file
can
read
any
program
the
most
common
format
are
plain
text
ascii
files
that
are
formatted
series
lines
delimited
newline
characters
known
its
ascii
code
you
are
unsure
about
the
contents
file
text
binary
compressed
unix
executabe
some
format
specific
certain
application
etc
the
file
command
useful
makes
attempt
judge
the
format
the
file
engs
file
downloaded
downloaded
posix
tar
archive
engs
file
fig
fig
gif
image
data
version
engs
file
trash
tar
trash
tar
gzip
compressed
data
from
unix
engs
file
public
html
schedule
public
html
schedule
pdf
pdf
document
version
public
html
schedule
xlsx
microsoft
excel
engs
file
bin
bin
elf
bit
lsb
shared
object
version
sysv
dynamically
linked
interpreter
lib
linux
for
gnu
linux
buildid
sha
cdbf
stripped
engs
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
more
about
bash
engs
labs
notes
reading
resources
examples
more
about
bash
don
forget
this
week
reading
this
lecture
continue
our
discussion
the
unix
shell
and
its
commands
goals
plan
learn
the
following
today
redirection
and
pipes
special
characters
and
quoting
standard
input
output
and
error
this
activity
today
class
sit
with
your
group
and
get
know
your
group
mates
experiment
with
shell
pipelines
this
activity
class
scripts
recorded
terminal
windows
from
flume
and
mac
redirection
and
pipes
date
have
seen
unix
programs
using
default
input
and
output
called
standard
input
stdin
and
standard
output
stdout
the
keyboard
the
standard
input
and
the
display
the
standard
output
the
unix
shell
able
redirect
both
the
input
and
output
programs
example
output
redirection
consider
the
following
engs
date
listing
engs
public
html
listing
the
output
redirection
writes
the
output
date
the
file
called
listing
that
the
standard
output
the
date
process
has
been
directed
the
file
instead
the
default
the
display
note
that
the
operation
created
file
that
did
not
exist
before
the
output
redirection
command
was
executed
next
append
recursive
long
format
directory
listing
the
same
file
using
the
double
tell
the
shell
append
the
file
rather
than
overwriting
the
file
note
that
the
and
their
target
filenames
are
not
arguments
the
command
the
command
simply
writes
stdout
always
does
but
the
shell
has
arranged
for
stdout
directed
file
instead
the
terminal
the
shell
also
supports
input
redirection
this
provides
input
program
rather
than
the
keyboard
let
create
file
prime
numbers
using
output
redirection
the
input
the
cat
command
can
come
from
the
standard
input
the
keyboard
can
instruct
the
shell
redirect
the
cat
command
output
stdout
file
named
primes
the
numbers
are
input
the
keyboard
and
ctrl
used
signal
the
end
the
file
eof
engs
cat
primes
engs
input
redirection
tells
the
shell
use
file
input
the
command
rather
than
the
keyboard
the
input
redirection
example
below
primes
used
input
cat
which
sends
its
standard
output
the
screen
engs
cat
primes
engs
many
unix
commands
cat
sort
allow
you
provide
input
from
stdin
you
not
specify
file
the
command
line
for
example
you
type
cat
carriage
return
then
the
command
expects
input
from
the
standard
input
unix
also
supports
powerful
pipe
operator
for
passing
data
between
commands
using
the
operator
vertical
bar
usually
located
above
the
key
your
keyboard
pipes
connect
commands
that
run
separate
processes
data
becomes
available
the
processes
are
scheduled
pipes
were
invented
doug
mcilroy
while
was
working
with
ken
thompson
and
dennis
ritchie
amp
bell
labs
mentioned
earlier
doug
has
been
adjunct
professor
here
dartmouth
college
for
several
years
now
this
two
page
interview
the
middle
the
third
column
doug
tells
how
pipes
were
invented
and
the
character
selected
the
operator
pay
special
attention
the
next
paragraph
the
dartmouth
time
sharing
system
had
something
similar
even
earlier
pipes
are
clever
invention
indeed
since
the
need
for
separate
temporary
files
for
sharing
data
between
processes
not
required
because
commands
are
implemented
processes
program
reading
empty
pipe
will
suspended
until
there
data
information
ready
for
read
there
limit
the
number
programs
commands
the
pipeline
our
example
below
there
are
four
programs
the
pipeline
all
running
simultaneously
waiting
the
input
engs
sort
primes
uniq
grep
more
engs
what
the
difference
between
pipes
and
redirection
basically
redirection
used
direct
the
stdout
command
file
from
file
the
stdin
command
pipes
are
used
redirect
the
stdout
the
stdin
another
command
this
operator
allows
glue
together
programs
filters
process
the
plain
text
sent
between
them
plain
text
between
the
processes
nice
design
decision
this
supports
the
notion
reuse
and
allows
build
sophisticated
programs
quickly
and
simply
another
cool
feature
unix
notice
three
new
commands
above
sort
uniq
and
grep
sort
reads
lines
from
from
stdin
and
outputs
the
lines
sorted
order
here
tells
sort
use
numeric
order
rather
than
alphabetical
order
uniq
removes
duplicates
printing
only
one
run
identical
lines
grep
prints
lines
matching
pattern
more
generally
regular
expression
here
inverts
this
behavior
print
lines
that
not
match
the
pattern
this
case
the
pattern
simply
and
grep
does
not
print
that
number
comes
through
and
saw
last
time
more
pauses
the
output
when
would
scroll
off
the
screen
note
that
the
original
file
primes
not
changed
executing
the
command
line
above
rather
the
file
read
the
sort
command
and
the
data
manipulated
processed
each
stage
the
command
pipe
line
because
sort
and
cat
are
happy
read
its
input
data
from
stdin
from
file
given
argument
the
following
pipelines
all
achieve
the
same
result
engs
sort
primes
uniq
grep
more
engs
cat
primes
sort
uniq
grep
more
engs
cat
primes
sort
uniq
grep
more
which
you
think
would
most
efficient
another
pipeline
how
did
create
that
list
existing
usernames
for
lab
engs
cut
etc
passwd
sort
usernames
txt
see
man
cut
understand
what
the
first
command
does
another
example
what
the
most
popular
shell
try
each
these
turn
engs
cut
etc
passwd
engs
cut
etc
passwd
less
engs
cut
etc
passwd
sort
engs
cut
etc
passwd
sort
uniq
engs
cut
etc
passwd
sort
uniq
sort
engs
cut
etc
passwd
sort
uniq
sort
macos
tip
there
are
three
great
commands
you
should
know
they
are
not
linux
because
they
interact
with
macos
open
pbpaste
pbcopy
you
already
seen
the
open
command
which
macos
the
terminal
command
line
will
open
file
for
viewing
the
relevant
macos
application
for
example
for
photo
file
you
might
type
open
photo
jpg
and
see
preview
launch
and
open
that
file
for
html
file
you
might
type
open
index
html
and
see
safari
launch
and
render
that
page
the
commands
pbpaste
and
pbcopy
are
great
fit
into
many
pipelines
the
first
command
prints
the
macos
clipboard
its
standard
output
and
the
second
copies
its
standard
input
into
the
macos
clipboard
for
example
select
some
text
window
somewhere
then
cmd
copy
the
clipboard
then
pbpaste
count
the
lines
words
and
characters
the
clipboard
pbcopy
saves
the
directory
listing
the
clipboard
where
you
might
paste
into
piazza
email
message
some
document
not
certain
you
can
combine
pbpaste
and
pbcopy
the
same
command
line
however
you
wanted
replace
the
clipboard
with
its
number
lines
you
might
try
pbpaste
pbcopy
but
careful
mixing
those
two
commands
standard
input
output
and
error
learned
above
every
process
running
program
has
standard
input
abbreviated
stdin
and
standard
output
stdout
the
shell
sets
stdin
the
keyboard
default
but
the
command
line
can
tell
the
shell
redirect
stdin
using
pipe
the
shell
sets
stdout
the
display
default
but
the
command
line
can
tell
the
shell
redirect
stdout
using
pipe
each
process
also
has
standard
error
stderr
which
most
programs
use
for
printing
error
messages
the
separation
stdout
and
stderr
important
when
stdin
redirected
file
pipe
because
normal
output
can
flow
into
the
file
pipe
while
error
messages
reach
the
user
the
screen
inside
the
running
process
these
three
streams
are
represented
with
numeric
file
descriptors
stdin
stdout
stderr
you
can
tell
the
shell
redirect
using
these
numbers
shorthand
for
and
shorthand
for
you
can
thus
redirect
the
standard
error
file
descriptor
with
the
symbol
suppose
was
logged
dfk
and
wanted
make
list
the
web
files
index
html
anywhere
the
account
home
directory
tree
engs
find
name
index
html
pages
find
net
class
archive
src
permission
denied
find
net
class
emacs
permission
denied
find
net
class
private
permission
denied
engs
redirected
the
output
find
file
called
pages
and
indeed
that
file
filled
with
useful
information
but
find
printed
its
error
messages
the
screen
could
still
see
them
suppose
wanted
capture
those
errors
file
too
engs
find
name
index
html
pages
errors
engs
the
file
errors
contains
the
error
messages
saw
earlier
another
alternative
could
ignore
the
error
output
entirely
sending
place
where
all
characters
and
never
return
engs
find
name
index
html
pages
dev
null
engs
the
file
called
dev
null
special
kind
file
not
file
all
actually
device
that
simply
discards
anything
written
you
read
from
appears
empty
file
special
characters
there
are
number
special
characters
interpreted
the
shell
spaces
tabs
wildcard
globbing
characters
for
filename
expansion
redirection
symbols
and
forth
special
characters
have
special
meaning
and
cannot
used
regular
characters
because
the
shell
interprets
them
special
manner
these
special
characters
include
amp
have
already
used
several
these
special
characters
don
try
memorize
them
this
stage
through
use
they
will
become
second
nature
will
just
give
some
examples
the
ones
have
not
discussed
far
quoting
you
need
use
one
these
special
characters
regular
character
you
can
tell
the
shell
not
interpret
escaping
quoting
escape
single
special
character
precede
with
backslash
earlier
saw
how
escape
the
character
with
escape
multiple
special
characters
quote
each
you
can
also
quote
using
single
quotation
marks
such
double
quotation
marks
such
but
these
have
subtlety
different
behavior
you
might
use
this
form
when
quoting
filename
with
embedded
spaces
homework
assignment
you
will
often
need
pass
special
characters
part
arguments
commands
and
other
programs
for
example
argument
that
represents
pattern
interpreted
the
command
happens
often
with
find
and
grep
there
situation
where
single
quotes
work
differently
than
double
quotes
you
use
pair
single
quotes
around
shell
variable
substitution
like
user
the
variable
value
will
not
substituted
whereas
would
substituted
within
double
quotes
engs
echo
logname
uses
the
shell
shell
and
his
home
directory
home
uses
the
bin
bash
shell
and
his
home
directory
net
class
engs
echo
logname
uses
the
shell
shell
and
his
home
directory
home
logname
uses
the
shell
shell
and
his
home
directory
home
engs
example
double
quotes
are
especially
important
shell
scripts
because
the
variables
involved
might
have
been
user
input
command
line
argument
keyboard
input
might
have
file
name
output
command
such
variables
should
always
quoted
when
substituted
because
spaces
and
other
special
characters
embedded
the
value
the
variable
can
cause
confusion
thus
directoryname
homework
three
mkdir
directoryname
mkdir
directoryname
try
example
escapes
and
quoting
can
pass
special
characters
and
patterns
passed
commands
suppose
have
list
email
addresses
one
per
line
eric
chen
eric
chen
dartmouth
edu
rui
liu
rui
liu
dartmouth
edu
taylor
hardin
taylor
hardin
dartmouth
edu
elena
horton
elena
horton
dartmouth
edu
jinnan
jinnan
dartmouth
edu
mauricio
esquivel
rogel
mauricio
esquivel
rogel
dartmouth
edu
james
edwards
james
edwards
dartmouth
edu
emily
lin
emily
lin
dartmouth
edu
john
cardwell
john
cardwell
dartmouth
edu
john
kotz
john
kotz
dartmouth
edu
joel
katticaran
joel
katticaran
dartmouth
edu
kaya
thomas
kaya
thomas
dartmouth
edu
trevor
davis
trevor
davis
dartmouth
edu
thomas
kim
thomas
kim
dartmouth
edu
kyle
dotterrer
kyle
dotterrer
dartmouth
edu
some
email
programs
websites
require
these
comma
separated
have
the
above
text
clipboard
can
change
those
newline
characters
commas
pbpaste
eric
chen
eric
chen
dartmouth
edu
rui
liu
rui
liu
dartmouth
edu
taylor
hardin
taylor
hardin
dartmouth
edu
elena
horton
elena
horton
dartmouth
edu
jinnan
jinnan
dartmouth
edu
mauricio
esquivel
rogel
mauricio
esquivel
rogel
dartmouth
edu
james
edwards
james
edwards
dartmouth
edu
emily
lin
emily
lin
dartmouth
edu
john
cardwell
john
cardwell
dartmouth
edu
john
kotz
john
kotz
dartmouth
edu
joel
katticaran
joel
katticaran
dartmouth
edu
kaya
thomas
kaya
thomas
dartmouth
edu
trevor
davis
trevor
davis
dartmouth
edu
thomas
kim
thomas
kim
dartmouth
edu
kyle
dotterrer
kyle
dotterrer
dartmouth
edu
unix
single
special
character
called
newline
what
defines
the
end
one
line
and
the
beginning
the
next
common
syntax
for
the
newline
character
programming
languages
but
the
special
bash
need
escape
with
thus
have
the
command
filters
stdin
stdout
translates
each
instance
the
character
given
the
first
argument
the
character
given
the
second
argument
here
spit
out
the
translated
input
one
very
long
line
that
does
not
end
with
newline
can
then
copy
paste
that
result
into
the
pesky
web
browser
outlook
and
microsoft
tools
want
semicolons
not
commas
sigh
but
the
semicolon
also
special
bash
must
escape
too
macos
can
connect
the
macos
clipboard
this
tool
follows
pbpaste
pbcopy
great
copy
the
list
addresses
the
clipboard
type
that
command
the
shell
and
now
the
clipboard
contains
semicolon
separated
list
addresses
example
even
more
powerful
filtering
tool
the
stream
editor
called
sed
allows
you
transform
occurrences
one
more
patterns
the
input
file
sed
pattern
file
for
example
engs
cat
forward
david
kotz
kotz
eric
chen
eric
chen
dartmouth
edu
rui
liu
rui
liu
dartmouth
edu
taylor
hardin
taylor
hardin
dartmouth
edu
elena
horton
elena
horton
dartmouth
edu
jinnan
jinnan
dartmouth
edu
mauricio
esquivel
rogel
mauricio
esquivel
rogel
dartmouth
edu
james
edwards
james
edwards
dartmouth
edu
emily
lin
emily
lin
dartmouth
edu
john
cardwell
john
cardwell
dartmouth
edu
john
kotz
john
kotz
dartmouth
edu
joel
katticaran
joel
katticaran
dartmouth
edu
kaya
thomas
kaya
thomas
dartmouth
edu
trevor
davis
trevor
davis
dartmouth
edu
thomas
kim
thomas
kim
dartmouth
edu
kyle
dotterrer
kyle
dotterrer
dartmouth
edu
engs
remove
myself
and
excess
white
space
engs
sed
kotz
forward
eric
chen
eric
chen
dartmouth
edu
rui
liu
rui
liu
dartmouth
edu
taylor
hardin
taylor
hardin
dartmouth
edu
elena
horton
elena
horton
dartmouth
edu
jinnan
jinnan
dartmouth
edu
mauricio
esquivel
rogel
mauricio
esquivel
rogel
dartmouth
edu
james
edwards
james
edwards
dartmouth
edu
emily
lin
emily
lin
dartmouth
edu
john
cardwell
john
cardwell
dartmouth
edu
john
kotz
john
kotz
dartmouth
edu
joel
katticaran
joel
katticaran
dartmouth
edu
kaya
thomas
kaya
thomas
dartmouth
edu
trevor
davis
trevor
davis
dartmouth
edu
thomas
kim
thomas
kim
dartmouth
edu
kyle
dotterrer
kyle
dotterrer
dartmouth
edu
engs
remove
myself
remove
names
make
comma
sep
list
addresses
engs
sed
kotz
forward
eric
chen
dartmouth
edu
rui
liu
dartmouth
edu
taylor
hardin
dartmouth
edu
elena
horton
dartmouth
edu
jinnan
dartmouth
edu
mauricio
esquivel
rogel
dartmouth
edu
james
edwards
dartmouth
edu
emily
lin
dartmouth
edu
john
cardwell
dartmouth
edu
john
kotz
dartmouth
edu
joel
katticaran
dartmouth
edu
kaya
thomas
dartmouth
edu
trevor
davis
dartmouth
edu
thomas
kim
dartmouth
edu
kyle
dotterrer
dartmouth
edu
engs
the
above
uses
the
switch
sed
which
allows
one
list
more
than
one
pattern
the
same
command
few
quick
notes
about
sed
patterns
deletes
lines
matching
the
pattern
prints
lines
matching
the
pattern
useful
with
substitutes
text
for
matches
the
pattern
patterns
are
actually
regular
expressions
use
some
above
example
saved
list
students
enrolled
the
file
demo
students
txt
each
line
the
form
first
last
dartmouth
edu
let
suppose
you
all
decide
move
harvard
engs
sed
dartmouth
harvard
demo
students
txt
engs
sed
dartmouth
harvard
demo
students
txt
the
second
form
removes
the
dot
and
two
digit
class
number
and
the
trailing
semicolon
notice
how
quoted
those
patterns
from
the
shell
and
even
escaped
the
dot
from
sed
normal
meaning
dot
matches
any
character
sed
would
look
for
literal
dot
that
position
the
dollar
constrains
the
semicolon
match
happen
the
end
the
line
here
another
fun
pipe
count
the
number
students
from
each
class
leveraging
the
class
numbers
email
addresses
engs
demo
students
txt
sed
other
sort
uniq
sort
other
engs
see
man
sed
the
sed
faq
for
more
info
you
want
learn
bit
about
regular
expressions
which
are
used
describe
patterns
sed
commands
see
sed
regexp
info
compressing
and
archiving
files
often
useful
bundle
several
files
into
compressed
archive
file
you
may
have
encountered
files
like
this
the
internet
such
files
zip
something
tar
somethin
else
tgz
each
packs
together
several
files
including
directories
creation
dates
access
permissions
well
file
contents
into
one
single
file
this
convenient
way
transfer
large
collections
files
unix
most
common
use
the
tar
utility
short
for
tape
archive
from
back
when
used
tapes
create
archive
all
the
files
and
directories
listed
the
arguments
and
name
something
appropriate
often
ask
tar
compress
the
resulting
archive
too
given
directory
stuff
you
can
create
compressed
tar
archive
aka
tarball
and
then
list
its
contents
the
refers
file
and
the
refers
compression
engs
mkdir
stuff
engs
echo
stuff
engs
tar
cfz
stuff
tgz
stuff
engs
tar
tfz
stuff
tgz
stuff
stuff
engs
the
command
leaves
the
original
directory
and
files
intact
notice
that
tar
has
unconventional
syntax
for
its
switches
there
dash
before
them
unpack
the
archive
engs
tar
xfz
stuff
tgz
short
for
create
for
type
list
for
extract
the
implies
that
the
next
argument
the
tarball
file
name
the
indicates
that
the
tarball
should
compressed
convention
tarball
filename
ends
tar
not
compressed
tgz
compressed
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
introduction
bash
programming
engs
labs
notes
reading
resources
examples
introduction
bash
programming
take
time
for
this
week
reading
short
important
and
useful
are
now
familiar
with
the
shell
and
few
commands
this
lecture
discuss
shell
programming
using
bash
the
main
goal
write
your
own
scripts
but
what
are
scripts
and
what
are
they
useful
for
goals
learn
the
following
today
understanding
shell
script
syntax
and
constructs
writing
simple
interactive
scripts
writing
and
executing
your
first
shell
script
understanding
more
advanced
constructs
through
examples
class
scripts
recorded
terminal
windows
today
mac
and
flume
interactive
mode
and
shell
scripts
the
shell
can
used
two
different
ways
interactive
mode
which
allows
you
enter
more
than
one
command
interactively
the
shell
have
been
doing
this
already
however
interactive
mode
allows
you
enter
series
commands
and
shell
scripts
which
the
shell
reads
commands
series
commands
complex
programs
from
text
file
the
interactive
mode
fine
for
entering
handful
commands
but
becomes
cumbersome
for
the
user
keep
entering
these
commands
interactively
better
store
the
commands
text
file
called
shell
script
script
for
short
and
execute
the
script
when
needed
this
way
the
script
preserved
you
and
other
users
can
use
again
addition
calling
unix
commands
grep
shell
scripts
can
also
invoke
compiled
programs
programs
and
other
shell
scripts
shell
programming
also
includes
control
flow
commands
test
conditions
then
task
repeatedly
for
these
control
structure
commands
found
many
other
languages
such
other
scripting
languages
like
python
allow
the
programmer
quickly
write
fairly
sophisticated
shell
programs
number
different
tasks
like
python
and
unlike
java
shell
scripts
are
not
compiled
rather
they
are
interpreted
and
executed
the
shell
itself
shell
scripts
are
used
for
many
reasons
building
and
configuring
systems
environments
prototyping
code
array
repetitive
tasks
that
programmers
shell
programming
mainly
built
the
unix
shell
commands
and
utilities
reuse
these
existing
programs
enables
programmers
simply
build
new
programs
tackle
fairly
complex
jobs
separating
groups
commands
using
let
start
build
our
knowledge
how
scripts
work
first
looking
some
basic
operations
the
shell
the
unix
shell
allows
for
the
unconditional
execution
commands
and
allows
for
related
commands
kept
adjacent
command
sequence
using
the
semicolon
character
shown
below
flume
echo
directory
listing
date
directory
listing
fri
apr
edt
archive
primes
private
public
html
resources
students
web
ziplab
flume
exit
status
who
cares
when
using
the
shell
interactively
often
clear
when
have
made
mistake
the
shell
warns
about
incorrect
syntax
and
complains
about
invalid
switches
missing
files
these
warnings
and
complaints
can
come
from
the
shell
parser
and
from
the
program
being
run
for
example
from
error
messages
provide
visual
clues
that
something
wrong
allowing
adjust
the
command
get
right
commands
also
inform
the
shell
explicitly
whether
the
command
has
terminated
successfully
unsuccessfully
due
some
error
commands
this
returning
exit
status
which
represented
integer
value
made
available
the
shell
and
other
commands
programs
and
scripts
the
shell
understands
exit
status
indicate
successful
execution
and
any
other
value
always
positive
indicate
failure
some
sort
the
shell
environment
value
updated
each
time
command
exits
what
mean
that
flume
echo
april
fool
april
fool
flume
echo
flume
april
fool
cannot
access
april
such
file
directory
cannot
access
fool
such
file
directory
flume
echo
flume
conditional
sequences
basic
constructs
why
need
use
the
exit
status
often
want
execute
command
based
the
success
failure
earlier
command
for
example
may
only
wish
remove
files
are
the
correct
directory
perhaps
want
careful
only
append
info
file
know
already
exists
the
shell
provides
both
conjunction
and
and
disjunction
based
previous
commands
these
are
useful
constructs
for
writing
decision
making
scripts
take
look
the
example
below
which
make
three
directories
then
try
remove
the
first
flume
mkdir
labs
amp
amp
mkdir
labs
lab
labs
labs
flume
rmdir
labs
echo
whoops
rmdir
failed
remove
labs
directory
not
empty
whoops
flume
the
first
example
amp
amp
without
any
spaces
specifies
that
the
second
command
should
only
executed
the
first
command
succeeds
with
exit
status
only
make
the
subdirectories
can
make
the
top
directory
the
second
example
without
any
spaces
requests
that
the
second
command
only
executed
the
first
command
failed
with
exit
status
other
than
conditional
execution
using
then
else
there
are
many
situations
when
need
execute
commands
based
the
outcome
earlier
command
command
then
command
command
here
command
and
command
and
any
other
commands
that
might
input
will
executed
and
only
command
returns
successful
true
value
its
exit
status
the
fact
that
means
true
confusing
for
many
people
many
high
level
languages
like
zero
means
false
and
non
zero
means
true
technology
isn
always
consistent
the
reason
unix
uses
for
success
that
there
only
one
but
there
are
many
non
zero
numbers
thus
implies
all
well
whereas
non
zero
implies
something
went
wrong
and
the
specific
non
zero
value
can
convey
information
about
what
went
wrong
similarly
may
have
commands
execute
the
conditional
fails
command
then
command
command
else
command
command
here
command
and
command
will
executed
and
only
command
fails
first
interactive
shell
program
entering
interactive
scripts
that
tiny
sequence
commands
typed
the
keyboard
interactive
shell
easy
way
get
the
sense
new
scripting
language
try
out
set
commands
during
interactive
session
the
shell
simply
allows
you
enter
one
command
interactive
program
the
command
line
and
then
executes
flume
students
students
bak
then
echo
copy
succeeded
else
echo
copy
failed
copy
succeeded
flume
the
character
the
secondary
prompt
issued
the
shell
indicating
that
more
input
expected
the
exit
status
the
command
used
the
shell
decide
whether
execute
the
then
clause
the
else
clause
just
for
yucks
had
echo
show
the
exit
status
the
above
example
confirms
that
status
means
true
and
triggered
the
then
clause
can
invert
the
conditional
test
preceding
with
many
programming
languages
flume
students
students
bak
then
echo
copy
failed
flume
astute
readers
might
note
that
did
not
quote
escape
the
the
echo
commands
noticed
that
the
not
special
comes
last
which
handy
for
writing
interjections
the
command
can
actually
sequence
pipeline
the
exit
status
the
last
command
used
determine
the
conditional
outcome
flume
mkdir
backup
amp
amp
students
backup
students
then
echo
backup
success
else
echo
backup
failed
backup
success
flume
the
above
example
then
was
the
next
line
instead
the
end
the
line
that
stylistic
choice
you
want
the
line
you
simply
need
put
semicolon
after
the
condition
and
before
the
word
then
seen
the
earlier
examples
the
test
aka
command
the
command
providing
the
exit
status
need
not
external
command
can
test
for
several
conditions
using
the
built
test
interchangeably
the
command
use
both
below
but
recommend
you
use
the
version
the
test
command
because
more
readable
and
more
commonly
used
suppose
want
backup
students
only
exists
the
switch
tests
whether
the
following
filename
names
existing
file
flume
test
students
then
mkdir
backup
amp
amp
students
backup
students
echo
backup
failed
flume
rewritten
with
flume
students
then
mkdir
backup
amp
amp
students
backup
students
echo
backup
failed
flume
more
commonly
the
and
then
are
written
the
same
line
using
semicolon
flume
students
then
mkdir
backup
amp
amp
students
backup
students
echo
backup
failed
flume
note
important
that
you
leave
spaces
around
the
brackets
you
will
get
syntax
errors
there
are
other
options
that
can
used
with
the
command
option
meaning
does
the
file
exist
does
the
directory
exist
does
the
file
exist
and
ordinary
file
not
directory
does
the
file
exist
and
readable
does
the
file
exist
and
have
size
greater
than
bytes
does
the
file
exist
and
writeable
does
the
file
exist
and
executable
learn
even
more
about
the
test
command
man
test
loops
for
lists
many
commands
accept
list
files
the
command
line
and
perform
actions
each
file
turn
however
what
need
perform
sequence
commands
each
file
the
list
files
some
commands
can
only
handle
one
file
argument
per
invocation
need
invoke
the
command
many
times
the
shell
supports
simple
iteration
over
lists
values
typically
over
lists
filenames
the
following
example
make
back
copy
each
our
files
appending
the
bak
extension
again
this
extension
just
naming
convention
unix
doesn
care
nor
does
the
shell
flume
example
hash
hash
date
makefile
output
data
queue
readme
sort
flume
example
for
echo
back
bak
done
back
hash
back
queue
back
sort
flume
example
hash
hash
date
output
data
queue
bak
sort
hash
bak
makefile
queue
readme
sort
bak
flume
example
notice
that
the
variable
instantiated
one
time
with
the
value
each
argument
the
list
provided
after
and
that
value
substituted
wherever
occurs
should
more
defensive
though
case
one
the
filenames
has
space
inside
flume
example
for
echo
back
bak
done
back
hash
back
queue
back
sort
flume
example
expected
may
place
many
commands
want
inside
the
body
loop
can
use
any
combination
other
else
tests
and
nested
loops
just
like
traditional
languages
such
are
not
limited
use
names
files
generated
filename
expansion
our
list
flume
for
house
allen
east
wheelock
north
park
school
south
west
llc
echo
house
the
best
house
done
allen
the
best
house
east
wheelock
the
best
house
north
park
the
best
house
school
the
best
house
south
the
best
house
west
the
best
house
llc
the
best
house
flume
can
use
the
contents
file
provide
the
list
used
for
flume
cat
lflist
john
kotz
dartmouth
edu
joel
katticaran
dartmouth
edu
kaya
thomas
dartmouth
edu
trevor
davis
dartmouth
edu
thomas
kim
dartmouth
edu
kyle
dotterrer
dartmouth
edu
flume
for
lflist
echo
hello
done
hello
john
kotz
dartmouth
edu
hello
joel
katticaran
dartmouth
edu
hello
kaya
thomas
dartmouth
edu
hello
trevor
davis
dartmouth
edu
hello
thomas
kim
dartmouth
edu
hello
kyle
dotterrer
dartmouth
edu
flume
notice
the
special
shell
syntax
filename
which
means
substitute
the
contents
filename
any
spaces
newlines
the
file
will
cause
the
shell
delineate
words
that
become
arguments
for
the
example
also
demonstrates
how
one
can
use
semicolons
write
simple
loop
all
one
line
fact
you
type
multi
line
for
statement
then
execute
and
later
use
arrow
ctrl
have
the
shell
retrieve
your
earlier
command
you
see
that
formats
this
way
can
even
use
the
output
command
provide
the
list
used
for
flume
for
sed
lflist
sort
echo
hello
done
hello
john
hello
kaya
hello
thomas
hello
joel
hello
kyle
hello
trevor
flume
indeed
this
case
used
pipeline
two
commands
produce
the
list
arguments
for
you
may
see
old
scripts
old
people
using
the
old
fashioned
syntax
which
the
command
surrounded
back
quotes
command
instead
command
the
latter
arguably
more
readable
and
sometimes
nestable
first
shell
script
until
now
have
entered
scripts
interactively
into
the
shell
pain
have
keep
entering
scripts
interactively
better
store
the
script
commands
text
file
and
then
execute
the
script
when
need
how
that
simple
write
the
commands
file
and
ask
bash
read
commands
from
the
file
instead
from
the
keyboard
for
example
can
put
our
simple
backup
script
into
file
called
backup
flume
example
cat
backup
for
echo
back
bak
done
flume
example
bash
backup
back
hash
back
queue
back
sort
flume
example
here
typed
the
keyboard
but
for
more
complex
scripts
you
would
course
want
use
text
editor
indeed
can
further
and
make
the
file
into
command
executable
the
shell
prompt
you
should
add
special
string
bin
bash
the
first
line
make
executable
with
chmod
and
either
add
directory
our
path
type
its
pathname
the
commandline
for
backup
looks
like
this
flume
example
emacs
backup
flume
example
cat
backup
bin
bash
for
echo
back
bak
done
flume
example
chmod
backup
flume
example
backup
rwxr
apr
backup
flume
example
backup
back
hash
back
queue
back
sort
flume
example
there
are
couple
things
note
about
this
example
first
there
the
bin
bash
line
what
does
this
mean
typically
the
the
first
column
file
denotes
the
start
comment
until
the
end
the
line
indeed
this
case
this
line
treated
comment
bash
unix
however
reads
that
line
when
you
execute
the
file
and
uses
determine
which
command
should
fed
this
file
thus
effect
unix
will
execute
bin
bash
backup
then
bash
reads
the
file
and
interprets
its
commands
the
bin
bash
must
the
first
line
the
file
exactly
like
that
spaces
second
there
chmod
which
sets
the
execute
permission
the
file
notice
the
characters
the
file
permissions
displayed
unix
will
not
execute
files
that
not
have
execute
permission
and
the
shell
won
even
try
third
used
the
pathname
backup
when
treating
our
script
command
because
not
our
path
were
our
path
could
have
typed
just
backup
very
tempting
have
your
path
but
big
security
risk
you
directory
with
executable
file
called
say
and
you
don
notice
bad
things
might
happen
when
you
type
the
command
your
path
before
bin
you
will
run
the
local
command
instead
the
official
bin
and
the
local
may
malicious
and
something
bad
fourth
this
script
has
comments
really
should
improve
see
backup
bin
bash
backup
make
backup
copy
all
the
files
current
directory
usage
backup
arguments
input
none
output
line
confirmation
for
each
file
backed
david
kotz
april
for
echo
back
bak
done
exit
good
practice
identify
the
program
how
its
command
line
should
used
and
description
what
does
anything
with
stdin
and
stdout
and
list
the
author
name
and
date
notice
the
script
returns
the
exit
status
which
can
viewed
using
the
echo
command
discussed
earlier
the
return
status
typically
not
checked
when
scripts
are
run
from
the
command
line
however
when
script
called
another
script
the
return
status
typically
checked
important
return
meaningful
exit
status
could
continue
improve
this
script
for
example
catch
errors
from
and
something
intelligent
but
let
move
another
shell
script
all
that
trouble
save
backup
copy
our
files
might
nice
see
later
what
changed
since
last
made
backup
let
write
little
script
compare
the
current
versions
with
the
backup
copies
see
backup
diff
bin
bash
backup
diff
compare
all
the
files
current
directory
with
backup
usage
backup
diff
arguments
input
none
output
line
information
for
each
file
and
diffs
where
they
differ
exit
status
zero
david
kotz
march
for
bak
then
echo
backup
else
cmp
quiet
bak
then
echo
unchanged
else
echo
differences
diff
bak
echo
done
exit
classroom
activity
modify
this
script
exit
non
zero
when
missing
backups
differences
are
found
variables
and
arrays
variables
are
typically
not
declared
before
they
are
used
scripts
flume
flume
message
good
morning
flume
echo
flume
echo
message
good
morning
flume
flume
echo
message
good
morning
above
create
two
variables
and
message
the
later
commands
show
the
varname
syntax
for
variable
substitution
this
the
general
form
whereas
varname
shorthand
that
works
for
simple
cases
note
that
message
identical
message
repetition
the
while
command
the
for
loop
construct
good
for
looping
through
series
strings
but
not
that
useful
when
you
not
know
how
many
times
the
loop
needs
run
the
while
command
perfect
for
this
the
contents
guessprime
use
the
while
construct
the
script
allows
the
user
guess
prime
between
bin
bash
file
guessprime
description
the
user
tries
guess
prime
between
this
not
good
program
there
check
what
the
user
enters
may
not
prime
might
outside
the
range
heck
might
not
even
number
and
might
empty
some
defensive
programming
would
check
the
input
input
the
user
guess
prime
and
enters
output
status
the
guess
program
defines
variable
called
prime
and
set
value
prime
echo
enter
prime
between
read
guess
while
guess
prime
echo
wrong
try
again
echo
enter
prime
between
read
guess
done
exit
this
script
uses
user
defined
variables
prime
and
guess
introduces
the
read
command
which
pauses
and
waits
for
user
input
placing
that
user
input
into
the
named
variable
the
switch
echo
removes
the
newline
usually
produced
echo
finally
note
the
semicolon
after
the
while
command
and
before
the
command
with
the
command
and
its
then
branch
could
have
put
the
next
line
prefer
that
style
flume
public
html
examples
guessprime
guess
prime
between
wrong
try
again
guess
prime
between
wrong
try
again
guess
prime
between
wrong
try
again
guess
prime
between
flume
public
html
examples
the
shell
variables
the
shell
maintains
number
important
variables
that
are
useful
writing
scripts
have
come
across
some
them
already
variable
description
user
username
current
user
home
pathname
for
the
home
directory
current
user
path
list
directories
search
for
commands
number
parameters
passed
the
script
name
the
shell
script
arguments
given
the
script
list
all
the
parameters
single
variable
list
all
the
parameters
single
variable
always
delimited
process
the
shell
script
when
running
the
variable
tells
you
how
many
arguments
were
the
command
line
there
were
three
arguments
for
example
they
would
available
and
the
command
line
myscript
then
myscript
and
the
two
variables
and
both
provide
the
list
command
line
arguments
but
with
subtle
differences
try
the
following
script
args
see
the
difference
bin
bash
echo
arguments
loop
through
all
the
arguments
four
different
waysf
echo
for
arg
for
arg
echo
arg
done
echo
echo
for
arg
for
arg
echo
arg
done
echo
echo
for
arg
for
arg
echo
arg
done
echo
echo
for
arg
for
arg
echo
arg
done
exit
let
try
command
with
four
arguments
the
fourth
argument
has
embedded
space
flume
public
html
examples
args
one
two
three
and
more
arguments
args
for
arg
one
two
three
and
more
for
arg
one
two
three
and
more
for
arg
one
two
three
and
more
for
arg
one
two
three
and
more
flume
public
html
examples
study
the
difference
each
case
you
should
use
process
command
line
arguments
nearly
always
because
retains
the
structure
those
arguments
shorthand
for
arg
equivalent
for
arg
choice
the
variable
name
arg
immaterial
the
shell
printing
error
messages
you
might
need
inform
the
user
error
this
example
the
argument
supposed
directory
and
the
script
found
that
not
echo
amp
error
should
directory
here
see
how
push
the
output
echo
normally
stdout
the
stderr
instead
redirecting
the
stdout
the
stderr
using
the
confusing
but
useful
redirect
amp
which
means
make
the
stdout
the
same
place
the
stderr
checking
arguments
when
writing
scripts
important
write
defensive
code
that
checks
whether
the
input
arguments
are
correct
below
the
program
verifies
that
the
command
has
exactly
three
arguments
using
the
not
equal
operator
then
echo
amp
usage
incorrect
argument
input
exit
notice
also
that
the
script
then
exits
with
non
zero
status
finally
from
this
week
reading
assignments
comments
should
clarify
the
code
not
obscure
they
should
enlighten
not
impress
you
used
special
algorithm
text
mention
and
give
reference
don
just
add
noise
chitchat
say
comments
what
the
code
cannot
don
forget
there
are
some
good
bash
references
the
resources
page
other
stuff
there
never
enough
time
show
you
all
the
good
stuff
class
simple
debugging
tips
when
you
run
script
you
can
use
printf
echo
print
debugging
information
the
screen
found
helpful
define
function
debugprint
can
turn
and
off
all
debug
statements
one
place
print
the
arguments
for
debugging
comment
out
echo
line
turn
off
function
debugprint
echo
return
debugprint
starting
process
arguments
for
arg
debugprint
processing
arg
you
get
syntax
error
for
example
flume
ziplab
making
tarball
called
lab
tgz
ziplab
line
syntax
error
near
unexpected
token
else
ziplab
line
else
flume
the
error
around
line
emacs
edit
the
file
count
again
and
then
line
using
the
sequence
key
strokes
esc
that
hit
the
esc
key
and
hit
you
did
not
install
the
customized
emacs
file
your
own
emacs
you
may
need
hit
twice
then
enter
the
line
number
and
you
will
brought
that
line
now
fix
the
bug
particular
example
the
actual
error
was
line
not
line
the
statement
began
but
forgot
the
semicolon
before
then
the
shell
finally
realized
problem
when
reached
the
else
command
line
you
may
need
work
backwards
through
the
code
looking
carefully
find
the
syntax
problem
every
time
you
launch
emacs
edit
file
saves
backup
copy
that
file
for
example
when
you
edit
foo
and
save
emacs
saves
the
pre
editing
version
foo
you
later
wondering
what
changed
flume
diff
foo
foo
will
print
the
differences
between
the
two
files
arrays
like
variables
arrays
are
typically
not
declared
before
they
are
used
scripts
flume
colors
red
orange
yellow
green
blue
indigo
violet
flume
echo
colors
red
flume
echo
colors
orange
flume
echo
colors
violet
flume
echo
colors
flume
above
create
one
array
colors
notice
that
colors
implicitly
substitutes
the
first
element
with
index
computer
scientists
like
counting
from
zero
the
later
commands
show
the
varname
syntax
for
variable
substitution
this
the
general
form
whereas
varname
shorthand
that
works
for
simple
cases
note
that
message
identical
message
and
colors
equivalent
colors
when
desiring
subscript
array
variable
you
must
use
the
full
syntax
colors
finally
note
that
colors
empty
because
was
not
defined
even
cooler
the
array
can
used
combination
with
file
subsitution
filename
and
command
substitution
command
flume
cat
lflist
john
kotz
dartmouth
edu
joel
katticaran
dartmouth
edu
kaya
thomas
dartmouth
edu
trevor
davis
dartmouth
edu
thomas
kim
dartmouth
edu
kyle
dotterrer
dartmouth
edu
flume
lfs
lflist
flume
echo
lfs
trevor
davis
dartmouth
edu
flume
flume
juniors
grep
lflist
flume
echo
juniors
kyle
dotterrer
dartmouth
edu
flume
echo
lfs
john
kotz
dartmouth
edu
joel
katticaran
dartmouth
edu
kaya
thomas
dartmouth
edu
trevor
davis
dartmouth
edu
thomas
kim
dartmouth
edu
kyle
dotterrer
dartmouth
edu
flume
the
last
line
demonstrates
how
you
can
substitute
all
values
the
array
with
the
index
let
arithmetic
the
let
command
carries
out
arithmetic
operations
variables
let
let
let
bash
let
syntax
error
operand
expected
error
token
note
the
let
command
sensitive
spaces
let
echo
echo
echo
let
equivalent
let
echo
temporary
files
your
script
needs
create
some
temporary
files
its
work
good
practice
create
those
files
place
other
than
the
current
directory
and
with
filename
that
unlikely
used
another
script
even
another
concurrently
running
copy
your
script
the
directory
tmp
writable
everyone
not
great
place
put
important
files
and
the
conventional
place
put
temporary
files
avoid
picking
name
that
others
might
pick
scripts
include
their
process
identifier
part
the
filename
for
example
script
print
might
the
following
bin
bash
build
output
file
then
print
name
temporary
file
includes
our
process
tmpfile
tmp
print
echo
tmpfile
for
arg
print
nice
header
then
the
file
echo
tmpfile
echo
arg
tmpfile
cat
arg
tmpfile
echo
tmpfile
done
lpr
tmpfile
print
the
result
tmpfile
clean
after
ourself
exit
use
variable
tmpfile
for
clarity
and
consistency
throughout
the
script
catching
interrupts
cleaning
many
scripts
create
intermediate
temporary
files
and
might
leave
mess
interrupted
part
way
through
their
operation
the
trap
command
can
catch
such
interrupts
such
those
caused
the
user
typing
ctrl
the
keyboard
while
the
script
works
good
form
catch
this
interrupt
and
clean
before
exiting
the
above
example
would
extend
the
above
example
follows
name
temporary
file
includes
our
process
tmpfile
tmp
print
trap
tmpfile
exit
this
trap
command
gives
the
shell
command
run
whenever
the
script
exits
for
any
reason
whether
due
exit
command
due
interrupt
that
kills
the
process
very
handy
notice
that
define
the
trap
immediately
after
defining
the
variable
name
that
will
effect
whenever
the
temporary
file
later
created
the
flag
force
causes
override
some
kinds
errors
notably
not
complain
the
tmpfile
does
not
yet
exist
sometimes
you
need
whole
directory
for
your
temporary
use
tmpdir
tmp
print
trap
tmpdir
exit
mkdir
tmpdir
tmpdir
here
used
mkdir
make
the
directory
and
recursively
remove
functions
like
most
procedural
languages
shell
scripts
have
structure
and
function
support
typically
good
idea
use
functions
make
scripts
more
readable
and
structured
what
follows
simply
add
function
guessprime
create
guessprimefunction
bin
bash
file
guessprimefunction
variant
guessprime
description
the
user
tries
guess
prime
between
this
not
good
program
there
check
what
the
user
enters
may
not
prime
might
outside
the
range
heck
might
not
even
number
and
might
empty
some
defensive
programming
would
check
the
input
input
the
user
guess
prime
and
enters
output
status
the
guess
ask
the
user
guess
and
fill
global
variable
guess
with
result
usage
askguess
low
high
where
low
high
the
range
numbers
which
they
should
guess
function
askguess
echo
enter
prime
between
read
guess
program
defines
variable
called
prime
and
set
value
prime
ask
them
once
askguess
while
guess
prime
ask
again
askguess
done
exit
notice
that
defining
function
effectively
adds
new
command
the
shell
this
case
askguess
and
that
command
can
have
arguments
and
those
arguments
are
available
within
the
function
they
were
command
line
arguments
and
forth
all
other
variables
are
treated
global
variables
like
guess
this
example
try
this
script
very
fragile
see
what
happens
when
you
enter
nothing
just
hit
return
the
prompt
for
guess
why
does
that
happen
another
example
submitx
submit
your
lab
solutions
you
use
command
labs
submit
which
actually
just
runs
bash
script
labs
submitx
you
can
learn
many
things
from
this
example
note
the
frequent
checks
for
possible
problems
the
carefully
quoted
variable
instantiations
the
command
chains
with
amp
amp
ensure
that
command
sequence
stops
the
first
error
and
only
reaches
exit
they
all
succeed
without
error
and
the
use
break
long
lines
into
readable
sequences
bin
bash
submit
homework
assignment
the
assignment
must
labs
labn
where
the
entire
directory
copied
submit
labs
labn
username
where
username
the
user
the
user
that
runs
this
script
usage
submit
extension
where
where
the
optional
second
word
literally
extension
and
used
indicate
that
the
student
wants
claim
extension
this
assignment
that
case
all
previously
submitted
files
are
deleted
usage
usage
extension
where
check
arguments
then
echo
usage
exit
then
extension
then
extension
else
echo
usage
exit
let
then
echo
usage
exit
lab
lab
destination
their
files
dest
labs
submissions
lab
user
extension
then
echo
requesting
extension
for
lab
else
echo
submitting
lab
check
their
directory
then
echo
oops
you
are
missing
directory
exit
echo
ensuring
that
your
directory
not
visible
any
other
user
chmod
rwx
then
echo
good
else
echo
failed
unable
set
permissions
your
directory
echo
they
are
exit
prepare
copy
from
source
dest
source
labs
lab
echo
checking
source
directory
source
source
then
echo
source
does
not
exist
not
directory
echo
did
you
put
your
lab
the
right
place
exit
source
source
then
echo
source
not
searchable
not
readable
source
exit
else
echo
good
echo
checking
destination
directory
dest
mkdir
dest
amp
amp
chmod
rwx
dest
then
echo
good
else
echo
cannot
make
directory
dest
exit
extension
then
echo
removing
previously
submitted
files
any
dest
echo
marking
your
submission
extension
date
dest
extension
amp
amp
chgrp
dest
amp
amp
chmod
dest
amp
amp
chmod
rwx
dest
amp
amp
chmod
rwx
dest
amp
amp
echo
success
lab
extension
requested
amp
amp
cat
dest
extension
amp
amp
exit
else
echo
copying
new
changed
files
rsync
ahv
delete
source
dest
amp
amp
chgrp
dest
amp
amp
chmod
dest
amp
amp
chmod
rwx
dest
amp
amp
chmod
rwx
dest
amp
amp
echo
success
lab
submitted
amp
amp
date
amp
amp
exit
echo
failed
exit
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
introduction
engs
labs
notes
reading
resources
examples
introduction
the
first
few
lectures
have
been
crash
course
the
shell
and
shell
programming
now
move
the
language
will
spend
the
rest
the
course
developing
our
and
systems
programming
skill
set
first
understanding
the
basics
the
language
and
then
through
examples
study
good
code
and
write
our
own
this
lecture
will
serve
introduction
the
language
you
may
also
want
read
the
lecture
extra
which
has
lots
more
information
about
programming
that
will
not
have
time
cover
class
goals
will
learn
the
following
from
today
lecture
structure
program
compiling
and
running
program
input
and
output
with
stdin
stdout
random
numbers
functions
reading
elected
not
require
specific
textbook
there
are
many
choose
from
including
good
text
online
see
the
resources
page
the
harbison
and
steele
book
very
highly
recommended
and
said
class
excellent
reference
and
learning
resource
but
not
tutorial
when
reference
will
use
the
shorthand
amp
you
feel
you
need
more
textbook
either
use
the
one
online
see
the
professor
for
recommendations
good
ones
for
example
past
incarnations
this
course
used
the
text
bronson
first
book
ansi
not
bad
and
there
are
lots
others
including
some
that
you
can
get
electronically
like
prinz
nutshell
reilly
manuals
programming
depends
suite
standard
libraries
for
input
output
strings
math
memory
allocation
and
forth
most
all
these
functions
are
documented
man
pages
just
like
shell
commands
try
man
strcpy
for
example
for
some
functions
there
are
shell
commands
with
identical
names
you
type
man
printf
for
example
you
see
the
man
page
for
the
bash
printf
command
and
not
the
function
printf
you
can
ask
man
look
only
for
library
functions
section
the
manual
with
man
printf
can
correctly
described
successful
general
purpose
programming
language
description
also
given
java
and
procedural
programming
language
not
object
oriented
language
like
java
programs
written
can
described
good
programs
they
are
written
clearly
make
use
high
level
programming
practices
and
are
well
documented
with
sufficient
comments
and
meaningful
variable
names
course
all
these
properties
are
independent
and
are
traits
good
programming
any
high
level
language
has
the
high
level
programming
features
provided
most
procedural
programming
languages
strongly
typed
variables
constants
structured
types
enumerated
types
mechanism
for
defining
your
own
types
aggregate
structures
control
structures
recursion
and
program
modularization
does
not
support
sets
data
java
concept
class
objects
nested
functions
nor
subrange
types
and
their
use
array
subscripts
and
has
only
recently
added
boolean
datatype
does
have
however
separate
compilation
conditional
compilation
bitwise
operators
pointer
arithmetic
and
language
independent
input
and
output
the
decision
about
whether
java
the
best
general
purpose
programming
language
that
question
can
decided
even
needs
decided
not
going
easy
one
the
programming
language
choice
for
most
systems
level
engineering
and
scientific
programming
the
world
popular
operating
systems
linux
windows
and
mac
their
interfaces
and
file
systems
are
written
the
infrastructure
the
internet
including
most
its
networking
protocols
web
servers
and
email
systems
are
written
software
libraries
providing
graphical
interfaces
and
tools
and
efficient
numerical
statistical
encryption
and
compression
algorithms
are
written
and
the
software
for
most
embedded
devices
including
those
cars
aircraft
robots
smart
appliances
sensors
and
game
consoles
written
recent
mobile
devices
such
the
iphone
ipad
and
some
microsoft
products
use
languages
derived
from
such
objective
and
the
tiobe
programming
community
index
another
indicator
the
popularity
programming
languages
updated
monthly
provides
great
historical
look
this
topic
see
the
latest
results
here
overall
philosophy
get
out
the
programmer
way
often
criticized
for
allowing
the
programmer
pretty
much
whatever
she
wants
examples
class
iteratively
build
version
our
friend
guessprime
and
then
enhance
follow
classroom
terminal
script
guessprime
simple
replacement
for
the
bash
program
guessprime
add
readguess
function
guessprime
move
readguess
function
bottom
declare
function
prototype
guessprime
add
isprime
function
check
bounds
input
args
prototypes
guessprime
pick
random
answer
did
not
have
time
cover
guessprime
support
command
line
arguments
guessprime
handle
non
numeric
input
from
user
guessprime
smarter
readline
function
introduced
tomorrow
guessprime
interpret
words
like
quit
input
usage
stderr
encourage
you
read
your
own
you
can
compare
one
version
with
another
using
diff
here
also
use
the
filename
expansion
bash
flume
diff
guessprime
guessprime
version
our
bash
demo
program
add
isprime
function
check
bounds
input
args
prototypes
david
kotz
april
guessprime
version
our
bash
demo
program
handle
non
numeric
input
from
user
david
kotz
april
scanf
amp
guess
scanf
amp
guess
printf
hey
invalid
number
while
getchar
discard
the
rest
characters
input
line
return
return
return
activity
our
class
activity
extend
guessprime
with
additional
function
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
the
standard
libraries
engs
labs
notes
reading
resources
examples
the
standard
libraries
this
lecture
continue
our
accelerated
introduction
the
programming
language
goals
learn
several
things
today
the
standard
library
and
useful
readline
opening
and
reading
from
files
arrays
and
arrays
strings
command
line
arguments
compiling
code
from
multiple
files
into
one
program
you
may
also
want
read
the
lecture
extra
which
has
lots
more
information
that
not
have
time
cover
class
activity
today
classroom
activity
takes
look
the
nature
strings
arrays
and
why
you
need
keep
that
mind
live
demos
see
terminal
script
from
today
class
names
read
list
names
into
array
and
print
back
out
names
pulls
readline
out
readline
and
readline
names
read
from
file
provided
instead
from
stdin
leverages
freadline
and
freadline
bonus
example
strings
how
strings
work
will
not
get
explore
this
example
but
well
worth
playing
with
your
own
key
concepts
names
read
list
names
into
array
and
print
back
out
names
preamble
bool
data
type
and
stdbool
main
the
notion
char
representing
string
and
that
strings
are
arrays
characters
use
const
for
values
that
will
never
change
declaration
names
two
dimensional
array
think
one
dimensional
array
strings
for
loop
with
three
parts
initializer
two
reasons
end
names
full
file
reaches
eof
empty
printf
loop
does
not
include
because
each
name
includes
newline
character
per
the
contract
with
readline
readline
could
use
gets
read
line
from
stdin
but
can
easily
overwrite
the
space
allocated
string
could
use
fgets
len
stdin
which
will
not
overwrite
string
size
len
but
may
not
read
whole
line
from
the
input
let
write
our
own
readline
function
instead
detailed
comment
describing
the
contract
between
caller
and
the
function
while
loop
that
runs
until
eof
buffer
full
why
pos
len
instead
pos
len
use
pos
notation
step
through
array
need
null
terminate
the
string
with
return
from
inside
the
loop
need
strip
excess
characters
from
over
length
line
until
reach
eof
newline
names
names
pulls
out
readline
readline
and
readline
names
include
readline
note
the
quotes
rather
than
brackets
this
means
will
sought
the
the
current
directory
rather
than
standard
place
where
libraries
live
readline
textually
included
names
the
point
where
include
was
used
use
extern
the
prototype
indicate
this
function
will
provided
another
file
readline
header
comment
here
not
the
file
easily
readable
users
this
function
use
ifndef
protect
against
repeated
inclusion
this
file
ifndef
readline
define
readline
endif
readline
readline
also
include
readline
not
strictly
necessary
this
case
but
gives
the
compiler
chance
check
that
prototype
from
file
matches
the
definition
from
file
names
names
read
from
file
provided
instead
from
stdin
leverages
freadline
and
freadline
main
takes
arguments
code
checks
arguments
for
validity
use
fopen
open
file
for
reading
error
messages
printed
stderr
with
fprintf
fclose
later
called
close
the
file
freadline
like
readline
except
uses
getc
instead
getchar
note
the
type
file
pointer
object
type
file
more
that
later
activity
today
classroom
activity
explored
what
happens
when
you
overwrite
the
end
string
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
memory
pointers
and
malloc
engs
labs
notes
reading
resources
examples
memory
pointers
and
malloc
truly
understand
and
particular
the
use
pointers
you
need
understand
how
programs
use
memory
these
same
concepts
underly
nearly
all
procedural
languages
though
some
languages
cover
the
details
goals
recognize
that
all
data
stored
memory
that
memory
linear
sequence
bytes
and
that
every
byte
has
numeric
address
understand
that
stores
the
running
program
and
its
data
one
four
areas
memory
each
managed
differently
learn
about
syntax
for
pointers
addresses
and
dereferencing
begin
explore
dynamic
memory
allocation
slides
and
examples
today
used
brief
set
slides
keynote
pdf
explain
memory
addresses
and
pointers
complementing
the
notes
below
the
slides
reference
several
examples
pointer
pointer
pointer
pointer
memory
and
addresses
every
bit
information
the
computer
needs
must
stored
somewhere
memory
whether
instructions
data
the
computer
memory
sequence
bytes
each
byte
with
its
own
numeric
address
the
computer
has
one
megabyte
memory
these
bytes
will
numbered
from
that
from
since
computer
scientists
work
hexadecimal
rather
than
decimal
the
bytes
are
numbered
from
fffff
practice
tend
write
hexadecimal
numbers
notation
xfffff
given
variable
can
use
operator
amp
get
its
address
you
might
read
this
operator
address
int
int
amp
the
first
variable
integer
the
second
variable
pointer
integer
and
initialized
the
address
memory
where
stored
the
way
the
null
pointer
simply
address
zero
the
arranges
for
that
memory
segment
illegal
for
reading
for
writing
you
try
dereference
null
pointer
for
reading
writing
think
char
null
char
the
will
catch
and
trigger
segmentation
fault
when
you
run
your
program
becomes
process
within
unix
see
list
all
your
processes
type
the
bash
commandline
see
all
the
processes
running
the
system
try
your
program
executable
code
copied
into
memory
the
processor
can
read
the
instructions
and
execute
them
this
region
often
called
the
code
segment
text
segment
let
focus
data
which
live
the
other
three
segments
three
regions
data
memory
stores
all
the
data
your
program
manipulates
three
distinct
regions
memory
aka
segments
there
nothing
special
about
each
region
they
all
somewhere
that
linear
sequence
bytes
but
manages
each
differently
let
look
each
turn
global
memory
aka
static
the
simplest
region
called
global
static
storage
and
where
global
variables
live
you
define
constant
variable
outside
any
function
has
global
scope
meaning
that
visible
all
code
any
function
within
the
current
file
and
static
storage
meaning
that
allocates
space
for
and
initializes
the
contents
before
the
program
begins
executing
its
address
will
never
change
throughout
the
execution
the
program
hence
the
name
static
for
example
const
float
const
char
usage
usage
dog
mapfile
filename
int
error
count
int
main
the
above
declares
three
global
variables
two
which
are
constants
and
one
which
variable
all
are
visible
functions
defined
below
their
declaration
global
variables
are
always
declared
the
top
file
after
include
directives
and
before
any
function
definitions
global
variables
can
handy
and
sometimes
necessary
but
good
style
avoid
use
global
variables
global
constants
are
generally
well
modularized
programs
keep
their
data
close
passing
the
data
pointers
data
among
functions
there
are
two
kinds
global
global
within
file
and
global
across
all
files
the
program
the
former
are
reasonable
used
carefully
but
the
latter
are
more
dangerous
discuss
the
differences
later
have
time
the
stack
for
local
variables
all
the
example
code
seen
far
makes
extensive
use
local
variables
these
variables
are
defined
within
function
and
have
local
scope
meaning
that
the
variable
visible
within
the
function
only
and
stack
storage
meaning
that
allocates
space
for
the
variable
within
the
stack
frame
for
this
particular
instance
this
function
call
note
local
variables
include
the
function
parameters
think
about
how
stack
works
when
the
program
starts
allocates
chunk
bytes
the
stack
hold
all
the
variables
defined
main
this
chunk
called
stack
frame
does
not
initialize
these
bytes
the
program
must
initialize
variables
either
the
variable
definition
the
code
follow
later
when
main
calls
another
function
say
readline
allocates
another
chunk
bytes
the
stack
you
could
say
pushes
another
frame
the
stack
hold
the
variables
defined
readline
when
readline
calls
fgetc
pushes
another
stack
frame
the
stack
chunk
bytes
hold
the
variables
defined
within
fgetc
when
fgetc
returns
pops
the
frame
off
the
stack
when
readline
returns
pops
that
frame
off
the
stack
the
local
variables
defined
readline
are
not
just
syntactically
inaccessible
main
out
scope
their
memory
longer
allocated
indeed
when
main
calls
another
function
say
printf
stack
frame
pushed
the
stack
for
printf
using
the
same
memory
that
had
been
allocated
readline
and
fgetc
the
heap
dynamically
allocated
memory
the
third
kind
data
memory
called
the
heap
large
region
memory
managed
malloc
each
call
malloc
selects
chunk
bytes
from
the
heap
region
and
returns
pointer
that
chunk
keeps
careful
records
which
chunks
have
been
allocated
and
which
are
free
the
programmer
responsibility
eventually
return
unused
chunks
calling
free
where
pointer
earlier
returned
malloc
the
programmer
forgets
call
free
that
chunk
can
never
reused
and
eventually
malloc
will
run
out
free
chunks
allocated
this
situation
called
memory
leak
also
the
programmer
responsibility
not
call
free
multiple
times
for
the
same
pointer
doing
may
corrupt
the
records
kept
the
memory
allocation
library
and
will
likely
lead
program
crashes
there
are
four
related
functions
you
should
understand
malloc
allocates
bytes
heap
memory
calloc
count
size
allocates
count
size
bytes
heap
memory
realloc
where
pointer
heap
memory
expands
shrinks
its
allocation
bytes
free
where
pointer
heap
memory
releases
that
portion
heap
memory
for
future
use
check
out
this
animated
explanation
pointers
fun
exit
when
the
process
exits
all
its
memory
released
the
four
segments
code
global
stack
and
heap
disappear
activity
today
activity
looks
program
that
copies
string
and
tries
find
bug
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
dynamic
memory
allocation
linked
lists
engs
labs
notes
reading
resources
examples
dynamic
memory
allocation
linked
lists
goals
understand
that
malloc
and
free
allocate
and
allocate
memory
from
the
heap
use
dynamic
memory
build
linked
list
terminal
script
from
today
class
background
working
with
code
that
builds
and
manipulates
linked
lists
you
learned
about
linked
lists
and
may
want
review
the
linked
list
notes
and
implementation
slides
pdf
powerpoint
singlylinked
java
simplelist
java
dynamic
memory
allocation
before
dive
check
out
this
animated
explanation
pointers
fun
does
not
have
language
support
for
dynamically
allocating
new
things
instead
the
programmer
has
call
library
function
called
malloc
allocate
new
chunk
memory
from
the
heap
segment
and
later
call
free
return
that
chunk
memory
the
heap
the
programmer
has
remember
initialize
the
chunk
bytes
received
from
malloc
which
otherwise
should
assumed
contain
random
data
the
programmer
has
careful
allocate
large
enough
chunk
hold
the
data
she
intends
store
there
and
not
use
pointers
write
outside
that
chunk
memory
lots
flexibility
and
power
but
with
any
great
power
you
must
take
great
care
using
java
you
can
use
new
dynamically
create
new
object
and
delete
discard
object
created
with
new
but
for
the
most
part
the
java
compiler
and
runtime
handles
object
deletion
and
memory
recovery
automatically
called
garbage
collection
there
are
four
related
functions
you
should
understand
malloc
malloc
allocates
bytes
heap
memory
the
memory
contents
remain
uninitialized
calloc
calloc
count
size
allocates
count
size
bytes
heap
memory
and
initializes
all
zero
this
call
appropriate
when
you
want
allocate
array
count
items
each
size
bytes
realloc
realloc
where
pointer
heap
memory
expands
shrinks
its
allocation
bytes
free
free
where
pointer
heap
memory
releases
that
portion
heap
memory
for
future
use
our
examples
today
show
how
use
malloc
allocate
space
store
string
and
later
struct
holding
aggregate
types
for
example
using
calloc
and
realloc
read
about
how
readlinep
works
memory
leaks
and
stray
pointers
for
every
malloc
there
must
matching
free
you
allocate
space
but
never
free
you
created
memory
leak
the
program
runs
the
process
memory
size
will
grow
and
grow
and
eventually
run
out
memory
you
free
pointer
you
never
allocated
free
the
same
pointer
twice
you
may
cause
the
heap
manager
corrupt
its
data
structures
and
trigger
segmentation
fault
some
future
time
often
seemingly
random
time
whenever
you
write
malloc
write
the
corresponding
free
call
document
whose
responsibility
free
that
pointer
whenever
you
call
free
good
practice
immediately
set
null
not
because
you
have
makes
difference
the
heap
but
because
that
step
will
prevent
you
from
accidentally
using
that
now
defunct
pointer
you
get
clean
segmentation
fault
instead
unpredictable
behavior
when
the
process
exits
all
its
memory
free
the
four
segments
code
global
stack
and
heap
disappear
coding
style
memory
allocation
avoid
sprinking
calls
malloc
and
free
throughout
your
code
instead
think
about
the
kinds
things
you
need
create
and
destroy
and
write
type
specific
wrapper
for
each
such
type
for
example
your
program
manipulates
things
type
struct
listnode
you
would
write
two
functions
struct
listnode
listnode
new
void
listnode
free
struct
listnode
node
the
first
function
calls
malloc
sizeof
struct
listnode
and
initializes
all
its
contents
perhaps
using
parameters
passed
the
caller
the
second
calls
free
node
both
involve
careful
error
checking
code
see
example
names
there
are
many
advantages
this
approach
the
mainline
code
more
readable
because
clear
what
listnode
new
doing
the
new
function
acts
like
constructor
object
oriented
languages
and
can
ensure
the
newly
returned
memory
initialized
least
not
random
bytes
code
involving
malloc
can
sometimes
tricky
and
you
isolate
that
trickiness
one
spot
and
focus
getting
right
once
some
new
types
might
need
multiple
malloc
calls
our
linked
list
examples
names
names
names
all
those
malloc
calls
and
corresponding
free
calls
can
the
new
free
functions
you
can
insert
debugging
output
reference
counting
logic
set
debugger
breakpoints
these
new
free
functions
and
immediately
have
that
feature
apply
all
occurrences
your
program
work
with
this
type
data
structures
not
object
oriented
language
like
java
python
does
not
provide
any
language
features
declare
class
create
and
manipulate
object
instances
that
class
but
does
provide
two
kinds
aggregate
data
arrays
and
structures
arrays
seen
examples
with
arrays
characters
aka
strings
and
arrays
character
pointers
and
even
two
dimensional
arrays
characters
but
one
can
also
define
arrays
other
types
char
names
numstudents
namelength
int
ages
numstudents
float
grades
numstudents
and
forth
sometimes
you
need
understand
that
array
name
effect
pointer
the
first
spot
memory
where
that
array
data
lives
thus
ages
type
int
and
pointer
the
first
entry
the
array
but
ages
type
int
and
the
value
that
first
entry
the
array
this
concept
comes
mostly
arrays
characters
names
type
char
and
even
names
type
char
and
names
type
char
effect
names
array
strings
and
names
the
first
string
the
array
like
other
strings
names
type
char
structs
allows
you
define
aggregate
called
struct
like
object
has
data
members
unlike
object
has
methods
function
members
continuing
our
above
example
could
have
defined
struct
for
each
student
and
then
array
structs
follows
struct
student
char
name
namelength
int
age
float
grade
struct
student
students
numstudents
now
can
refer
the
first
student
student
the
second
student
student
and
forth
can
refer
the
name
the
first
student
student
name
and
the
age
the
second
student
student
age
our
classtime
examples
names
names
and
names
declare
struct
listnode
and
use
build
linked
list
there
see
different
notation
instead
refer
member
struct
have
use
dereference
the
pointer
and
refer
member
the
pointee
struct
student
alice
single
struct
representing
alice
struct
student
amp
alice
pointer
initialized
point
alice
the
following
three
all
the
same
thing
int
age
alice
age
int
age
age
int
age
age
linked
lists
the
examples
below
construct
simple
linked
list
comprising
nodes
that
each
have
pointer
string
and
pointer
the
next
node
the
list
includes
dummy
head
node
simplify
list
management
the
variable
head
pointer
that
dummy
node
structure
for
each
node
linked
list
struct
listnode
char
name
struct
listnode
next
struct
listnode
head
null
null
dummy
node
head
empty
list
after
adding
three
nodes
the
list
might
look
like
this
examples
first
live
coded
simple
revision
the
names
program
using
array
pointers
instead
two
dimensional
array
characters
names
array
pointers
use
readlinep
here
the
two
dimensional
names
array
replaced
one
dimensional
array
string
pointers
which
more
common
and
which
allows
the
names
any
length
each
array
entry
points
dynamically
allocated
memory
from
the
heap
big
enough
hold
that
name
use
new
freadlinep
function
after
the
next
lecture
recommend
you
read
about
its
implementation
don
have
time
class
but
can
extend
this
code
sort
the
array
using
qsort
quicksort
names
sort
names
void
casting
then
live
coded
linked
list
version
the
names
program
names
revises
names
use
linked
list
instead
array
you
should
look
two
more
versions
the
names
program
names
extends
names
keep
the
list
sorted
names
extends
names
remove
duplicates
activity
today
activity
deletes
the
list
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
modular
data
structures
engs
labs
notes
reading
resources
examples
modular
data
structures
this
class
focus
the
design
reusable
modules
for
common
data
structures
goals
understanding
the
importance
reusable
modules
reiterating
the
use
header
files
enable
modules
reiterating
struct
and
introducing
typedef
general
purpose
data
structures
with
void
function
pointers
modularity
and
reuse
some
data
structures
are
common
that
valuable
code
them
once
lists
queues
stacks
trees
and
hash
tables
and
then
use
that
code
for
multiple
programs
multiple
purposes
within
program
code
use
saves
time
because
you
don
need
write
everything
from
scratch
using
robust
well
tested
modules
rather
than
fresh
buggy
code
your
program
more
reliable
finally
separating
business
logic
from
data
structures
you
the
code
clearer
and
more
flexible
you
later
want
switch
more
efficient
data
structure
you
can
without
rewriting
all
the
business
logic
object
oriented
languages
make
this
easier
because
they
make
simple
define
class
objects
and
then
create
new
instances
needed
many
such
languages
further
providing
templates
and
subclasses
way
derive
new
variants
the
base
class
has
none
these
capabilities
but
can
approximate
some
these
concepts
through
good
style
and
careful
design
pointers
anything
developing
general
purpose
data
structure
module
would
really
like
the
module
able
store
arbitary
things
not
just
predetermined
types
but
anything
for
example
instead
linked
list
strings
built
the
names
program
like
linked
list
that
could
store
pointers
anything
today
want
list
string
things
tomorrow
might
want
list
struct
student
things
the
solution
for
the
module
store
pointers
things
rather
than
the
things
themselves
the
user
contract
with
the
module
thus
allocate
and
initialize
thing
and
give
you
pointer
remember
later
when
need
that
thing
ask
and
you
give
back
that
pointer
when
ask
you
print
things
delete
things
give
you
customized
functions
that
know
how
print
and
delete
things
this
type
java
and
other
object
oriented
languages
this
with
templates
has
suport
for
templates
but
does
have
type
for
pointer
anything
void
thus
char
hello
pointer
char
this
case
string
int
amp
pointer
int
struct
student
pointer
struct
malloc
sizeof
struct
student
initialize
the
pointer
name
david
initialize
the
struct
that
pointer
house
west
initialize
class
initialize
void
anything
pointer
any
type
anything
here
pointer
char
the
stack
anything
amp
here
pointer
int
the
stack
anything
here
pointer
struct
the
heap
thus
our
modules
will
accept
and
store
void
pointers
and
return
them
the
caller
when
asked
pointers
functions
noted
above
the
module
may
need
help
when
needs
print
compare
delete
things
the
module
user
must
provide
the
module
with
special
helper
functions
object
oriented
language
like
java
things
are
objects
and
objects
know
how
print
themselves
compare
themselves
delete
themselves
has
such
support
thus
the
caller
may
pass
function
the
module
when
needed
can
actually
pass
the
function
have
pass
the
module
pointer
the
function
the
concept
pointer
function
can
confusing
like
any
other
pointer
address
memory
recall
that
the
compiled
code
the
program
lives
the
code
segment
memory
every
function
resides
some
address
function
pointer
simply
that
address
can
refer
the
function
address
simply
naming
the
function
without
the
syntax
calling
function
that
foo
function
pointer
whereas
foo
calls
that
function
and
passes
arguments
and
our
pointer
example
passed
the
address
functions
main
and
change
printf
could
print
those
addresses
for
examine
have
function
called
myprint
like
this
void
myprint
file
char
key
void
item
int
valuep
item
this
case
the
things
are
integers
fprintf
key
valuep
note
valuep
derefs
pointer
have
function
pointer
printfunc
can
initialize
the
function
pointer
and
call
through
that
pointer
follows
printfunc
myprint
printfunc
key
thing
other
words
dereference
the
pointer
get
function
and
then
call
that
function
notice
the
and
parens
printfunc
how
would
declare
that
variable
printfunc
pretty
gnarly
syntax
void
printfunc
file
char
key
void
item
declares
variable
printfunc
pointer
function
whose
prototype
looks
like
that
myprint
above
that
takes
the
given
three
arguments
and
returns
void
indeed
looks
almost
like
common
function
prototype
except
for
that
variablename
notation
for
this
pointer
useful
must
initialized
the
address
function
example
bags
today
live
code
bag
data
structure
and
use
make
bag
version
our
names
series
bag
unordered
collection
items
the
bag
starts
empty
grows
the
caller
adds
one
item
time
and
shrinks
the
caller
extracts
one
item
time
could
empty
could
contain
hundreds
items
items
are
indistinguishable
the
extract
function
free
return
any
item
from
the
bag
start
from
names
and
modify
with
the
goal
coding
functions
that
manipulate
generic
bag
things
the
first
example
demonstrates
structure
types
like
struct
bag
and
struct
bagnode
typedefs
create
new
type
names
heap
memory
created
via
malloc
bag
new
the
use
pointers
build
and
manipulate
bag
data
structure
the
use
void
represent
pointer
anything
and
its
use
build
bag
generic
things
reminder
that
strings
even
constant
strings
double
quotes
are
stored
memory
arrays
characters
and
referenced
char
pointer
their
first
character
thus
even
constant
string
has
address
and
passed
pointer
extend
the
example
split
the
bag
functions
out
separate
set
files
demonstrating
module
which
close
get
class
set
functions
exported
via
bag
other
files
public
types
like
struct
bag
and
opaque
types
private
types
like
struct
bagnode
private
functions
like
bagnode
new
need
for
global
variables
always
try
avoid
them
the
result
after
some
cleanup
names
complete
bag
module
included
the
lab
starter
kit
another
example
binary
trees
for
more
complex
example
demonstrating
the
use
binary
trees
dictionary
data
structure
that
one
that
stores
key
item
pairs
study
the
binary
tree
module
activity
today
class
activity
add
counter
track
the
number
items
the
bag
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
modules
and
makefiles
engs
labs
notes
reading
resources
examples
modules
and
makefiles
goals
how
create
usable
module
separating
its
code
into
pair
and
files
the
make
command
and
its
makefiles
never
run
mygcc
again
for
deeper
dive
into
make
see
the
lecture
extra
for
look
the
preprocessor
see
another
lecture
extra
for
more
about
header
files
see
another
lecture
extra
extracting
bag
from
names
recall
our
names
program
from
the
prior
lecture
which
converted
the
linked
list
data
structure
specific
that
particular
application
needs
into
generic
bag
data
structure
our
next
step
extract
that
bag
into
separate
set
files
with
clearly
defined
interface
can
used
this
program
and
easily
used
other
programs
given
its
design
also
easy
create
multiple
bags
unlike
the
original
design
names
that
was
constrained
single
application
specific
linked
list
today
divide
the
code
names
into
three
files
namesa
new
version
the
application
bag
declarations
that
form
the
interface
bag
module
bag
functions
that
define
the
implementation
the
bag
module
since
also
use
the
readlinep
module
must
now
compile
the
program
with
command
like
mygcc
names
bag
readlinep
names
make
and
makefiles
our
programs
become
more
complex
increasingly
tedious
and
error
prone
type
the
commands
compile
the
code
into
executable
indeed
for
large
codebase
can
take
minutes
hours
compile
all
the
code
fortunately
there
good
tool
make
executable
from
collection
source
files
incrementally
recompiling
only
those
files
that
have
been
updated
the
make
command
reads
configuration
file
called
makefile
written
its
own
little
language
and
executes
shell
commands
needed
compile
all
the
source
files
and
link
them
into
executable
before
look
specific
example
let
first
take
closer
look
the
compilation
process
from
now
will
compile
all
our
programs
with
make
compiling
and
linking
the
compiler
reads
source
code
from
file
like
bag
containing
code
and
outputs
assembly
code
file
bag
containing
assembly
language
assembly
language
still
human
readable
text
file
but
now
lists
machine
level
instructions
instead
statements
other
words
the
compiler
translates
source
code
into
assembly
code
the
unix
command
for
the
compiler
though
use
one
from
gnu
called
gcc
the
assembler
reads
assembly
code
and
outputs
object
code
translating
the
textual
machine
instructions
into
binary
machine
instructions
still
not
complete
program
not
yet
executable
the
operating
system
the
unix
command
for
the
assembler
the
linker
reads
object
code
from
files
like
names
bag
and
readlinep
and
from
libraries
and
links
them
all
together
into
executable
file
ready
for
the
run
execute
when
ask
bash
run
does
not
translate
the
code
further
both
input
and
output
machine
instructions
binary
format
links
the
pieces
together
resolving
references
one
file
functions
and
variables
other
files
for
example
names
may
reference
function
bag
new
which
the
linker
finds
bag
the
linker
assigns
memory
addresses
for
all
the
code
and
global
variables
ready
for
loading
into
memory
when
the
program
executed
the
unix
command
for
the
linker
short
for
load
not
confused
with
which
links
files
together
however
the
linker
not
magical
program
the
gcc
command
actually
pretty
sophisticated
and
form
like
mygcc
names
bag
readlinep
names
will
actually
run
four
commands
something
like
this
gcc
names
gcc
bag
gcc
readlinep
names
bag
readlinep
libraries
names
names
bag
readlinep
each
the
first
three
ask
compile
the
listed
source
file
default
the
compiler
creates
object
code
file
file
the
same
name
with
the
extension
under
the
hood
actually
running
both
the
compiler
and
then
the
assembler
briefly
creating
the
intermediate
file
the
fourth
line
links
those
three
object
files
together
with
collection
common
libraries
produce
the
executable
program
the
original
names
commandline
argument
placed
here
finally
cleans
removing
the
intermediate
object
files
again
for
large
code
base
waste
effort
recompile
every
source
file
every
time
even
only
one
them
has
changed
since
the
last
compilation
dependencies
optimize
this
process
helps
know
which
files
depend
each
other
clearly
each
object
file
depends
its
source
file
names
names
bag
bag
readlinep
readlinep
and
the
program
depends
all
the
object
files
that
will
linked
together
names
names
bag
readlinep
also
depends
the
standard
libraries
but
assume
they
never
change
and
won
worry
about
them
actually
look
deeper
the
object
files
also
depend
the
include
files
because
those
files
are
virtually
included
the
source
files
the
compiler
reads
the
include
file
bag
when
sees
include
bag
some
point
while
reading
the
source
code
thus
also
have
dependencies
names
bag
readlinep
bag
bag
readlinep
readlinep
they
also
include
files
for
standard
libraries
but
again
assume
those
never
change
and
thus
don
worry
about
them
dependencies
the
above
dependencies
are
actually
written
make
language
the
name
the
left
each
colon
the
target
and
the
name
the
right
the
colon
are
the
dependencies
the
target
depends
the
dependencies
and
should
rebuilt
any
the
dependencies
change
notice
that
dependencies
are
transitive
names
depends
bag
which
depends
bag
and
bag
and
forth
make
builds
the
dependency
tree
and
rebuilds
files
needed
but
how
does
know
how
rebuild
one
file
from
another
add
command
list
commands
indented
with
tab
the
line
that
immediately
follow
the
target
put
all
this
together
file
called
makefile
executable
depends
object
files
names
names
bag
readlinep
gcc
names
bag
readlinep
names
object
files
depend
source
files
names
names
bag
bag
readlinep
readlinep
object
files
also
depend
include
files
names
bag
readlinep
bag
bag
readlinep
readlinep
how
compile
source
into
object
files
names
gcc
names
bag
gcc
bag
readlinep
gcc
readlinep
important
commands
must
indented
with
tab
character
not
spaces
make
will
not
recognize
them
commands
some
editors
are
savvy
and
insert
tab
when
you
type
tab
and
some
try
clever
and
change
the
tab
spaces
make
requires
tab
now
all
have
type
make
and
let
all
the
work
makefile
bag
names
txt
readlinep
bag
names
readlinep
make
gcc
names
gcc
bag
gcc
readlinep
gcc
names
bag
readlinep
names
make
make
names
date
touch
bag
make
gcc
names
gcc
bag
gcc
names
bag
readlinep
names
makefile
bag
names
readlinep
bag
names
names
txt
readlinep
bag
names
readlinep
notice
that
the
first
time
ran
make
compiled
each
source
file
into
object
file
and
then
compiled
them
all
together
use
gcc
link
object
files
because
very
complicated
set
proper
commandline
and
gcc
smart
enough
realize
need
only
run
the
linker
when
only
given
object
files
second
run
make
checked
the
dependency
tree
and
decided
there
was
nothing
rebuilt
time
saved
pretended
edit
bag
touching
the
touch
command
just
updates
the
modification
date
the
file
named
its
command
line
creating
files
needed
but
making
changes
the
content
existing
files
third
run
make
checked
the
dependency
tree
and
saw
that
both
bag
and
names
depend
bag
recompiled
both
because
those
two
object
files
changed
had
rebuild
names
the
end
notice
that
the
files
stick
around
which
why
make
does
not
need
rebuild
them
every
time
make
actually
knows
about
and
the
relationship
between
and
files
several
the
dependencies
listed
were
not
necessary
list
indeed
some
the
commands
listed
are
also
unnecessary
they
are
implicit
rules
already
known
make
thus
streamline
our
makefile
executable
depends
object
files
names
names
bag
readlinep
gcc
names
bag
readlinep
names
object
files
also
depend
include
files
names
bag
readlinep
bag
bag
readlinep
readlinep
compare
with
the
prior
makefile
and
you
see
two
whole
sections
gone
this
new
makefile
works
just
the
same
makefile
bag
names
readlinep
makefile
bag
names
txt
readlinep
make
names
names
bag
bag
readlinep
readlinep
gcc
names
bag
readlinep
names
makefile
bag
names
readlinep
makefile
bag
names
readlinep
bag
names
names
txt
readlinep
there
are
two
important
details
however
first
you
note
that
its
implicit
rules
run
instead
gcc
second
note
that
neither
our
explicit
rules
nor
make
implicit
rules
pass
the
standard
command
line
arguments
the
compiler
need
tell
make
about
those
can
assign
some
make
variables
inform
make
about
our
preferred
compiler
and
command
line
options
actually
make
calls
them
macros
because
their
value
cannot
actually
vary
gcc
cflags
wall
pedantic
std
ggdb
executable
depends
object
files
names
names
bag
readlinep
cflags
names
bag
readlinep
names
object
files
also
depend
include
files
names
bag
readlinep
bag
bag
readlinep
readlinep
the
first
two
lines
assign
values
the
macros
and
cflags
these
two
particular
macros
are
known
make
will
use
them
its
implicit
rules
use
them
our
explicit
rules
too
have
refer
them
explicitly
see
the
commands
rebuild
names
notice
that
the
macro
substitution
syntax
make
uses
dollar
sign
like
bash
but
requires
parentheses
around
the
macro
name
unlike
bash
make
gcc
wall
pedantic
std
ggdb
names
names
gcc
wall
pedantic
std
ggdb
bag
bag
gcc
wall
pedantic
std
ggdb
readlinep
readlinep
gcc
wall
pedantic
std
ggdb
names
bag
readlinep
names
this
time
make
used
the
gcc
compiler
and
all
our
flags
which
target
far
just
typed
make
the
command
line
can
actually
tell
make
build
particular
target
naming
make
readlinep
gcc
wall
pedantic
std
ggdb
readlinep
readlinep
when
given
target
the
command
line
make
chooses
the
first
target
that
has
commands
our
makefile
that
was
names
which
why
put
first
complex
makefile
common
place
target
named
all
first
with
dependency
list
that
indicates
which
target
list
actually
desired
when
one
types
make
all
just
make
this
phony
target
because
the
result
make
all
never
produce
file
called
all
that
its
purpose
direct
make
toward
the
target
want
build
cleaning
taught
make
how
build
our
program
now
let
teach
how
clean
convention
every
good
makefile
has
target
called
clean
let
extend
the
above
makefile
convention
the
clean
rule
goes
the
bottom
the
file
clean
names
dsym
the
flag
force
asks
exit
with
success
even
fails
there
are
files
those
names
removed
the
flag
recursive
removes
directory
and
its
contents
these
commands
remove
the
names
executable
and
the
object
files
and
the
emacs
backup
files
and
the
dsym
directory
gcc
creates
support
gdb
look
how
well
cleans
makefile
bag
names
readlinep
makefile
bag
names
readlinep
bag
names
names
txt
readlinep
make
clean
names
dsym
makefile
bag
names
txt
readlinep
bag
names
readlinep
some
makefiles
you
see
the
author
explicitly
tell
make
that
this
rule
phony
phony
clean
more
macros
any
symbol
that
defined
makefile
like
this
name
value
called
macro
once
defined
you
can
expand
them
using
name
also
common
define
macros
for
the
name
the
program
being
built
and
the
list
object
files
that
into
below
our
final
makefile
declares
prog
and
objs
for
this
purpose
and
uses
them
the
build
command
also
included
list
library
files
needed
this
program
libs
although
names
does
not
need
the
math
library
harmless
ask
gcc
link
with
the
math
library
and
serves
good
example
here
certain
libraries
like
stdio
and
stdlib
are
linked
without
you
asking
prog
names
objs
names
bag
readlinep
libs
executable
depends
object
files
prog
objs
cflags
objs
libs
prog
notice
how
were
able
rewrite
the
build
rule
fully
generic
names
specific
files
indeed
you
could
use
this
rule
all
your
makefiles
complete
makefile
with
the
addition
the
phony
targets
and
nice
header
comment
done
makefile
for
the
names
program
that
uses
the
bag
module
david
kotz
april
gcc
cflags
wall
pedantic
std
ggdb
prog
names
objs
names
bag
readlinep
libs
phony
all
clean
all
names
executable
depends
object
files
prog
objs
cflags
objs
libs
prog
object
files
depend
include
files
names
bag
readlinep
bag
bag
readlinep
readlinep
clean
prog
dsym
the
macro
definitions
the
top
make
easy
for
reader
quickly
see
what
program
will
built
and
from
what
files
the
gnarly
compilation
rule
the
same
for
every
makefile
written
once
and
not
likely
needing
changed
the
dependencies
bottom
are
the
only
other
part
that
varies
with
the
specific
program
saved
this
makefile
names
makefile
our
examples
directory
tips
some
other
things
know
about
make
errors
make
encounters
error
while
compiling
stops
and
does
not
proceed
with
the
rest
the
build
for
example
compilation
step
fails
and
prints
its
error
messages
make
notices
this
prints
message
and
exits
with
error
status
will
not
proceed
compile
other
files
build
the
overall
program
you
want
ask
make
proceed
even
after
encountering
errors
run
make
make
command
line
make
supports
many
command
line
arguments
see
man
make
file
use
file
instead
default
makefile
determine
which
commands
need
run
but
don
actually
execute
any
them
just
print
them
while
particular
target
and
the
things
that
depend
might
have
failed
continue
trying
make
the
other
dependencies
these
targets
anyway
emacs
command
uses
this
flag
dir
directory
dir
tells
make
change
its
working
directory
internally
runs
dir
and
then
look
for
makefile
will
read
from
dir
makefile
this
option
useful
for
running
make
subdirectory
automatic
variables
the
make
utility
also
provides
some
useful
automatic
variables
name
the
current
target
the
list
dependencies
that
are
newer
than
the
target
the
list
dependencies
for
this
target
for
example
could
rewrite
our
names
target
follows
names
names
bag
readlinep
cflags
although
useful
find
the
style
used
our
complete
example
more
readable
documentation
you
can
view
the
gnu
documentation
the
manual
pages
for
make
steve
talbot
oldie
but
goodie
book
managing
projects
with
make
updated
robert
mecklenburg
for
gnu
make
any
the
variety
online
tutorials
for
make
for
emacs
users
you
use
emacs
and
you
installed
our
customation
emacs
whenever
you
start
emacs
loads
this
file
this
file
defines
new
keystroke
ctrl
which
tells
emacs
run
make
separate
subwindow
you
get
any
compiler
errors
type
the
keystroke
ctrl
backquote
and
emacs
jumps
the
right
file
and
right
line
handy
warns
you
about
over
writing
existing
emacs
you
might
want
reconsider
perhaps
you
customized
emacs
before
and
you
should
edit
your
emacs
include
commands
from
emacs
rather
than
simply
overwriting
best
diff
emacs
emacs
see
what
different
rather
than
simply
overwriting
yours
non
compilation
makefiles
you
can
use
makefiles
solve
many
your
daily
challenges
involving
sequences
dependent
actions
running
test
shell
scripts
during
development
and
regression
testing
creating
documents
with
latex
maintaining
webpages
staging
and
live
directories
automated
documentation
generation
source
code
management
here
for
example
the
makefile
use
macbook
compile
and
push
the
website
the
webserver
makefile
for
deploying
jekyll
site
david
kotz
spring
borrowing
from
charles
palmer
and
ira
jenkins
dest
green
dartmouth
edu
public
html
desturl
http
www
dartmouth
edu
localurl
http
files
not
push
the
destination
site
excludes
exclude
makefile
exclude
comics
future
exclude
comics
unused
exclude
examples
future
exclude
examples
unused
exclude
labs
future
exclude
labs
unused
exclude
sections
future
exclude
sections
unused
exclude
reading
future
exclude
reading
unused
exclude
lectures
future
exclude
lectures
unused
exclude
draft
exclude
exclude
exclude
out
exclude
dsym
delete
excluded
phony
build
deploy
local
clean
just
for
testing
the
build
build
echo
building
cat
config
base
config
yml
jekyll
build
build
and
push
server
deploy
cat
config
base
config
yml
echo
building
for
jekyll
build
destination
site
config
yml
echo
nfixing
permissions
chmod
site
chmod
site
echo
nadding
data
data
site
data
echo
ndeploying
rsync
ssh
alcvz
excludes
delete
site
dest
open
desturl
build
and
open
local
server
jekyll
serve
runs
jekyll
build
first
local
echo
building
for
local
viewing
cat
config
base
local
config
yml
sleep
open
localurl
amp
jekyll
serve
incremental
config
yml
clean
jekyll
clean
config
yml
the
leading
some
command
lines
tells
make
not
print
that
command
out
for
the
user
see
just
execute
the
command
here
use
for
echo
commands
because
course
those
print
their
arguments
for
the
user
see
the
leading
some
command
lines
tells
make
ignore
the
exit
status
that
command
even
non
zero
exit
status
will
allow
make
continue
and
not
exit
with
error
message
activity
today
activity
extend
the
makefile
for
names
add
phony
test
target
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
debugging
with
gdb
and
valgrind
engs
labs
notes
reading
resources
examples
debugging
with
gdb
and
valgrind
goals
how
use
gdb
debug
code
how
use
valgrind
track
down
and
fix
memory
related
issues
for
look
code
performance
profiling
tool
called
grpof
see
the
lecture
extra
there
are
some
great
reference
materials
for
gdb
the
beginning
the
section
the
gnu
debugger
gdb
below
review
the
code
discussed
class
today
see
password
names
and
the
familiar
readlinep
code
from
the
examples
well
introduction
debugging
debugging
twice
hard
writing
the
code
the
first
place
therefore
you
write
the
code
cleverly
possible
you
are
definition
not
smart
enough
debug
brian
kernighan
have
started
turn
our
attention
towards
writing
larger
more
complex
programs
have
tried
stress
the
importance
debugging
incorrect
suspicious
behavior
programs
well
documenting
detail
how
those
programs
have
been
tested
the
goal
making
debugging
and
testing
priority
building
programs
such
way
that
are
confident
that
they
are
robust
and
correct
alas
despite
our
great
intentions
compose
quality
software
bugs
still
find
their
way
into
our
code
bugs
are
such
inevitablity
fact
that
many
people
have
tried
estimate
the
number
bugs
per
some
number
lines
code
loc
some
people
believe
the
underlying
takeaway
that
our
code
should
concise
complex
needed
that
can
have
fewer
lines
code
this
class
however
take
the
stance
that
everyone
should
write
clear
code
and
should
avoid
the
use
overly
complex
code
because
this
can
result
code
that
extremely
difficult
debug
when
those
inevitable
bugs
crop
the
words
brian
kernighan
above
ring
loud
and
clear
this
topic
this
lecture
will
take
look
couple
popular
tools
that
are
used
for
debugging
programs
later
lecture
will
focus
more
various
approaches
testing
feel
free
skip
these
notes
you
write
perfect
bug
free
code
techniques
for
limiting
those
pesky
bugs
don
panic
hitchiker
guide
the
galaxy
the
trouble
with
bugs
that
two
are
the
same
bugs
can
simple
bad
pointers
and
array
subscript
errors
while
others
are
sometime
difficult
debug
the
systems
might
run
for
days
and
then
fail
because
slow
memory
leak
numeric
overflow
problem
programmers
aim
understand
the
nature
the
bug
they
are
trying
swat
reproducible
does
always
fail
under
the
same
set
conditions
does
always
manifest
itself
the
same
way
and
some
bugs
are
particularly
hard
find
like
heisenbug
which
seems
disappear
alter
its
behavior
when
one
attempts
study
example
heisenbug
one
that
related
the
current
mix
processes
running
the
same
time
the
program
being
studied
these
are
clues
that
help
track
down
those
pesky
bugs
complex
systems
some
degree
being
good
debugger
code
comes
with
experience
now
you
are
used
segfaults
and
seeing
files
such
core
dumps
your
directory
when
you
run
your
program
and
something
goes
wrong
unless
your
are
writing
compiling
running
programs
the
machines
there
are
details
near
the
end
this
lecture
about
accessing
and
debugging
core
files
the
machines
you
may
have
heard
others
mention
tools
like
the
the
gnu
debugger
gdb
and
valgrind
valgrind
even
have
some
experience
using
these
tools
yourself
which
can
invaluable
aid
solving
problems
through
set
examples
will
show
how
debug
problems
systematic
manner
but
first
let
discuss
why
bugs
occur
and
what
technques
other
than
running
gdb
help
the
complexity
program
related
the
number
interacting
components
for
example
the
crawler
interacts
with
the
external
libcurl
library
there
line
thought
that
says
rule
thumb
the
number
bugs
grows
with
the
number
interactions
reducing
the
complexity
and
interactions
enables
focus
the
location
bugs
code
gordon
bell
summed
this
way
the
cheapest
fastest
and
most
reliable
components
computer
system
are
the
ones
that
aren
there
gordon
bell
gordon
point
that
the
importance
simple
design
cannot
overemphasized
debugging
problems
ranges
from
easy
moderate
even
all
the
way
through
downright
super
hard
techniques
that
help
reduce
degugging
time
include
good
design
and
design
methodology
consistent
style
use
program
idioms
much
possible
boundary
condition
tests
assertions
and
sanity
testing
defensive
programming
designing
for
testing
avoid
files
that
have
large
number
functions
and
functions
that
have
large
number
lines
aim
for
functions
that
one
thing
and
well
limit
global
data
whenever
possible
and
leverage
desk
checking
tools
while
already
discussed
some
these
topics
this
course
will
discuss
more
them
this
lecture
and
future
lectures
approaches
debugging
insanity
doing
the
same
thing
over
and
over
again
and
expecting
different
results
unknown
when
tracking
down
pesky
bugs
can
think
the
following
steps
finding
and
correcting
them
sort
bug
lifecycle
testing
finding
out
what
bugs
exist
have
already
designed
some
simple
tests
for
programs
written
this
class
already
future
lecture
will
look
more
approaches
testing
stabilization
try
and
make
the
bugs
reproducible
identify
the
conditions
that
cause
particular
bug
every
time
localization
identify
the
function
line
the
code
responsible
repeated
anywhere
then
refactor
the
code
refactor
means
clean
reorganize
improve
readability
testability
etc
all
without
changing
the
code
behavior
sure
run
unit
tests
before
and
after
refactoring
ensure
you
did
harm
correction
fix
the
code
verification
test
the
code
fix
and
confirm
works
then
imagine
other
boundary
case
examples
that
are
related
the
one
that
caused
this
bug
occur
and
test
those
while
you
here
even
light
the
above
mentioned
steps
finding
and
correcting
bugs
there
are
many
ways
that
people
approach
debugging
their
programs
when
issues
arise
they
don
they
sift
through
warning
error
messages
once
all
the
messages
are
gone
they
assume
their
program
correct
they
use
printf
style
debugging
use
printf
statements
strategically
placed
throughout
code
help
with
inspection
variables
and
control
flow
they
use
specialized
debugging
tools
programs
plugins
integrated
into
your
favorite
ide
commandline
tools
like
gdb
and
valgrind
hope
clear
that
not
debugging
bad
idea
eliminating
all
the
warnings
and
errors
good
idea
and
indeed
required
when
submitting
assignments
but
without
proper
testing
there
guarantee
that
your
program
correct
does
what
you
think
should
the
following
sections
will
discuss
some
the
other
approaches
debugging
code
inspection
many
times
people
rush
and
hack
the
debug
phase
and
sit
the
terminal
hoping
eventually
track
down
that
bug
via
trial
and
error
most
people
this
their
first
resort
you
will
find
this
approach
can
successful
but
can
very
time
consuming
put
more
plainly
will
take
longer
than
other
techniques
one
the
most
effective
debug
tools
you
stop
and
read
your
code
pretend
you
are
computer
and
execute
the
code
with
pen
and
paper
you
read
your
code
keep
some
the
following
tips
mind
draw
diagrams
especially
for
data
structures
regarding
for
while
loops
and
recursion
think
about
the
base
case
and
the
boundary
conditions
and
work
inductively
toward
the
general
case
errors
most
often
occur
the
base
case
the
boundary
cases
code
inspection
very
useful
good
programmers
closely
trace
through
their
code
detail
look
for
boundary
problems
code
many
times
bugs
exist
the
boundaries
structures
arrays
code
for
loops
and
most
all
data
many
difficult
bugs
require
more
power
than
just
hacking
and
hoping
once
you
have
read
your
code
and
convinced
yourself
works
then
bugs
remain
you
need
instrument
your
code
and
start
the
detective
work
sometimes
while
debugging
you
will
discover
other
unrelated
bugs
that
haven
yet
manifested
themselves
fix
them
pragmatic
programmer
tip
don
live
with
broken
windows
fix
bad
designs
wrong
decisions
and
poor
code
when
you
see
them
pragmatic
programmer
tip
fix
the
problem
not
the
blame
doesn
really
matter
whether
the
bug
your
fault
someone
else
still
your
problem
and
still
needs
fixed
the
printf
approach
debugging
all
need
printf
right
until
now
you
have
been
using
mostly
printf
its
variants
help
you
debug
your
code
that
can
only
get
you
far
many
different
types
errors
bugs
can
exist
software
for
example
you
may
have
bug
free
code
but
the
performance
the
system
abysmal
how
you
find
performance
errors
your
code
could
the
choice
data
structure
too
slow
the
structure
your
code
awful
perhaps
the
algorithms
are
bad
match
for
the
system
hardware
particular
set
input
data
what
happens
you
code
looks
error
free
but
you
have
memory
leaks
you
get
little
help
from
printf
for
these
worse
the
underlying
bug
may
even
interfere
with
printf
limited
contribution
your
efforts
for
example
you
have
segfault
that
occurs
after
your
printf
executed
but
its
string
never
gets
displayed
because
the
process
seg
faults
you
might
think
that
the
bug
occurs
before
your
printf
when
really
the
bug
happens
much
later
the
takeaway
here
that
printf
not
your
friend
these
examples
rather
red
herring
what
happens
your
system
runs
for
hours
and
only
under
certain
set
system
conditions
the
code
fails
working
your
way
through
printf
statements
may
not
help
when
bug
buried
deep
the
execution
your
software
you
need
sophisticated
tools
track
those
down
you
need
more
than
printf
attack
these
bugs
this
lecture
talks
about
tools
help
with
performance
issues
memory
leaks
and
difficult
bugs
one
more
thing
about
using
printf
for
debugging
just
because
stdout
shows
some
your
printf
were
executed
doesn
always
mean
that
the
last
message
written
stdout
from
the
last
printf
before
the
program
had
problem
unix
output
often
lazy
meaning
that
the
system
will
eventually
send
the
message
stdout
but
only
when
ready
some
minimum
number
characters
print
make
worthwhile
when
the
system
doing
output
for
your
process
well
others
etc
this
may
seem
unimportant
but
means
that
your
program
may
execute
the
code
following
the
printf
before
the
output
appears
you
are
using
printf
for
debugging
you
should
follow
with
fflush
stdout
which
tells
the
system
print
now
before
your
program
continues
some
will
define
preprocessor
macro
for
this
debugmacros
the
examples
directory
include
stdio
include
stdlib
define
debugmsg
printf
debug
fflush
stdout
gcc
and
other
modern
compilers
you
can
define
the
macro
use
variable
number
arguments
define
eprintf
fprintf
stderr
args
int
main
debugmsg
entered
main
int
float
eprintf
badness
abounds
eprintf
say
something
else
eprintf
and
then
bit
more
printf
bye
return
the
gnu
debugger
gdb
get
started
type
man
gdb
the
command
line
the
web
also
has
good
information
gdb
for
detailed
article
check
out
the
gdb
manual
should
surprise
that
the
emacs
editor
also
supports
gdb
see
introduction
using
gdb
under
emacs
when
learning
new
tool
such
gdb
can
quite
helpful
keep
good
gdb
quick
reference
card
handy
all
you
need
know
terms
command
syntax
here
note
before
get
started
using
gdb
ensure
your
mygcc
alias
has
the
ggdb
flag
our
standard
bashrc
file
defines
mygcc
with
this
flag
this
flag
ensures
that
useful
metadata
packaged
with
your
executable
compile
time
that
gdb
needs
help
you
debug
your
programs
alias
mygcc
alias
mygcc
gcc
wall
pedantic
std
ggdb
note
for
the
curious
student
also
worth
noting
that
you
can
use
gdb
debug
programs
written
not
only
but
also
fortran
and
modula
the
gdb
debugger
invoked
with
the
shell
command
gdb
then
prints
its
own
prompt
and
accepts
its
own
wide
range
commands
once
started
reads
commands
from
the
terminal
until
you
tell
exit
with
the
gdb
command
quit
you
can
get
online
help
from
gdb
itself
using
the
command
help
gdb
gnu
gdb
gdb
fedora
copyright
free
software
foundation
inc
license
gplv
gnu
gpl
version
later
http
gnu
org
licenses
gpl
html
this
free
software
you
are
free
change
and
redistribute
there
warranty
the
extent
permitted
law
type
show
copying
and
show
warranty
for
details
this
gdb
was
configured
redhat
linux
gnu
type
show
configuration
for
configuration
details
for
bug
reporting
instructions
please
see
http
www
gnu
org
software
gdb
bugs
find
the
gdb
manual
and
other
documentation
resources
online
http
www
gnu
org
software
gdb
documentation
for
help
type
help
type
apropos
word
search
for
commands
related
word
gdb
you
can
run
gdb
with
arguments
options
but
the
most
usual
way
start
gdb
with
one
argument
specifying
executable
program
the
argument
gdb
program
gdb
demo
the
following
examples
will
use
lot
the
basic
gdb
commands
break
run
next
step
continue
display
printf
examine
memory
backtrace
for
short
and
frame
checkout
stack
frames
this
important
concept
and
very
useful
for
debugging
and
poking
around
your
code
and
looking
variables
these
are
most
the
common
commands
strongly
recommend
that
you
through
the
sequence
steps
below
and
use
these
debugging
commands
don
worry
you
can
break
anything
just
like
the
shell
commands
you
only
need
subset
the
the
complete
set
gdb
commands
become
very
effective
debugger
again
printf
for
novices
and
not
part
the
hacker
parlance
the
necessary
tools
your
toolkit
gdb
let
start
ing
the
directory
where
have
some
program
that
want
debug
for
the
purpose
this
demo
will
using
new
password
program
live
password
make
the
program
simple
password
simulates
program
that
prompts
the
user
enter
their
password
the
user
guess
matches
the
password
then
the
user
authenticated
they
get
the
nice
success
message
the
user
fails
enter
the
correct
password
they
will
prompted
again
the
user
only
allowed
guesses
before
the
program
terminates
tried
the
program
once
where
entered
the
correct
password
which
currently
hardcoded
into
the
program
and
successfully
authenticated
also
tried
the
program
some
reasonable
guess
passwords
and
wasn
able
authenticate
password
password
success
password
password
password
incorrect
try
again
attempt
password
dartmouth
incorrect
try
again
attempt
password
passwd
incorrect
try
again
attempt
you
exceeded
the
max
number
attempts
try
again
later
good
right
well
except
for
this
weird
thing
encountered
thought
test
the
program
with
few
more
passwords
that
that
thought
password
password
incorrect
try
again
attempt
password
incorrect
try
again
attempt
password
abcdefghijklmn
success
what
success
really
let
poke
this
little
more
password
password
abcdefghijklmnopqrstuvwxyz
segmentation
fault
core
dumped
the
dreaded
segfault
need
investigate
more
clearly
something
funny
happens
when
start
entering
long
passwords
that
this
program
really
doesn
like
the
alphabet
since
the
weird
behavior
noticing
seems
related
reading
checking
passwords
that
are
entered
start
investigation
the
code
there
let
try
running
our
program
that
cool
debugging
tool
gdb
when
gdb
starts
prints
out
bunch
information
about
its
version
and
license
then
drops
into
the
gdb
shell
gdb
password
gnu
gdb
gdb
fedora
copyright
free
software
foundation
inc
snipped
reading
symbols
from
password
done
gdb
one
the
powerful
features
that
debugger
offers
the
ability
set
breakpoints
our
code
when
run
our
program
and
the
debugger
encounters
breakpoint
that
previously
set
the
execution
the
program
stops
that
point
let
set
few
breakpoints
gdb
break
main
breakpoint
file
password
line
gdb
break
check
password
breakpoint
file
password
line
gdb
break
breakpoint
file
password
line
gdb
info
break
num
type
disp
enb
address
what
breakpoint
keep
main
password
breakpoint
keep
check
password
password
breakpoint
keep
main
password
hopefully
you
caught
that
notice
that
can
set
breakpoints
identifying
the
name
function
main
and
check
password
specifying
particular
line
our
source
code
line
there
are
other
identifiers
that
can
used
enable
breakpoints
memory
address
but
will
leave
you
explore
those
later
when
you
are
debugging
programs
with
multiple
files
you
can
also
set
breakpoints
different
files
specifying
the
file
well
the
function
name
line
code
where
you
like
enable
breakpoint
again
will
get
familiar
with
the
basics
here
and
you
can
explore
some
the
other
cool
gdb
features
later
anytime
you
want
see
the
breakpoints
you
currently
created
run
info
break
shown
above
you
can
also
clear
all
your
breakpoints
clear
clear
specific
breakpoints
clear
function
clear
line
even
enable
disable
breakpoints
that
you
can
leave
them
place
but
control
whether
the
cause
your
program
stop
when
the
breakpoint
encountered
let
disable
all
our
breakpoints
except
for
the
one
set
the
check
password
function
gdb
disable
gdb
info
break
num
type
disp
enb
address
what
breakpoint
keep
main
password
breakpoint
keep
check
password
password
breakpoint
keep
main
password
this
point
started
gdb
and
told
about
some
breakpoints
want
set
but
haven
actually
started
running
our
program
let
run
our
program
now
gdb
run
starting
program
net
grad
traviswp
live
password
password
breakpoint
check
password
password
int
authenticated
flag
that
determines
the
user
successfully
authenticated
just
hoped
expected
the
debugger
started
our
program
running
but
paused
the
program
soon
hit
the
breakpoint
that
set
the
check
password
function
once
the
program
has
stopped
can
poke
around
bit
now
let
step
one
line
code
time
gdb
step
printf
password
gdb
step
printf
format
password
printf
gdb
step
start
arg
format
oops
stepping
line
line
nice
but
gdb
step
command
allowed
walk
right
down
into
the
icky
details
printf
this
pretty
cool
that
can
step
into
functions
but
printf
does
lot
work
that
aren
interested
right
now
you
find
yourself
deep
down
some
function
that
you
accidentally
stepped
into
use
the
finish
command
start
the
program
running
again
until
just
after
the
function
the
current
stack
frame
returns
gdb
finish
run
till
exit
from
printf
format
password
printf
check
password
password
fgets
guess
stdin
null
value
returned
now
that
are
back
our
check
password
function
can
proceed
avoid
stepping
into
functions
can
use
the
alternative
gdb
command
called
next
which
similar
step
that
executes
one
line
code
and
then
pauses
the
next
line
code
however
next
will
step
over
functions
that
don
end
deep
down
some
code
that
isn
relevant
deep
inside
the
details
printf
let
try
that
now
gdb
next
password
password
strlen
guess
gdb
next
guess
strlen
guess
gdb
next
guess
strlen
guess
gdb
next
strcmp
password
guess
gdb
next
return
authenticated
when
were
using
next
above
finally
got
the
prompt
enter
password
decided
try
one
the
most
popular
passwords
out
there
password
before
any
further
let
look
some
the
local
variables
can
use
the
print
command
display
the
value
some
expression
variable
name
gdb
print
authenticated
gdb
print
guess
password
can
even
evaluate
code
gdb
print
strlen
guess
use
address
operator
learn
about
where
some
our
variables
live
memory
keep
mind
that
these
variables
live
the
stack
and
are
local
variables
that
only
exist
within
the
check
password
function
gdb
print
amp
authenticated
int
fffffffdf
gdb
print
amp
guess
char
fffffffdf
pretty
cool
right
notice
that
gdb
nice
enough
also
give
information
about
the
type
the
thing
that
are
looking
let
run
next
until
are
done
check
password
once
return
from
check
password
are
returned
main
the
point
the
code
just
after
where
called
check
password
kind
forget
where
are
the
code
going
use
the
list
command
dump
out
some
the
source
code
around
where
currently
stopped
the
program
execution
default
list
will
show
lines
code
where
our
current
line
centered
the
output
gdb
next
gdb
next
main
argc
argv
fffffffe
password
guesses
gdb
list
get
password
and
check
user
authenticated
int
result
while
guesses
max
num
guesses
result
check
password
guesses
result
break
else
printf
incorrect
try
again
attempt
result
guesses
back
stepping
and
checking
some
variables
and
trying
another
password
gdb
step
result
gdb
step
printf
incorrect
try
again
attempt
result
guesses
gdb
step
printf
format
incorrect
try
again
attempt
printf
gdb
finish
run
till
exit
from
printf
format
incorrect
try
again
attempt
printf
incorrect
try
again
attempt
main
argc
argv
fffffffe
password
while
guesses
max
num
guesses
value
returned
gdb
next
result
check
password
gdb
next
breakpoint
check
password
password
int
authenticated
flag
that
determines
the
user
successfully
authenticated
gdb
next
printf
password
gdb
next
fgets
guess
stdin
null
gdb
next
password
password
strlen
guess
gdb
print
guess
password
gdb
print
authenticated
getting
tired
stepping
rather
than
stepping
line
line
want
start
the
program
running
again
least
until
hits
the
breakpoint
again
that
can
speed
the
process
getting
back
the
code
where
can
enter
password
and
verify
the
changes
this
can
simply
use
the
continue
command
which
will
continue
the
execution
the
program
until
stopped
again
for
some
reason
gdb
continue
continuing
incorrect
try
again
attempt
breakpoint
check
password
password
int
authenticated
flag
that
determines
the
user
successfully
authenticated
gdb
next
printf
password
gdb
fgets
guess
stdin
null
gdb
password
password
strlen
guess
gdb
continuing
incorrect
try
again
attempt
you
exceeded
the
max
number
attempts
try
again
later
inferior
process
exited
with
code
looks
like
got
booted
from
the
program
because
exceeded
the
maximum
number
attempts
that
will
allow
this
point
seen
some
useful
gdb
commands
and
you
are
now
equipped
some
debugging
your
own
keep
poking
the
program
and
see
you
can
find
the
error
that
allows
people
authenticate
cases
where
they
really
shouldn
allowed
you
need
push
the
right
direction
check
out
this
hint
you
really
can
figure
out
after
trying
use
gdb
you
can
also
check
out
brief
discussion
for
the
solution
the
bug
only
this
you
really
given
the
college
try
though
couple
cool
things
note
about
gdb
this
point
everytime
you
enter
command
the
gdb
shell
that
successful
the
output
value
stored
variable
denoted
where
increments
for
each
command
that
you
run
you
can
use
those
variables
later
point
you
want
print
gdb
supports
auto
completion
function
names
and
variable
names
ahead
and
try
out
also
similar
the
regular
shell
the
gdb
shell
allows
you
arrow
down
revisit
past
commands
many
the
gdb
commands
have
abbreviated
forms
run
continue
next
backtrace
see
the
gdb
quick
reference
guide
see
other
commands
that
have
abbreviated
forms
you
can
actually
run
the
previous
command
simply
hitting
enter
frequently
used
gdb
commands
below
are
some
the
more
common
gdb
commands
that
you
will
need
see
also
this
printable
gdb
quick
reference
guide
command
purpose
run
arglist
start
your
program
with
arglist
specified
break
file
function
set
breakpoint
function
file
list
file
function
type
the
text
the
program
the
vicinity
where
presently
stopped
backtrace
backtrace
display
the
program
stack
frame
args
the
frame
command
allows
you
move
from
one
stack
frame
another
and
print
the
stack
frame
you
select
args
may
either
the
address
the
frame
the
stack
frame
number
without
argument
frame
prints
the
current
stack
frame
print
expr
display
the
value
expression
continue
continue
running
your
program
after
stopping
breakpoint
next
execute
next
program
line
after
stopping
step
over
any
function
calls
the
line
step
execute
next
program
line
after
stopping
step
into
any
function
calls
the
line
help
name
show
information
about
gdb
command
name
general
information
about
using
gdb
quit
exit
from
gdb
valgrind
memory
management
profiling
tool
the
valgrind
tool
excellent
for
finding
number
problems
specifically
issues
programs
that
involve
illegal
memory
access
and
memory
leaks
sure
read
this
excellent
brief
tutorial
from
stanford
class
guide
valgrind
some
the
notes
below
are
adapted
from
this
guide
running
program
under
valgrind
results
extensive
checking
memory
allocations
and
accesses
and
provides
report
with
detailed
information
about
the
context
and
circumstances
each
error
the
output
report
can
quite
verbose
and
little
difficult
use
improve
your
program
usage
memory
you
don
know
what
you
are
looking
for
therefore
one
our
objectives
here
look
couple
examples
and
start
get
handle
how
read
and
interpret
valgrind
output
the
goal
programmer
clean
report
from
valgrind
that
indicates
errors
and
leaks
far
you
are
concerned
when
using
valgrind
there
are
two
general
types
feedback
you
will
get
regarding
your
program
usage
memory
will
look
these
next
memory
errors
the
really
obvious
and
bad
memory
errors
will
crash
your
program
outright
accessing
memory
that
outside
your
program
allocated
memory
the
not
obvious
memory
related
errors
may
get
lucky
most
the
time
touch
valid
memory
but
every
once
while
the
luck
runs
out
and
your
program
somewhat
mysteriously
fails
running
valgrind
your
program
can
give
you
insightful
information
both
these
sorts
errors
when
error
detected
valgrind
you
should
see
some
output
that
includes
some
sort
error
description
the
offending
source
code
line
and
little
bit
information
about
the
actual
memory
and
what
may
going
wrong
there
are
few
different
types
memory
errors
that
you
may
see
such
invalid
read
write
size
use
uninitialized
value
conditional
jump
move
depends
unitialized
value
source
and
destination
overlap
memcpy
invalid
free
etc
memory
leaks
when
you
allocate
memory
malloc
but
fail
properly
free
that
memory
when
longer
needed
this
leads
what
known
memory
leak
seen
class
memory
leaks
small
short
lived
programs
that
exit
fairly
quickly
don
cause
any
noticable
issues
larger
projects
that
operate
lots
data
and
those
that
are
intended
run
for
long
time
webservers
memory
leaks
can
add
quickly
and
cause
your
program
fail
valgrind
allows
you
check
your
programs
prog
for
memory
leaks
and
get
the
best
feedback
you
want
specify
some
additional
flags
valgrind
leak
check
full
show
leak
kinds
all
prog
args
for
convenience
actually
defined
nice
myvalgrind
alias
the
bashrc
file
for
just
this
reason
alias
myvalgrind
thus
you
can
simply
run
myvalgrind
prog
args
the
easiest
way
determine
there
some
sort
memory
leak
check
the
alloc
free
counts
generated
the
valgrind
output
ideally
the
counts
should
match
they
don
you
get
leak
summary
the
end
the
report
well
little
bit
information
from
valgrind
regarding
each
the
detected
memory
leaks
how
many
bytes
were
leaked
where
the
code
the
allocation
happened
when
profiling
your
program
valgrind
will
attempt
categorize
any
memory
leaks
into
one
four
categories
definitely
lost
memory
that
was
allocated
from
the
heap
but
not
properly
freed
and
there
longer
pointer
the
data
indirectly
lost
memory
allocated
from
the
heap
that
was
indirectly
lost
due
losing
pointer
that
provided
access
other
heap
allocated
memory
possibly
lost
memory
that
was
allocated
from
the
heap
but
not
properly
freed
valgrind
can
determine
whether
not
there
pointer
the
memory
still
reachable
memory
that
was
allocated
from
the
heap
but
not
properly
freed
but
the
program
still
retains
pointer
the
memory
some
way
regardless
the
category
these
are
all
considered
memory
leaks
and
should
fixed
valgrind
demos
class
looked
one
the
more
recent
versions
the
names
program
names
running
valgrind
itself
does
good
job
identifying
various
types
memory
errors
see
above
want
however
also
get
information
about
memory
leaks
our
programs
need
run
valgrind
with
the
flags
mentioned
above
here
snippet
the
output
that
saw
when
running
valgrind
the
names
myvalgrind
names
memcheck
memory
error
detector
copyright
and
gnu
gpl
julian
seward
using
valgrind
and
libvex
rerun
with
for
copyright
info
command
names
joe
bill
travis
mary
names
mary
travis
bill
joe
heap
summary
use
exit
bytes
blocks
total
heap
usage
allocs
frees
bytes
allocated
bytes
blocks
are
indirectly
lost
loss
record
bbad
malloc
replace
malloc
bagnode
new
net
class
demo
names
bag
insert
net
class
demo
names
main
net
class
demo
names
bytes
blocks
are
indirectly
lost
loss
record
calloc
replace
malloc
freadlinep
net
class
demo
names
readlinep
net
class
demo
names
main
net
class
demo
names
direct
indirect
bytes
blocks
are
definitely
lost
loss
record
bbad
malloc
replace
malloc
bag
new
net
class
demo
names
main
net
class
demo
names
leak
summary
definitely
lost
bytes
blocks
indirectly
lost
bytes
blocks
possibly
lost
bytes
blocks
still
reachable
bytes
blocks
suppressed
bytes
blocks
for
counts
detected
and
suppressed
errors
rerun
with
error
summary
errors
from
contexts
suppressed
from
there
can
lot
output
but
know
from
all
our
experience
debuggers
this
point
that
should
begin
fixing
errors
starting
with
the
first
one
reported
this
the
best
place
start
and
many
cases
will
fix
lot
the
subsequent
messages
well
the
first
bit
feedback
that
valgrind
gave
says
that
bytes
blocks
are
indirectly
lost
which
routines
are
identified
possible
sources
memory
leakage
which
these
routines
actually
allocate
memory
that
was
apparently
leaked
how
can
this
fixed
hint
there
exists
comment
the
code
that
identifies
where
were
bit
lazy
what
needs
done
for
the
code
less
lazy
with
the
fix
place
let
run
valgrind
myvalgrind
names
memcheck
memory
error
detector
copyright
and
gnu
gpl
julian
seward
using
valgrind
and
libvex
rerun
with
for
copyright
info
command
names
joe
bill
travis
mary
names
mary
travis
bill
joe
heap
summary
use
exit
bytes
blocks
total
heap
usage
allocs
frees
bytes
allocated
all
heap
blocks
were
freed
leaks
are
possible
for
counts
detected
and
suppressed
errors
rerun
with
error
summary
errors
from
contexts
suppressed
from
look
that
more
errors
activity
try
the
end
the
day
gdb
and
valgrind
are
tools
that
you
can
choose
use
not
though
your
grader
will
likely
use
both
explore
the
correctness
your
programs
you
should
too
reading
about
great
tools
one
thing
but
really
learning
how
use
tool
comes
from
using
tool
below
are
some
instructions
get
you
setup
with
few
programs
that
have
some
bugs
some
obvious
and
some
not
obvious
and
your
goal
find
those
bugs
and
squash
using
gdb
and
valgrind
good
luck
today
activity
use
gdb
explore
and
fix
logic
and
memory
bugs
code
your
section
meeting
this
week
you
use
gdb
and
valgrind
practice
more
logic
and
memory
debugging
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
the
git
source
code
management
system
engs
labs
notes
reading
resources
examples
the
git
source
code
management
system
goals
explore
version
control
learn
use
git
learn
use
gitlab
version
control
systems
this
point
your
software
engineering
career
many
your
programming
projects
will
have
been
small
individual
endeavors
software
matures
often
grows
complexity
bugs
are
fixed
features
are
added
and
the
number
contributing
developers
increases
managing
this
complexity
becomes
mammoth
task
that
crushes
many
fledgling
startups
similar
fate
store
for
projects
that
lack
reliable
version
control
received
bug
report
version
what
was
version
the
ability
easily
back
out
changes
accept
only
subset
group
changes
especially
team
environment
also
essential
and
encourages
experimentation
another
software
development
practice
that
version
control
aids
code
reviews
proposed
changes
may
examined
before
being
incorporated
into
the
master
source
code
repository
tools
like
git
give
programmers
the
ability
branch
away
from
the
main
development
track
try
out
new
feature
debug
quick
fix
and
later
merge
the
changes
later
abandon
them
entirely
finally
version
control
systems
also
serve
form
backup
just
case
some
solo
programmers
might
feel
they
don
need
version
control
this
shortsighted
the
sole
person
doing
the
work
with
support
backup
team
these
folks
need
version
control
even
more
version
control
systems
vcs
come
many
flavors
you
may
have
heard
some
the
open
source
incarnations
such
concurrent
versions
system
cvs
mercurial
subversion
svn
while
these
systems
differ
implementation
they
all
provide
methods
manage
resources
such
tracking
reverting
and
merging
changes
git
open
source
distributed
version
control
system
dvcs
any
text
based
files
can
managed
vcs
source
code
configuration
files
sql
scripts
test
scripts
documentation
written
using
latex
markdown
xml
web
pages
and
more
assets
are
easily
maintained
vcs
store
this
website
gitlab
using
git
files
that
are
not
human
readable
like
word
pdf
files
images
can
problematic
but
can
sometimes
stored
vcs
without
the
benefit
some
the
text
based
tools
there
are
two
primary
groups
version
control
systems
centralized
such
subversion
and
clearcase
which
generally
require
network
connection
for
operation
and
decentralized
such
mercurial
and
git
which
not
require
network
connection
fact
these
systems
always
have
complete
local
version
the
repository
will
using
git
the
git
project
was
originally
developed
and
somewhat
named
after
linus
torvalds
manage
the
linux
kernel
million
loc
many
open
source
and
commercial
projects
currently
rely
git
including
the
linux
kernel
google
android
and
the
macosx
package
manager
homebrew
will
using
git
the
systems
machines
using
managed
git
server
called
gitlab
will
not
cover
installation
and
setup
git
your
personal
laptop
the
use
third
party
git
related
applications
such
github
bitbucket
sourcetree
the
enterprising
student
may
explore
these
and
other
advanced
topics
their
own
you
will
find
several
free
books
and
interactive
tutorials
the
resources
page
particularly
recommend
pro
git
scott
chacon
and
ben
straub
available
free
online
why
version
control
imagine
the
following
scenario
you
have
term
paper
write
being
diligent
student
you
start
early
writing
rough
draft
saved
paper
doc
you
explore
your
topic
you
think
like
what
have
but
what
added
you
not
want
lose
your
current
progress
you
copy
your
paper
new
file
paper
doc
and
begin
exploring
new
ideas
ideas
come
and
you
continue
replicate
and
rename
your
files
you
reach
the
final
week
classes
with
different
documents
each
containing
something
you
want
keep
you
create
new
file
named
final
doc
that
will
contain
all
the
disparate
pieces
thought
linked
together
before
the
deadline
you
realize
you
want
rework
the
intro
and
thus
create
final
doc
the
end
you
submit
something
that
looks
like
final
good
final
doc
now
imagine
you
had
write
this
paper
together
with
others
version
control
systems
are
designed
alleviate
the
hardships
managing
resources
like
source
code
files
term
papers
when
using
vcs
files
are
tracked
that
any
changes
can
recorded
the
simple
example
above
you
ended
with
multiple
files
some
likely
sharing
large
portions
the
same
text
some
vcs
storage
space
saved
only
saving
changes
deltas
files
these
changes
can
logged
and
timestamped
that
going
back
the
version
last
tuesday
before
would
very
easy
the
previous
example
you
wanted
combine
parts
multiple
files
this
concept
known
merging
addition
tracking
files
and
allowing
easy
reversion
vcs
often
have
capabilities
for
easy
merging
when
collaborating
with
multiple
users
vcs
come
two
varieties
client
server
and
distributed
the
client
server
model
the
central
repository
shared
amongst
all
users
here
terms
like
checkout
and
lock
come
into
play
when
user
wants
edit
file
they
checkout
that
file
this
locks
the
file
from
being
edited
any
other
users
the
same
time
some
vcs
allow
stealing
files
for
urgent
priority
changes
but
general
user
has
control
then
one
else
can
have
that
file
until
they
check
common
complaint
with
client
server
systems
their
being
slow
because
every
operation
must
communicate
with
the
central
server
and
not
generally
safe
for
multiple
users
modify
the
same
files
cvs
and
svn
are
examples
the
client
server
model
distributed
version
control
systems
each
user
maintains
their
own
local
repository
and
changes
are
shared
periodically
amongst
all
other
users
merge
conflicts
can
arise
when
multiple
users
modify
the
same
file
and
many
vcs
provide
advanced
features
simplify
this
process
mercurial
and
git
are
among
the
more
popular
distributed
version
control
systems
both
known
for
their
speed
and
flexibility
git
configuration
before
you
can
start
using
git
you
will
need
configure
your
development
environment
git
stores
environment
settings
three
different
files
etc
gitconfig
contains
settings
for
all
users
system
gitconfig
contains
user
specific
settings
project
git
config
contains
project
specific
settings
project
settings
override
user
settings
which
turn
override
system
settings
there
are
many
configuration
options
but
minimum
you
need
tell
git
who
you
are
your
name
and
how
contact
you
your
email
although
you
can
edit
those
files
with
editor
git
provides
command
config
for
setting
common
parameters
shown
below
here
also
set
preferred
editor
emacs
kotz
flume
git
config
global
user
name
david
kotz
kotz
flume
git
config
global
user
email
kotz
dartmouth
edu
kotz
flume
git
config
global
core
editor
emacs
vim
bbedit
kotz
flume
git
config
global
color
true
you
like
colors
kotz
flume
git
config
global
push
default
simple
you
can
view
your
current
settings
with
the
list
option
the
last
two
options
may
useful
you
want
certain
commands
color
their
output
kotz
flume
git
config
list
user
name
david
kotz
user
email
kotz
dartmouth
edu
core
editor
emacs
color
true
push
default
simple
kotz
flume
you
can
see
the
global
option
writes
your
user
specific
settings
gitconfig
kotz
flume
cat
gitconfig
user
name
david
kotz
email
kotz
dartmouth
edu
core
editor
emacs
color
true
kotz
flume
you
want
dig
further
self
documenting
gitconfig
starting
point
may
found
here
gitting
help
you
can
always
get
help
kotz
flume
man
git
kotz
flume
git
help
command
and
there
are
many
tutorials
and
references
the
internet
see
our
git
resources
page
creating
repository
repository
called
repo
for
short
data
structure
that
contains
all
the
information
needed
manage
project
this
often
includes
the
project
files
and
resources
themselves
well
any
meta
data
used
the
vcs
manage
them
let
see
how
create
git
repo
create
new
empty
local
repository
you
always
need
local
repository
work
with
git
when
starting
new
project
from
the
beginning
you
can
either
create
repo
and
fill
create
repo
existing
directory
that
already
contains
files
kotz
flume
labs
kotz
flume
labs
mkdir
labx
kotz
flume
labs
labx
kotz
flume
labs
labx
git
init
initialized
empty
git
repository
net
nusers
kotz
labs
labx
git
kotz
flume
labs
labx
git
kotz
flume
labs
labx
notice
that
git
created
hidden
directory
git
you
should
not
mess
with
any
its
contents
create
repository
existing
development
directory
suppose
you
want
begin
using
vcs
after
project
already
had
lot
files
existing
directory
tree
kotz
flume
labs
tree
kotz
flume
labs
tree
git
init
initialize
the
repo
initialized
empty
git
repository
net
nusers
kotz
labs
tree
git
kotz
flume
labs
tree
git
add
recursively
add
the
current
directory
kotz
flume
labs
tree
git
status
print
current
status
branch
master
initial
commit
changes
committed
use
git
cached
file
unstage
new
file
makefile
new
file
tree
new
file
tree
new
file
treetest
kotz
flume
labs
tree
git
commit
initial
commit
tree
code
master
root
commit
initial
commit
tree
code
files
changed
insertions
create
mode
makefile
create
mode
tree
create
mode
tree
create
mode
treetest
kotz
flume
labs
tree
git
status
print
current
status
branch
master
nothing
commit
working
directory
clean
kotz
flume
labs
tree
git
pager
log
oneline
decorate
graph
all
pretty
print
the
history
commits
head
master
initial
commit
tree
code
kotz
flume
labs
tree
files
git
git
treats
all
content
being
one
three
states
ignored
git
never
even
looks
untracked
git
reports
its
presence
but
doesn
track
its
changes
tracked
git
tracks
everything
that
happens
content
that
being
tracked
always
one
four
states
changed
staged
committed
pushed
workflow
git
workflow
figure
from
jason
taylor
git
complete
the
general
workflow
git
add
modify
files
stage
the
changes
commit
those
staged
changes
the
repo
and
sometimes
push
the
changes
remote
repository
files
that
are
newly
created
are
referred
untracked
until
they
are
added
git
when
files
added
git
are
then
changed
they
must
staged
before
they
are
committed
you
add
modify
files
your
working
directory
git
stages
files
recording
changes
special
file
often
called
the
index
staging
area
when
you
commit
your
changes
the
staged
changes
become
permanently
recorded
the
git
repository
checking
git
status
times
during
your
development
may
helpful
determine
the
status
untracked
modified
staged
committed
etc
the
files
within
your
directory
and
repo
shown
below
nothing
has
been
added
staged
committed
the
repository
you
can
check
the
current
state
with
the
git
status
command
kotz
flume
labs
tree
git
status
branch
master
nothing
commit
working
directory
clean
kotz
flume
labs
tree
the
status
command
will
often
give
you
hints
watch
for
them
these
tips
can
very
helpful
staging
files
move
files
from
your
working
directory
the
staging
area
you
use
the
git
add
command
below
create
readme
all
good
projects
and
stage
the
git
status
command
shows
the
file
has
been
staged
according
the
changes
committed
heading
kotz
flume
labs
tree
cat
readme
binary
tree
demo
code
version
use
function
pointers
and
add
tree
print
demonstrates
use
function
pointers
adds
tree
print
function
hints
how
one
might
support
tree
delete
function
kotz
flume
labs
tree
makefile
readme
tree
tree
treetest
kotz
flume
labs
tree
git
status
branch
master
untracked
files
use
git
add
file
include
what
will
committed
readme
nothing
added
commit
but
untracked
files
present
use
git
add
track
kotz
flume
labs
tree
git
add
readme
kotz
flume
labs
tree
git
status
branch
master
changes
committed
use
git
reset
head
file
unstage
new
file
readme
kotz
flume
labs
tree
git
commit
added
readme
master
added
readme
file
changed
insertions
create
mode
readme
kotz
flume
labs
tree
hint
you
have
several
new
modified
deleted
files
git
add
you
can
use
git
add
all
notice
that
used
readme
rather
than
readme
above
file
with
extension
assumed
text
file
markdown
syntax
which
provides
very
simple
and
readable
markup
for
headings
lists
italics
bold
and
code
snippets
this
course
website
written
markdown
many
vcs
web
portals
like
our
gitlab
and
the
popular
github
allow
you
browse
the
files
your
repository
and
render
markdown
format
making
such
files
much
nicer
look
markdown
easy
learn
see
markdown
resources
recovering
files
git
has
some
characteristics
backup
system
you
accidentally
remove
file
you
can
recover
from
the
most
recent
commit
asking
git
check
out
from
that
commit
program
oops
meant
program
git
checkout
program
the
last
commit
for
more
about
how
you
can
use
this
feature
roll
back
earlier
version
the
code
see
below
ignoring
files
git
works
well
with
normal
files
but
executables
and
binary
format
files
like
images
can
present
challenge
addition
there
are
often
certain
files
that
you
not
want
under
version
control
like
temporary
files
from
your
favorite
editor
general
rule
you
should
not
commit
any
derived
files
repo
for
example
any
files
built
makefile
the
source
files
live
the
repo
and
the
derived
files
are
rebuilt
anyone
using
the
repo
you
should
configure
git
ignore
those
files
they
will
not
added
your
repo
some
filename
extensions
are
commonly
used
refer
derived
files
that
configure
git
ignore
them
all
our
repos
now
create
file
gitignore
global
with
the
following
contents
object
files
and
libraries
emacs
debugger
symbols
dsym
macos
store
appledouble
lsoverride
icon
spotlight
trashes
make
easy
just
copy
our
file
gitignore
github
maintains
list
common
ignore
files
you
want
get
more
ideas
then
you
should
tell
git
about
project
specific
files
that
should
ignored
minimum
this
list
would
include
the
executable
binary
file
that
produced
result
compiling
your
program
rule
thumb
you
should
tell
git
ignore
anything
that
make
builds
and
make
clean
deletes
create
gitignore
file
for
our
new
repo
below
focus
the
need
ignore
the
executable
file
treetest
that
builds
with
make
kotz
flume
labs
tree
echo
treetest
gitignore
kotz
flume
labs
tree
git
status
branch
master
untracked
files
use
git
add
file
include
what
will
committed
gitignore
nothing
added
commit
but
untracked
files
present
use
git
add
track
kotz
flume
labs
tree
git
add
gitignore
kotz
flume
labs
tree
git
commit
ignore
executable
master
ignore
executable
file
changed
insertion
create
mode
gitignore
kotz
flume
labs
tree
didn
have
add
and
commit
the
gitignore
file
for
git
make
use
just
didn
want
forget
put
into
the
repo
that
way
anyone
else
who
later
uses
this
project
repo
will
also
get
the
same
gitignore
file
now
let
make
the
executable
and
see
whether
git
ignores
not
shown
first
made
small
change
treetest
kotz
flume
labs
tree
make
gcc
wall
pedantic
std
ggdb
treetest
treetest
gcc
wall
pedantic
std
ggdb
tree
tree
gcc
wall
pedantic
std
ggdb
treetest
tree
treetest
kotz
flume
labs
tree
makefile
readme
tree
tree
tree
treetest
treetest
treetest
kotz
flume
labs
tree
git
status
branch
master
changes
not
staged
for
commit
use
git
add
file
update
what
will
committed
use
git
checkout
file
discard
changes
working
directory
modified
treetest
untracked
files
use
git
add
file
include
what
will
committed
tree
treetest
changes
added
commit
use
git
add
and
git
commit
looks
like
git
properly
ignored
treetest
but
did
not
ignore
the
files
must
have
skipped
over
the
directions
above
can
explicitly
ignore
them
this
directory
kotz
flume
labs
tree
cat
gitignore
kotz
flume
labs
tree
git
status
branch
master
changes
not
staged
for
commit
use
git
add
file
update
what
will
committed
use
git
checkout
file
discard
changes
working
directory
modified
gitignore
modified
treetest
changes
added
commit
use
git
add
and
git
commit
worked
now
will
commit
all
modified
files
with
commit
kotz
flume
labs
tree
git
commit
tweak
the
test
script
master
tweak
the
test
script
files
changed
insertions
deletions
kotz
flume
labs
tree
removing
files
the
git
command
the
command
remove
files
from
the
repository
for
example
you
may
rearrange
your
code
and
some
source
files
are
longer
needed
instead
you
use
git
remove
the
file
from
both
your
working
directory
and
from
the
repository
prior
versions
the
file
are
still
the
repository
you
can
always
get
the
file
back
git
status
output
sometimes
suggests
you
want
remove
something
from
the
staging
area
you
use
the
git
cached
file
command
remove
staged
files
this
command
doesn
remove
the
file
from
your
directory
from
the
repository
just
the
opposite
git
add
committing
changes
when
you
have
made
some
changes
and
staged
them
then
you
are
ready
commit
those
changes
roughly
permanently
each
commit
should
accompanied
message
explaining
what
changes
have
been
made
the
command
accomplish
this
git
commit
message
saw
the
examples
above
you
run
the
git
commit
command
without
the
option
you
will
taken
your
default
editor
enter
commit
message
you
commit
too
early
and
want
add
something
the
same
commit
then
you
can
use
the
git
commit
amend
command
the
commit
message
very
important
both
you
and
your
colleagues
working
with
you
your
commits
should
fairly
granular
with
straightforward
present
tense
commit
message
encourage
the
use
present
tense
since
you
should
think
the
commit
message
describing
what
the
commit
does
the
commit
messages
become
even
more
important
you
work
with
team
particularly
when
the
members
are
geographically
distributed
best
practice
make
atomic
changes
git
doesn
care
why
files
are
changing
just
tracks
the
content
changes
allowing
you
choose
how
use
the
best
way
git
actions
are
atomic
and
your
changes
should
also
you
move
function
from
one
file
another
that
could
two
commits
one
delete
file
and
another
add
file
this
with
git
but
between
the
two
commits
the
function
missing
entirely
later
build
based
that
the
code
base
the
first
commit
would
not
work
instead
commit
the
new
version
both
files
the
same
commit
similarly
you
need
make
several
unrelated
changes
various
files
your
project
run
git
commit
separately
for
each
set
changes
each
commit
with
different
message
that
the
message
relevant
the
files
being
committed
git
diff
how
can
you
tell
what
has
changed
since
your
last
commit
with
git
diff
below
edit
the
readme
file
and
then
use
git
diff
show
what
changed
just
like
diff
prints
little
bit
context
and
then
uses
lines
beginning
with
and
show
added
and
removed
lines
respectively
kotz
flume
labs
tree
emacs
readme
kotz
flume
labs
tree
git
diff
diff
git
readme
readme
index
readme
readme
adds
tree
print
function
hints
how
one
might
support
tree
delete
function
this
code
now
gitlab
removed
line
and
added
this
paragraph
instead
will
demonstrate
how
diff
can
show
you
the
differences
between
the
current
version
and
the
last
committed
version
you
can
also
add
specific
filename
like
git
diff
makefile
you
just
want
see
differences
for
one
file
rather
than
all
files
the
repo
you
find
the
output
git
diff
mangled
could
because
incompatibility
between
git
the
pager
program
less
the
ssh
connection
and
your
terminal
program
worked
around
telling
git
use
cat
pager
git
config
global
core
pager
cat
git
tags
beginners
can
ignore
this
feature
for
now
once
you
achieved
some
milestone
such
deliverable
release
you
need
some
mechanism
for
marking
your
get
log
history
you
print
the
git
log
you
see
the
hash
codes
the
left
side
that
are
used
identify
each
commit
clearly
would
unreasonable
expect
everyone
remember
that
was
release
for
this
purpose
you
use
the
git
tag
command
this
places
marker
the
get
log
with
the
name
you
specify
you
should
try
use
this
command
only
when
you
committed
date
state
later
when
you
need
reconstruct
particular
release
you
can
use
this
tag
the
git
checkout
command
the
example
above
for
lightweight
tag
one
that
just
name
and
location
the
git
history
another
the
annotated
tag
just
like
the
commit
command
does
these
are
generally
used
note
major
releases
since
the
annotation
can
include
the
release
name
release
notes
and
other
information
related
the
release
for
nice
overview
how
use
this
feature
please
see
the
git
tag
extra
that
added
git
stashes
beginners
can
ignore
this
feature
for
now
common
occurrence
happily
working
the
next
release
the
code
when
high
priority
critical
situation
comes
with
important
customer
the
boss
wants
you
stop
what
you
doing
and
fix
the
problem
you
anxious
fix
but
what
about
all
the
work
you
have
your
working
directory
where
should
you
save
that
you
can
git
checkout
the
code
that
corresponds
the
release
the
customer
running
the
answer
git
stash
which
will
save
everything
that
isn
committed
and
reset
the
directory
the
most
recent
committed
version
once
the
high
priority
work
completed
you
can
restore
what
you
had
with
git
stash
apply
and
your
previous
work
will
reappear
once
you
finished
with
stash
you
should
delete
using
git
stash
drop
which
will
delete
the
last
stash
you
may
have
multiple
stashes
saved
see
them
using
the
git
stash
list
command
but
not
use
the
stash
for
version
control
backup
rolling
back
previous
commit
beginners
should
ignore
this
feature
for
now
thanks
travis
peters
for
this
tip
roll
back
your
repository
specified
state
particular
commit
you
need
use
the
git
reset
command
warning
please
exercise
caution
when
running
these
commands
this
not
something
you
can
undo
later
you
don
follow
these
instructions
this
tutorial
assumes
you
are
currently
the
master
branch
first
want
ensure
that
can
come
back
this
state
our
repository
later
point
should
need
commit
and
its
predecessors
are
always
accessible
long
have
pointer
the
most
recent
commit
that
branch
first
create
branch
that
points
the
most
recent
commit
our
current
branch
ideally
you
are
the
master
branch
right
now
git
branch
myoldhead
next
use
the
git
reset
command
which
allows
you
reset
your
current
head
some
specified
state
according
the
man
page
git
help
reset
the
hard
flag
does
the
following
resets
the
index
and
working
tree
any
changes
tracked
files
the
working
tree
since
are
discarded
git
reset
hard
tag
branch
commit
hash
running
this
command
effectively
sets
your
head
back
the
tag
branch
commit
that
you
specify
and
completely
clears
out
your
working
directory
and
index
staging
area
finally
you
wish
commit
this
state
your
local
repository
that
your
remote
repository
synchronized
the
remote
repository
also
points
back
the
commit
that
you
just
reset
your
local
repository
back
you
need
git
push
with
the
flag
which
will
forcefully
overwrite
your
remote
repository
without
the
flag
git
will
complain
about
your
current
branch
being
behind
this
expected
our
case
git
push
couple
notes
you
decide
that
the
myoldhead
branch
longer
needed
and
you
really
don
want
keep
the
changes
you
can
delete
the
branch
git
branch
and
all
the
commits
that
with
running
the
following
command
git
branch
myoldhead
when
referencing
commits
such
the
git
reset
command
above
you
don
have
copy
paste
write
out
the
whole
commit
large
cryptographic
hashes
are
used
git
for
data
integrity
purposes
the
details
which
beyond
the
scope
these
notes
what
are
concerned
with
however
uniqueness
these
commits
while
not
guaranteed
extremely
unlikely
that
the
sha
hashes
that
are
generated
for
different
commits
will
the
same
thus
when
referring
commits
need
only
tell
git
enough
the
commit
hash
that
can
confident
that
you
have
uniquely
identified
specific
commit
practice
you
see
people
only
use
the
first
characters
git
hash
uniquely
identify
some
tag
branch
commit
other
handy
git
features
git
has
many
many
more
features
than
have
detailed
here
have
only
scratched
the
surface
with
the
commands
necessary
work
collaboratively
your
class
project
the
interested
student
encouraged
explore
the
provided
resources
keywords
commands
investigate
show
diff
branch
and
rebase
for
example
here
git
branch
merge
example
from
the
folks
who
brought
you
gitgraph
pdf
gitlab
server
the
gitlab
server
hosted
https
gitlab
dartmouth
edu
using
gitlab
instead
public
servers
elsewhere
the
internet
because
allows
you
maintain
your
own
private
repositories
and
because
provides
cool
tools
for
example
gitlab
includes
graphical
web
based
way
exploring
your
repositories
shown
below
you
must
register
for
userid
and
then
create
repository
for
lab
using
the
instructions
that
follow
get
started
with
gitlab
follow
these
steps
use
browser
https
gitlab
dartmouth
edu
you
don
already
have
gitlab
userid
create
one
that
identical
your
login
name
when
the
gitlab
userid
created
back
and
login
here
the
opening
screen
when
new
user
logs
and
here
what
opening
screen
looks
like
all
our
repositories
are
gitlab
group
click
the
groups
tab
near
the
top
click
our
group
expand
click
the
tse
subgroup
open
click
the
green
new
project
button
fill
out
the
form
giving
the
project
name
required
and
description
optional
ensure
the
project
marked
private
now
the
project
has
been
successfully
created
and
appears
like
this
click
the
ssh
pop
change
https
scroll
down
see
the
command
line
instructions
for
using
this
project
let
assume
you
had
already
created
local
git
repository
using
the
lecture
notes
above
look
the
instructions
under
existing
git
repository
copy
the
git
remote
add
origin
command
you
see
there
your
terminal
window
and
the
directory
where
you
had
earlier
set
local
repository
paste
the
git
remote
add
origin
command
this
command
ties
your
local
repository
the
new
remote
you
created
gitlab
giving
this
relationship
the
name
origin
then
copy
and
paste
the
command
git
push
origin
master
this
pushes
your
local
repository
master
branch
the
remote
known
origin
enter
your
gitlab
username
and
password
back
the
gitlab
browser
window
let
explore
the
files
now
there
click
the
little
home
icon
the
left
side
then
the
little
files
icon
you
should
see
the
files
your
new
project
notice
below
that
renders
the
readme
file
nicely
suppose
the
first
thing
you
want
update
the
readme
file
you
edit
git
add
and
git
commit
now
git
status
shows
you
ready
push
the
remote
kotz
flume
labs
tree
cat
readme
this
code
now
gitlab
kotz
flume
labs
tree
git
status
branch
master
your
branch
date
with
origin
master
changes
not
staged
for
commit
use
git
add
file
update
what
will
committed
use
git
checkout
file
discard
changes
working
directory
modified
readme
changes
added
commit
use
git
add
and
git
commit
kotz
flume
labs
tree
git
add
readme
kotz
flume
labs
tree
git
commit
updated
readme
master
updated
readme
file
changed
insertions
kotz
flume
labs
tree
git
push
counting
objects
done
delta
compression
using
threads
compressing
objects
done
writing
objects
bytes
bytes
done
total
delta
reused
delta
https
dfkotz
gitlab
dartmouth
edu
dfkotz
binary
tree
git
master
master
kotz
flume
labs
tree
git
status
branch
master
your
branch
date
with
origin
master
nothing
commit
working
directory
clean
kotz
flume
labs
tree
jump
back
the
browser
and
hit
refresh
see
the
new
readme
cool
why
git
always
asking
for
password
because
must
authenticate
you
gitlab
you
use
the
https
style
urls
you
need
enter
your
gitlab
password
you
use
the
ssh
style
urls
you
need
enter
the
passphrase
you
gave
ssh
when
you
generated
the
keypair
now
recommend
that
you
use
ssh
style
urls
the
former
method
little
tricky
but
worth
the
effort
set
read
about
how
set
gitlab
for
ssh
activity
today
activity
each
group
sets
shared
repo
gitlab
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
searching
the
web
engs
labs
notes
reading
resources
examples
searching
the
web
the
next
series
labs
will
design
implement
and
test
command
line
web
search
tool
called
tiny
search
engine
tse
because
can
written
under
lines
student
written
code
about
lines
each
four
labs
today
begin
discuss
the
concepts
behind
web
search
and
the
top
level
design
tse
and
its
decomposition
into
three
major
components
crawler
indexer
and
query
this
lecture
discuss
some
the
foundational
issues
associated
with
searching
the
web
also
dicuss
the
overall
architectural
design
more
comprehensive
search
engine
than
tse
you
should
skim
this
classic
paper
about
web
search
engine
searching
the
web
arvind
arasu
junghoo
cho
hector
garcia
molina
andreas
paepcke
sriram
raghavan
stanford
university
acm
transactions
internet
technology
toit
volume
issue
august
this
paper
gives
insights
into
search
engine
design
you
can
skip
the
plots
and
deeper
research
material
but
your
best
understand
the
text
the
main
components
and
design
issues
search
engine
goals
plan
learn
the
following
from
today
lecture
how
does
search
engine
like
google
search
the
web
general
search
engine
architecture
urls
webpages
html
http
and
keywords
talking
the
department
webserver
using
http
searching
the
web
how
you
get
information
from
the
web
searching
the
web
something
every
day
with
ease
but
technically
challenging
implement
because
the
scale
the
web
and
because
pages
change
dramatically
different
rates
april
there
were
billion
publicly
available
webpages
the
indexed
web
according
one
estimate
just
looked
that
web
site
april
the
site
says
the
indexed
web
now
contains
least
billion
pages
even
that
number
likely
underestimate
because
many
organizations
have
lots
internal
webpages
that
aren
indexed
the
public
search
engines
get
information
about
hiking
new
hampshire
can
use
search
engine
such
google
information
retrieval
system
returns
list
links
urls
sites
that
have
the
keywords
specified
embedded
them
conveniently
the
search
engine
orders
ranks
the
links
the
most
relevant
pages
are
near
the
top
the
list
google
responded
query
seconds
with
matches
found
how
that
possible
how
does
google
search
more
than
billion
web
pages
half
second
surely
google
does
not
actually
search
those
pages
for
each
user
request
instead
looks
into
vast
index
the
web
built
earlier
given
new
search
term
checks
the
index
for
pages
known
have
the
word
hiking
and
again
for
those
with
the
phrase
new
hampshire
and
then
intersects
the
two
results
come
with
list
how
does
google
rank
the
pages
the
resulting
list
the
solution
actually
google
secret
sauce
the
page
rank
algorithm
developed
brin
and
page
when
they
were
grad
students
although
the
original
algorithm
was
published
google
continues
refine
and
tweak
and
keeps
the
details
secret
when
and
how
does
google
build
that
index
and
how
does
find
all
the
pages
the
web
google
servers
are
constantly
crawling
the
web
given
one
link
url
download
that
page
find
all
the
links
that
page
and
then
examine
those
pages
recursively
new
updated
pages
are
found
they
index
each
page
extracting
the
list
words
used
that
page
and
then
building
data
structure
that
maps
from
words
urls
later
search
query
broken
into
words
and
each
word
sought
the
index
returning
set
urls
where
that
word
appears
for
multi
word
query
they
intersect
the
sets
find
set
where
all
words
appear
then
they
apply
the
page
rank
algorithm
the
set
produce
ranked
list
april
google
website
said
its
index
filled
over
million
gigabytes
check
out
this
nice
video
from
google
explaining
how
search
engine
works
general
search
engine
architecture
arvind
search
engines
like
google
are
complex
sophisticated
highly
distributed
systems
below
reproduce
the
general
search
engine
architecture
discussed
searching
the
web
the
main
components
include
parallel
crawlers
crawler
control
when
and
where
crawl
page
repository
indexer
analysis
collection
data
structures
index
tables
structure
utility
and
query
engine
and
ranking
module
such
general
architecture
would
take
significant
amount
time
code
our
tse
will
implement
stripped
down
version
the
main
components
urls
html
and
keywords
some
terminology
url
short
for
uniform
resource
locator
used
specify
addresses
webpages
and
other
resources
the
web
example
http
www
dartmouth
edu
index
html
which
refers
the
http
network
protocol
the
www
dartmouth
edu
server
and
the
index
html
file
that
server
html
most
web
pages
are
written
hypertext
markup
language
html
for
quick
tutorial
html
see
this
introduction
html
html
file
text
file
with
htm
html
file
extension
html
pages
can
created
tools
simply
editor
like
emacs
you
will
not
need
write
any
html
for
this
course
tags
html
uses
tags
mark
the
text
for
example
this
text
would
bold
most
tags
are
enclosed
angle
brackets
like
and
most
come
matching
pairs
marking
the
beginning
and
ending
region
text
which
the
tag
applies
note
the
and
pair
are
interested
collecting
urls
from
html
files
the
html
tag
that
forms
link
and
references
url
called
anchor
for
short
the
tag
takes
parameters
most
importantly
the
href
parameter
href
http
www
dartmouth
edu
index
html
dartmouth
home
page
for
the
purpose
indexing
the
page
need
find
the
words
the
page
most
web
pages
most
the
content
outside
the
tags
because
the
tags
are
there
format
the
content
for
tinysearchengine
define
keywords
being
outside
tags
when
tinysearchengine
downloads
webpage
html
source
needs
parse
the
page
extract
urls
can
crawl
those
urls
and
identify
the
words
that
users
might
interested
running
queries
for
parsing
html
can
challenging
especially
because
many
pages
the
web
don
follow
the
html
standard
cleanly
will
provide
you
with
function
parse
the
html
feel
free
write
your
own
you
prefer
for
more
information
about
html
check
out
the
old
html
specification
the
brand
new
html
specification
talk
webserver
using
hypertext
transfer
protocol
http
the
hypertext
transfer
protocol
http
used
between
your
client
browser
and
the
server
transfer
html
files
http
itself
very
simple
stateless
request
response
protocol
that
get
its
reliable
underlying
transport
from
tcp
transmission
control
protocol
top
internet
protocol
take
learn
more
about
networking
the
basic
http
protocol
that
the
client
sends
request
called
get
and
the
server
responds
with
response
web
servers
listen
for
requests
the
well
known
tcp
port
have
first
connect
the
server
and
open
reliable
stream
host
www
dartmouth
edu
port
could
write
some
fancy
code
this
but
typical
unix
style
there
already
tool
can
use
telnet
program
that
simply
makes
tcp
connection
given
host
and
port
and
connects
our
terminal
keyboard
and
screen
that
connection
can
interactively
write
the
remote
server
listening
that
port
can
thus
type
http
get
request
hand
flume
telnet
www
dartmouth
edu
trying
connected
www
dartmouth
edu
escape
character
get
index
html
http
typed
this
host
www
dartmouth
edu
and
this
and
blank
line
http
date
wed
apr
gmt
server
apache
fedora
last
modified
wed
apr
gmt
etag
accept
ranges
bytes
content
length
connection
close
content
type
text
html
charset
utf
doctype
html
html
head
meta
charset
utf
meta
http
equiv
compatible
content
edge
meta
name
viewport
content
width
device
width
initial
scale
title
overview
title
meta
name
description
content
computer
science
you
will
learn
how
design
amp
build
large
reliable
maintainable
and
understandable
software
systems
the
process
you
will
learn
program
with
unix
development
tools
href
https
canvas
dartmouth
edu
courses
canvas
href
https
piazza
com
dartmouth
spring
cosc
home
piazza
href
schedule
pdf
schedule
href
http
www
dartmouth
edu
logistics
logistics
href
http
www
dartmouth
edu
lectures
lectures
href
http
www
dartmouth
edu
reading
reading
href
http
www
dartmouth
edu
examples
examples
href
http
www
dartmouth
edu
sections
sections
href
http
www
dartmouth
edu
labs
labs
try
yourself
make
sure
you
hit
carriage
return
twice
after
typing
host
www
dartmouth
edu
since
the
http
protocol
wants
empty
line
indicate
that
you
finished
the
web
server
responds
with
few
lines
http
syntax
the
first
line
reports
status
code
with
human
readable
equivalent
the
next
few
lines
provide
the
date
the
server
version
the
last
modified
date
for
the
file
returned
and
some
other
stuff
describing
the
content
html
after
blank
line
the
contents
the
file
requested
the
home
page
snipped
out
most
but
you
can
see
the
anchor
tags
that
appear
the
top
every
page
notice
the
urls
for
canvas
piazza
and
links
other
folders
and
files
within
the
folder
you
happen
have
access
the
files
used
this
web
server
this
server
configured
rewrite
urls
the
form
user
pathnames
the
form
user
public
html
you
ssh
flume
any
the
unix
machines
you
can
public
html
and
poke
around
the
html
files
there
most
web
pages
will
include
many
links
and
sometimes
will
include
the
same
link
twice
furthermore
when
exploring
set
web
pages
those
web
pages
often
link
each
other
for
example
all
the
pages
link
the
home
and
that
page
links
directly
indirectly
all
those
pages
the
web
directed
graph
not
tree
any
effort
crawl
the
web
therefore
must
use
something
like
breadth
first
depth
first
search
explore
the
graph
avoiding
the
effort
and
infinite
loops
that
occur
when
encountering
link
already
found
earlier
the
crawl
our
tinysearchengine
will
rely
curl
and
the
libcurl
library
retrieve
webpages
can
experiment
bit
using
the
command
line
version
curl
let
use
curl
download
the
homepage
count
the
number
urls
crude
approach
would
pipe
the
output
curl
the
html
from
the
web
page
into
grep
and
then
count
the
lines
this
approach
will
under
count
there
are
multiple
href
links
the
same
line
there
are
least
links
that
page
flume
curl
http
www
dartmouth
edu
grep
href
activity
today
activity
your
group
will
start
envisioning
design
for
the
tse
crawler
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
tse
crawler
design
and
implementation
engs
labs
notes
reading
resources
examples
tse
crawler
design
and
implementation
goals
understand
the
specifications
for
the
tiny
search
engine
tse
develop
implementation
plan
for
the
tse
crawler
demonstrate
the
execution
one
crawler
solution
first
terminal
script
shows
short
run
crawler
over
the
home
directory
second
terminal
script
shows
some
short
runs
crawler
over
the
small
letters
playground
then
run
over
the
wikipedia
playground
eventually
killed
the
maxdepth
crawl
because
takes
long
time
finish
specifications
good
software
implementation
requires
good
software
design
and
good
software
design
must
based
clear
set
requirements
think
about
these
specifications
sort
contract
between
the
programmer
who
writes
the
code
and
the
customer
the
ultimate
user
the
software
thus
need
three
specs
requirements
spec
specifies
what
the
software
must
design
spec
specifies
the
structure
the
software
language
independent
machine
dependent
way
implementation
spec
specifies
the
language
dependent
machine
dependent
details
the
implementation
take
closer
look
the
design
process
the
next
lecture
for
today
let
apply
this
approach
the
tse
tiny
search
engine
tse
our
tiny
search
engine
tse
design
inspired
the
material
the
paper
searching
the
web
arvind
arasu
junghoo
cho
hector
garcia
molina
andreas
paepcke
and
sriram
raghavan
stanford
university
acm
transactions
internet
technology
toit
volume
issue
august
tse
requirements
spec
the
tiny
search
engine
tse
shall
consist
three
subsystems
crawler
which
crawls
the
web
from
given
seed
given
maxdepth
and
caches
the
content
the
pages
finds
one
page
per
file
given
directory
indexer
which
reads
files
from
the
given
directory
builds
index
that
maps
from
words
pages
urls
and
writes
that
index
given
file
querier
which
reads
the
index
from
given
file
and
query
expressed
set
words
optionally
combined
and
and
outputs
ranked
list
pages
urls
which
the
given
combination
words
appear
each
subsystem
standalone
program
executed
from
the
command
line
but
they
inter
connect
through
files
the
file
system
spec
document
write
shall
mean
must
look
deeper
the
requirements
for
the
each
subsystem
later
first
let
the
next
level
the
overall
tse
the
design
spec
tse
design
spec
the
overall
architecture
presented
below
shows
the
modular
decomposition
the
system
the
above
diagram
consistent
with
the
requirements
spec
can
clearly
see
three
sub
systems
their
interconnection
through
files
and
the
user
interface
for
submitting
queries
the
querier
the
querier
subsystem
has
internal
ranking
module
which
anticipate
might
separate
from
the
query
processor
module
look
more
closely
when
come
the
querier
design
next
describe
each
sub
system
and
its
high
level
design
the
crawler
crawls
website
and
retrieves
webpages
starting
with
specified
url
parses
the
initial
webpage
extracts
any
embedded
href
urls
and
retrieves
those
pages
and
crawls
the
pages
found
those
urls
but
limiting
itself
maxdepth
hops
from
the
seed
url
when
the
crawler
process
complete
the
indexing
the
collected
documents
can
begin
the
indexer
extracts
all
the
keywords
for
each
stored
webpage
and
creates
lookup
table
that
maps
each
word
found
all
the
documents
webpages
where
the
word
was
found
the
query
engine
responds
requests
queries
from
users
the
query
processor
module
loads
the
index
and
searches
for
pages
that
include
the
search
keywords
because
there
may
many
hits
need
ranking
module
rank
the
results
high
low
number
instances
keyword
page
tse
crawler
specs
look
deeper
the
requirements
for
the
indexer
and
querier
later
right
now
let
focus
the
crawler
requirements
spec
design
spec
implementation
spec
the
design
spec
describes
abstractions
abstract
data
structures
and
pseudocode
the
same
design
could
implemented
java
another
language
the
implementation
spec
gets
more
specific
language
operating
system
and
hardware
dependent
the
implementation
spec
includes
many
all
these
topics
detailed
pseudo
code
for
each
the
objects
components
functions
definition
detailed
apis
interfaces
function
prototypes
and
their
parameters
data
structures
struct
names
and
members
security
and
privacy
properties
error
handling
and
recovery
resource
management
persistant
storage
files
database
etc
the
lab
assignment
written
like
implementation
spec
right
down
the
specific
function
prototypes
you
need
write
the
implementation
spec
for
the
crawler
lab
demonstration
crawler
execution
and
output
below
snippet
when
the
program
starts
crawl
the
website
depth
the
crawler
prints
status
information
goes
along
note
you
might
consider
covering
this
debugging
print
out
code
ifdef
block
that
can
triggered
compile
time
switch
see
the
lecture
extra
about
this
trick
crawler
http
old
www
dartmouth
edu
index
html
data
fetched
http
old
www
dartmouth
edu
index
html
saved
http
old
www
dartmouth
edu
index
html
scanning
http
old
www
dartmouth
edu
index
html
found
http
old
www
dartmouth
edu
added
http
old
www
dartmouth
edu
found
https
canvas
dartmouth
edu
courses
ignextrn
https
canvas
dartmouth
edu
courses
found
https
piazza
com
dartmouth
spring
cosc
home
ignextrn
https
piazza
com
dartmouth
spring
cosc
home
found
http
old
www
dartmouth
edu
schedule
pdf
ignextrn
http
old
www
dartmouth
edu
schedule
pdf
found
http
www
dartmouth
edu
logistics
ignextrn
http
www
dartmouth
edu
logistics
found
http
www
dartmouth
edu
lectures
ignextrn
http
www
dartmouth
edu
lectures
found
http
www
dartmouth
edu
reading
ignextrn
http
www
dartmouth
edu
reading
found
http
www
dartmouth
edu
examples
ignextrn
http
www
dartmouth
edu
examples
found
http
www
dartmouth
edu
sections
ignextrn
http
www
dartmouth
edu
sections
found
http
www
dartmouth
edu
labs
ignextrn
http
www
dartmouth
edu
labs
found
http
www
dartmouth
edu
labs
project
ignextrn
http
www
dartmouth
edu
labs
project
found
https
gitlab
dartmouth
edu
ignextrn
https
gitlab
dartmouth
edu
found
http
www
dartmouth
edu
resources
ignextrn
http
www
dartmouth
edu
resources
found
http
old
www
dartmouth
edu
dfk
added
http
old
www
dartmouth
edu
dfk
fetched
http
old
www
dartmouth
edu
dfk
saved
http
old
www
dartmouth
edu
dfk
fetched
http
old
www
dartmouth
edu
saved
http
old
www
dartmouth
edu
notice
how
printed
the
depth
the
current
crawl
left
then
indented
slightly
based
the
current
depth
then
printed
single
word
meant
indicate
what
being
done
then
printed
the
url
ensuring
consistent
format
and
choosing
simple
unique
word
for
each
type
line
can
post
process
the
output
with
grep
awk
and
forth
enabling
run
various
checks
the
output
the
crawler
much
better
than
mish
mash
arbitrary
output
formats
make
this
easy
wrote
simple
function
print
those
lines
log
one
word
chars
about
given
url
inline
static
void
logr
const
char
word
const
int
depth
const
char
url
printf
depth
depth
word
url
thus
have
just
one
printf
call
and
want
tweak
the
format
just
need
edit
one
place
and
not
every
log
type
printf
the
code
notice
the
inline
modifier
this
means
that
allowed
compile
this
code
line
where
the
function
call
occurs
rather
than
compiling
code
that
actually
jumps
function
and
returns
syntactically
every
way
just
like
function
but
more
efficient
great
for
tiny
functions
like
this
one
where
worth
duplicating
the
code
making
the
executable
bigger
save
time
making
the
program
run
slightly
faster
anyway
strategic
points
the
code
make
call
like
this
one
logr
fetched
page
depth
page
url
contents
pagedirectory
after
crawler
has
run
for
each
url
crawled
the
program
creates
file
and
places
the
file
the
url
and
filename
followed
all
the
contents
the
webpage
but
for
maxdepth
this
example
there
are
only
few
webpages
crawled
and
files
created
below
peek
the
files
created
during
the
above
crawl
notice
how
each
page
starts
with
the
url
then
number
the
depth
that
page
during
the
crawl
then
the
contents
the
page
here
printed
only
the
first
line
the
content
head
http
old
www
dartmouth
edu
index
html
doctype
html
head
http
old
www
dartmouth
edu
dfk
doctype
html
public
dtd
html
transitional
http
www
org
html
loose
dtd
head
http
old
www
dartmouth
edu
doctype
html
organization
the
tse
code
let
take
look
the
structure
the
tse
solution
you
can
see
what
you
aiming
for
directory
structure
tse
comprises
six
subdirectories
libcs
library
code
provide
common
library
code
you
write
crawler
the
crawler
indexer
the
indexer
querier
the
querier
data
with
subdirectories
where
the
crawler
and
indexer
can
write
files
and
the
querier
can
read
files
top
level
gitignore
file
excludes
data
from
the
repository
because
the
data
files
are
big
changing
often
and
don
deserve
saved
the
full
tree
looks
like
this
common
index
index
makefile
pagedir
pagedir
word
word
crawler
crawler
crawlertest
makefile
readme
indexer
indexer
indexsort
awk
indexsort
indextest
indextest
makefile
readme
libcs
bag
bag
counters
counters
file
file
file
hashtable
hashtable
jhash
jhash
makefile
memory
memory
memory
readme
set
set
webpage
webpage
fetch
webpage
webpage
internal
webpage
makefile
querier
fuzzquery
makefile
querier
readme
testqueries
readme
source
files
crawler
indexer
and
querier
each
consist
just
one
file
they
share
some
common
code
which
keep
the
common
directory
pagedir
suite
functions
help
the
crawler
write
pages
the
pagedirectory
and
help
the
indexer
read
them
back
index
suite
functions
that
implement
the
index
data
structure
this
module
includes
functions
write
index
file
used
indexer
and
read
index
from
file
used
querier
word
function
normalizeword
used
both
the
indexer
and
the
querier
each
the
program
directories
crawler
indexer
querier
include
few
files
related
testing
well
you
recognize
the
lab
data
structures
they
all
the
libcs
library
note
the
flatter
organization
there
not
separate
subdirectory
with
makefile
test
code
for
each
data
structure
makefiles
the
starter
kit
includes
makefile
the
top
level
and
another
build
the
libcs
library
the
top
level
makefile
recursively
calls
make
each
the
source
directories
the
libcs
makefile
demonstrates
how
you
can
build
library
this
case
libcs
from
collection
object
files
study
this
makefile
because
you
need
write
something
similar
for
your
common
directory
you
can
then
link
these
libraries
into
your
other
programs
without
having
list
all
the
individual
files
the
commandline
for
example
when
build
crawler
make
runs
commands
follows
make
crawler
gcc
wall
pedantic
std
ggdb
dapptest
libcs
common
crawler
crawler
gcc
wall
pedantic
std
ggdb
dapptest
libcs
common
crawler
common
common
libcs
libcs
lcurl
crawler
the
crawler
makefile
written
good
style
with
appropriate
use
variables
the
rule
that
causes
make
run
the
above
commands
actually
much
shorter
crawler
crawler
llibs
cflags
libs
work
more
with
makefiles
upcoming
classes
activity
today
activity
your
group
will
run
the
crawler
over
set
web
pages
and
try
understand
why
takes
the
steps
does
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
software
design
makefiles
engs
labs
notes
reading
resources
examples
software
design
makefiles
goals
today
have
two
part
lecture
software
design
methodology
more
about
makefiles
please
read
the
notes
there
more
say
than
can
say
class
activity
for
today
activity
will
play
with
the
preprocessor
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
bugs
amp
testing
engs
labs
notes
reading
resources
examples
bugs
testing
goals
this
lecture
talk
about
bugs
and
introduce
the
art
testing
types
bugs
the
difference
between
debugging
and
testing
when
and
why
test
various
approaches
testing
but
first
let
talk
about
bugs
bugs
from
fighting
bugs
remove
retry
replicate
and
rejuvenate
grottke
and
trivedi
bohr
bugs
most
bugs
are
reproducible
they
always
occur
under
the
same
set
circumstances
these
have
been
described
bohr
bugs
reference
the
simple
atomic
model
niels
bohr
that
brought
consistency
and
predictability
the
study
physics
the
atomic
level
mandelbugs
however
bugs
don
always
cooperate
common
experience
have
bugs
disappear
every
time
you
try
show
someone
else
only
return
later
after
the
other
person
has
left
there
could
many
explanations
amp
mentioned
several
varying
error
propagation
delay
and
variations
systems
outside
your
software
such
variations
the
compiler
and
its
configuration
user
account
configuration
operating
system
and
its
configuration
network
connection
unreliability
said
connection
analog
sensor
hardware
which
sometime
has
non
deterministic
behavior
variations
the
physical
environment
for
software
that
senses
interacts
with
the
real
world
bugs
that
don
appear
the
result
logical
chain
events
are
sometimes
called
mandelbugs
after
benoit
mandelbrot
leading
mathematician
known
for
his
work
fractals
heisenbugs
subset
mandelbugs
are
the
heisenbugs
named
after
werner
heisenberg
uncertainty
principle
these
also
result
chaotic
unpredictable
behavior
but
they
are
little
tougher
figure
out
because
their
behavior
can
change
when
you
try
examine
them
prime
examples
heisenbugs
are
some
timing
problems
and
others
where
the
very
act
probing
the
bug
can
introduce
side
effects
bit
rot
finally
there
are
aging
related
bugs
also
referred
bit
rot
systems
that
run
for
long
time
can
eventually
suffer
failure
due
these
slow
effect
bugs
they
are
usually
bohrbugs
since
they
are
repeatable
but
they
are
seldom
found
testing
due
the
long
duration
before
they
cause
trouble
example
slow
memory
leaks
these
are
the
bugs
that
are
most
often
handled
establishing
policies
for
schedule
which
applications
computers
are
periodically
restarted
even
when
all
seems
well
this
practice
doesn
come
without
cost
especially
you
think
the
personnel
time
required
and
the
inconvenience
system
users
customers
another
form
bit
rot
occurs
software
that
needs
live
for
years
spanning
many
generations
the
underlying
software
and
hardware
program
that
compiles
today
may
not
compile
next
year
because
changes
the
include
files
libraries
and
even
the
compiler
even
compiles
may
not
run
properly
because
changes
the
underlying
operating
system
its
configuration
changes
the
hardware
the
system
has
migrated
new
server
changes
the
surrounding
environment
such
remote
servers
which
the
software
needs
connect
three
motivational
anecdotes
proven
program
found
have
bug
years
later
adapted
from
joshua
bloch
blog
jon
bentley
author
programming
pearls
and
other
books
observed
that
relatively
simple
piece
code
for
binary
sort
that
had
proven
correct
during
lecture
cmu
had
bug
that
wasn
discovered
until
years
later
here
the
code
int
binarysearch
int
int
length
int
key
int
low
mid
midval
int
high
length
while
low
high
mid
low
high
midval
mid
midval
key
low
mid
else
midval
key
high
mid
else
return
mid
key
found
return
low
key
not
found
the
bug
was
found
line
mid
low
high
this
looks
correct
since
purpose
find
the
average
low
and
high
rounded
down
the
nearest
integer
however
the
sum
low
and
high
exceed
the
maximum
signed
int
value
some
architectures
the
sum
goes
negative
and
the
resulting
value
for
mid
also
how
would
you
fix
the
following
would
work
mid
low
high
low
missile
system
looking
the
wrong
place
from
the
february
gao
report
the
house
representatives
subcommittee
investigations
and
oversight
committee
science
space
and
technology
february
patriot
missile
defense
system
operating
dhahran
saudi
arabia
during
operation
desert
storm
failed
track
and
intercept
incoming
scud
this
scud
subsequently
hit
army
barracks
killing
americans
the
patriot
battery
dhahran
failed
track
and
intercept
the
scud
missile
because
software
problem
the
system
weapons
control
computer
this
problem
led
inaccurate
tracking
calculation
that
became
worse
the
longer
the
system
operated
the
time
the
incident
the
battery
had
been
operating
continuously
for
over
hours
then
the
inaccuracy
was
serious
enough
cause
the
system
look
the
wrong
place
for
the
incoming
scud
the
patriot
had
never
before
been
used
defend
against
scud
missiles
nor
was
expected
operate
continuously
for
long
periods
time
two
weeks
before
the
incident
army
officials
received
israeli
data
indicating
some
loss
accuracy
after
the
system
had
been
running
for
consecutive
hours
consequently
army
officials
modified
the
software
improve
the
system
accuracy
however
the
modified
software
did
not
reach
dhahran
until
february
the
day
after
the
scud
incident
the
problem
was
that
order
predict
where
incoming
missile
would
the
system
needed
its
velocity
and
the
time
expressed
real
numbers
the
calculations
unfortunately
the
time
was
maintained
integer
representing
the
number
tenths
second
since
the
system
began
operating
the
problem
was
that
the
longer
was
running
the
larger
the
error
would
when
converting
the
integer
time
into
real
number
thus
the
patriot
was
looking
the
wrong
place
apple
ssl
bug
example
sometimes
software
updates
add
new
bugs
that
wouldn
caught
without
running
all
the
tests
again
here
example
from
february
apple
macos
and
ios
where
hackers
could
trick
those
systems
into
accepting
ssl
tls
certificates
that
should
rejected
hashout
data
hashes
ssl
digest
len
hashout
length
ssl
sha
digest
len
err
sslfreebuffer
amp
hashctx
goto
fail
err
readyhash
amp
sslhashsha
amp
hashctx
goto
fail
err
sslhashsha
update
amp
hashctx
amp
clientrandom
goto
fail
err
sslhashsha
update
amp
hashctx
amp
serverrandom
goto
fail
err
sslhashsha
update
amp
hashctx
amp
signedparams
goto
fail
goto
fail
mistake
this
line
should
not
here
err
sslhashsha
final
amp
hashctx
amp
hashout
goto
fail
err
sslrawverify
yes
does
have
goto
statement
works
expected
providing
immediate
transfer
the
specified
label
here
the
programmer
verifying
the
certificate
any
the
checks
fail
the
err
variable
set
non
zero
and
the
code
exits
the
failure
handler
unfortunately
the
programmer
inserted
two
goto
fail
statements
instead
just
one
result
even
err
the
code
transfers
the
fail
section
that
returned
with
return
code
err
which
err
means
success
means
the
certificate
reported
valid
and
ultimately
accepted
this
bug
could
allow
website
spoofing
the
acceptance
bogus
certificate
containing
mismatched
private
key
this
bug
was
overlooked
because
the
second
goto
indented
but
not
part
the
statement
proper
use
style
putting
brackets
around
every
code
block
would
have
prevented
this
bug
from
manifesting
itself
loss
the
mars
climate
orbiter
and
mars
polar
lander
from
wikipedia
nasa
mars
polar
lander
was
destroyed
because
its
flight
software
mistook
vibrations
due
atmospheric
turbulence
for
evidence
that
the
vehicle
had
landed
and
shut
off
the
engines
meters
from
the
martian
surface
its
sister
spacecraft
mars
climate
orbiter
was
also
destroyed
due
software
the
ground
generating
commands
pound
force
lbf
while
the
orbiter
expected
newtons
more
examples
historical
software
bugs
with
extreme
consequences
from
blog
list
software
bugs
wikipedia
testing
testing
can
demonstrate
the
presence
bugs
but
not
their
absence
edsger
dijkstra
this
quote
good
keep
mind
when
you
are
developing
code
what
the
difference
between
debugging
and
testing
you
debug
when
you
know
have
identified
problems
your
code
testing
the
art
systematically
trying
break
code
which
you
think
hope
bug
free
test
throughout
the
software
life
cycle
because
typically
much
less
expensive
fix
bug
earlier
the
software
life
than
later
these
lectures
are
strongly
influenced
the
practice
programming
brian
kernighan
and
rob
pike
outstanding
book
that
will
advance
your
knowledge
good
programming
practices
the
notes
use
number
programming
examples
from
their
chapter
testing
kinds
testing
there
are
many
kinds
testing
each
with
its
own
purpose
unit
testing
the
goal
unit
testing
verify
that
each
functional
unit
the
system
working
properly
written
from
the
unit
developer
perspective
and
aims
test
the
internal
workings
the
unit
this
testing
isn
done
well
all
the
subsequent
testing
more
painful
slow
and
sometimes
meaningless
functional
testing
the
goal
functional
testing
verify
that
the
unit
module
sub
system
system
doing
what
its
user
wants
for
system
the
user
the
customer
for
unit
the
user
may
developer
other
components
that
depend
this
unit
this
testing
usually
requires
scaffolding
test
harness
exercise
the
device
unit
under
test
unit
tests
tell
developer
that
the
code
doing
things
right
functional
tests
tell
developer
that
the
code
doing
the
right
things
jeff
canna
testing
fun
really
glass
box
testing
and
black
box
testing
these
refer
two
types
unit
testing
functional
testing
glass
box
testing
you
can
peek
inside
the
thing
being
tested
black
box
testing
you
can
only
access
the
thing
public
api
you
can
send
the
box
input
and
see
only
what
comes
out
the
box
both
approaches
have
value
but
the
former
only
useful
you
have
the
source
code
the
thing
being
tested
unit
testing
typically
glass
box
whereas
functional
testing
usually
black
box
integration
testing
after
unit
testing
the
integration
test
verifies
that
the
units
modules
can
communicate
properly
with
each
others
interfaces
defined
the
units
modules
are
properly
implemented
and
used
special
channels
connections
should
used
even
they
make
things
run
faster
system
testing
also
known
big
bang
testing
this
where
you
put
the
whole
thing
together
and
run
tests
ensure
that
meets
the
stated
requirements
without
causing
any
unexpected
side
effects
you
skip
over
the
integration
tests
you
may
encounter
serious
problems
system
tests
problems
that
may
very
expensive
fix
consider
this
example
unit
tests
without
integration
test
regression
testing
regression
testing
automated
means
running
and
running
unit
tests
integration
tests
and
sometimes
system
tests
each
time
you
prepare
new
release
for
unit
and
integration
tests
each
time
you
git
push
indeed
some
source
code
control
systems
automatically
run
unit
and
integration
tests
before
commit
accepted
rejecting
the
commit
any
tests
fail
usability
testing
this
testing
with
real
users
not
other
programmers
engineers
and
not
friends
and
neighbors
but
the
real
users
when
this
isn
possible
you
have
really
work
hard
find
objective
testers
who
will
act
like
the
end
users
people
who
have
can
simulate
the
same
level
experience
biases
and
past
experience
are
the
kinds
usability
testers
you
want
some
products
you
must
also
conduct
accessability
testing
determine
whether
your
software
accessible
for
people
with
various
disabilities
security
testing
security
tests
verify
the
security
the
system
ensure
that
sensitive
data
are
always
encrypted
passwords
and
credit
card
numbers
are
masked
and
sensitive
data
securely
erased
immediately
after
use
sometimes
the
team
hires
outside
testers
conduct
penetration
tests
which
the
tester
tries
break
the
system
leak
sensitive
information
unfortunately
one
can
never
prove
that
system
secure
that
has
bugs
that
lead
the
failure
security
privacy
properties
remember
dijkstra
quote
about
testing
one
can
only
demonstrate
the
presence
bugs
not
their
absence
this
especially
true
for
security
performance
testing
most
software
needs
perform
well
according
one
more
metrics
whether
implicit
explict
performance
metrics
include
speed
how
long
does
take
complete
task
throughput
how
many
tasks
completed
per
second
memory
code
size
stack
size
heap
usage
network
bandwidth
energy
battery
drain
cost
dollars
such
when
using
cloud
resources
billed
usage
performance
testing
subjects
the
software
various
loads
measuring
the
relevant
metrics
determine
whether
the
system
performs
within
acceptable
bounds
acceptance
testing
the
ultimate
test
whether
the
customer
accepts
your
product
most
the
time
these
tests
are
similar
the
system
tests
however
you
will
occasionly
encounter
new
previously
unstated
requirements
during
acceptance
testing
finally
the
most
important
tip
all
testing
from
the
pragmatic
programmer
find
bugs
once
once
you
one
your
testers
even
customer
find
bug
that
should
the
last
time
human
finds
that
bug
once
identified
and
fixed
your
automated
tests
should
extended
check
for
that
same
bug
every
time
they
are
run
finding
bug
during
regression
testing
lot
better
than
how
was
found
the
first
time
tips
for
testing
once
again
the
difference
between
debugging
and
testing
testing
determined
systematic
attempt
break
program
that
you
think
should
working
discussed
above
tools
and
test
harness
can
automate
this
process
debugging
what
you
when
you
know
that
the
program
crashes
segfaults
fails
answers
queries
incorrecly
underperforms
runs
slowly
acts
inconsistently
intermittently
fails
certain
conditions
these
are
all
bugs
that
testing
can
find
better
find
them
and
fix
them
test
early
test
often
test
automatically
that
pragmatic
programmer
tip
should
begin
testing
soon
have
something
test
makefile
parsing
arguments
initialization
scaffolding
first
units
the
sooner
you
find
your
bugs
the
cheaper
will
terms
your
time
others
time
and
downstream
support
costs
pragmatic
programmer
tip
the
coding
ain
done
til
all
the
tests
run
furthermore
code
that
isn
tested
does
not
work
code
that
isn
regression
tested
eventually
stops
working
code
that
isn
automatically
regression
tested
prove
works
does
not
work
thus
you
should
build
automated
testing
code
unit
tests
makefile
rules
shell
scripts
test
data
from
the
very
beginning
write
bug
free
code
testing
waste
time
many
people
have
the
attitude
that
testing
code
waste
time
and
boring
why
fred
brooks
said
all
programmers
are
optimists
consider
the
software
lifecycle
discussed
class
requirements
design
coding
testing
debugging
integration
and
delivery
professional
programmers
will
tell
you
that
testing
and
debugging
take
the
largest
chunk
time
thus
smart
develop
tools
automate
the
testing
code
perhaps
the
most
important
tools
are
for
regression
testing
which
systematically
retest
the
code
periodically
each
those
words
important
retest
they
test
older
parts
the
code
even
you
develop
new
parts
the
code
just
case
your
new
code
broke
the
old
code
systematic
they
run
automatically
through
large
number
tests
validating
the
results
each
test
neither
carelessness
nor
laziness
causes
you
overlook
important
tests
periodic
they
run
critical
points
the
development
process
certainly
right
before
new
release
but
many
organizations
they
run
part
nightly
build
that
compiles
and
tests
the
entire
system
and
all
its
units
woe
the
programmer
who
breaks
the
nightly
build
all
the
regression
tests
pass
then
you
have
some
confidence
that
your
new
code
did
not
introduce
additional
problems
more
accurate
statement
might
the
changes
didn
reintroduce
any
the
bugs
that
already
knew
might
exist
write
the
unit
test
code
first
and
keep
with
the
object
functions
jeff
canna
observed
best
write
the
test
code
before
you
write
the
real
code
this
ensures
that
you
paying
attention
the
specifications
first
and
not
just
leaping
into
the
code
when
writing
these
unit
tests
try
avoid
any
testing
dependence
things
outside
the
unit
aim
produce
unit
test
for
every
function
method
that
some
other
code
user
will
invoke
test
you
write
code
the
earlier
you
find
problem
with
your
code
the
better
will
save
significant
time
and
your
company
money
you
will
also
get
respect
from
other
programmers
expect
most
you
sit
the
terminal
and
hack
the
code
reveal
and
fix
bugs
you
hack
some
printfs
and
run
your
code
again
iterating
hundreds
times
this
brute
force
method
dumb
slow
and
error
prone
you
get
respect
industry
for
this
approach
read
your
code
think
like
computer
and
write
test
code
you
write
the
real
code
use
idioms
and
consistent
when
you
write
code
you
already
know
many
idioms
even
haven
always
labeled
them
that
way
there
are
many
ways
write
simple
loop
example
while
array
example
for
array
example
for
array
any
human
language
has
idioms
that
conventional
ways
that
experienced
programmers
write
common
pieces
code
idioms
aid
understanding
because
they
are
immediately
recognizable
and
any
errors
their
use
also
quickly
discernible
all
the
loops
above
would
work
but
they
not
follow
the
idiom
for
such
loops
the
idiomatic
for
loop
idiomatic
form
for
array
being
consistent
when
programming
will
help
enormously
for
example
you
are
use
writing
idiomatic
code
then
when
you
see
piece
code
that
not
idiomatic
you
should
stop
and
take
close
look
that
code
maybe
boundary
problem
more
likely
code
written
the
same
way
each
time
then
when
you
see
code
that
not
idiomatic
either
suggests
poor
code
some
genuine
difference
exists
that
the
idiom
does
not
cover
either
way
take
second
close
look
convince
yourself
its
one
the
other
here
are
some
more
examples
idioms
that
you
should
familiar
with
infinite
loop
idioms
for
while
malloc
string
copy
idiom
char
newp
malloc
strlen
buf
newp
null
strcpy
newp
buf
else
handle
the
malloc
error
copying
characters
from
stdin
stdout
until
end
file
while
getchar
eof
putchar
traversal
null
terminated
string
for
char
string
something
with
write
idioms
much
possible
makes
easier
spot
bugs
and
harder
create
them
test
code
its
boundaries
what
follows
use
series
code
snippets
from
illustrate
how
code
remove
boundary
bugs
those
that
appear
the
boundary
cases
loop
function
sometimes
called
edge
cases
boundary
testing
assumes
you
test
small
snippet
code
time
sort
micro
testing
code
sequences
the
examples
below
not
use
idioms
and
are
poorly
written
cater
for
boundary
bugs
every
time
you
write
loop
verify
the
boundary
cases
ensure
the
execution
goes
through
the
loop
the
correct
number
times
for
example
the
code
below
probe
the
following
boundaries
empty
input
single
input
character
exactly
full
array
but
could
malloc
buffer
consider
the
following
code
snippet
from
boundary
test
empty
line
input
with
only
newline
read
characters
from
stdin
into
string
int
char
max
for
getchar
amp
amp
max
looking
this
code
the
first
thing
that
should
strike
that
not
idiom
that
should
make
look
very
closely
the
loop
logic
particularly
the
loop
conditional
logic
maybe
after
studying
the
code
and
thinking
about
characters
being
input
convince
ourselves
that
the
code
non
idiomatic
but
works
now
start
test
boundaries
consider
the
case
where
the
user
simply
types
return
the
resulting
code
would
terminate
immediately
the
first
iteration
with
still
set
zero
outside
the
loop
the
assignment
statement
will
write
which
before
the
start
the
array
not
good
idea
boundary
test
empty
line
input
with
only
eof
character
the
smart
thing
rewrite
this
convoluted
loop
idiom
and
solve
the
problem
for
example
for
max
note
switch
the
idiom
getchar
break
inspecting
the
code
above
can
easily
see
that
the
previous
boundary
problem
solved
with
the
new
idiomatic
code
handles
the
case
when
the
input
solely
newline
beautifully
mentally
compute
through
reading
characters
see
also
works
for
example
works
looks
good
but
what
get
empty
line
and
the
first
character
eof
breaks
another
pesky
bug
our
code
someone
typing
control
eof
would
not
unlikely
occurrence
let
fix
this
boundary
bug
for
max
getchar
eof
break
that
works
nice
piece
code
now
looks
like
are
done
are
you
sure
there
are
other
boundary
problems
that
could
lurk
here
what
happens
the
array
nearly
full
does
work
what
happens
the
array
exactly
full
over
full
what
happens
the
array
full
and
then
followed
newline
are
these
boundary
conditions
catered
for
will
leave
you
determine
the
answer
that
question
you
get
the
idea
bugs
lurk
boundaries
conversely
code
works
boundaries
likely
work
elsewhere
break
building
blocks
purpose
consider
one
your
important
building
block
functions
now
break
have
still
operate
but
just
produce
goofy
results
for
example
our
tse
programs
suppose
the
hash
function
always
returned
the
same
hash
value
what
would
your
program
would
run
perhaps
more
slowly
would
crash
many
you
use
the
count
malloc
function
help
track
the
balance
malloc
and
free
calls
you
use
them
for
every
memory
allocation
and
free
they
are
great
place
insert
debugging
code
and
breakpoints
they
are
also
great
place
for
testing
for
example
you
could
cause
cause
out
memory
situation
after
some
number
calls
suggested
kernighan
and
pike
usage
example
gcc
dmemorytestlimit
void
count
malloc
size
size
ifdef
memorytestlimit
nmalloc
memorytestlimit
return
null
fake
out
memory
condition
endif
void
ptr
malloc
size
ptr
null
nmalloc
return
ptr
test
pre
and
post
conditions
always
good
idea
test
for
pre
and
post
conditions
pre
conditions
are
those
you
expect
true
before
some
block
code
post
conditions
are
those
you
expect
true
after
some
block
code
executes
for
example
have
already
used
defensive
program
check
input
values
are
with
range
example
pre
condition
testing
let
look
another
simple
example
out
that
computes
the
average
elements
array
closer
inspection
the
code
reveals
that
there
problem
less
than
equal
float
avg
float
int
float
sum
for
int
sum
return
sum
natural
question
what
someone
calls
avg
with
array
zero
elements
does
not
make
much
sense
but
average
does
should
our
code
catch
the
division
zero
perhaps
with
assert
abort
complain
silent
one
reasonable
approach
just
return
the
average
less
than
equal
zero
while
the
code
idiomatic
style
need
tweak
test
pre
condition
shown
below
note
return
sum
double
avg
double
int
return
float
sum
for
int
sum
return
sum
use
assert
provides
assertion
facility
assert
useful
for
pre
and
post
condition
testing
asserts
are
usually
used
for
unexpected
failure
where
there
clean
way
recover
the
logic
control
for
example
our
above
avg
function
could
include
different
solution
using
the
assert
function
float
avg
float
int
assert
float
sum
for
int
sum
return
sum
the
assertion
fact
violated
will
cause
abort
and
standard
message
printed
out
assertion
failed
file
avgtest
line
abort
crash
assertions
should
used
only
for
testing
this
should
never
happen
kinds
conditions
other
errors
especially
those
caused
the
user
should
handled
more
gracefully
wrote
own
assert
function
for
use
most
tse
code
void
assertp
void
char
message
null
fprintf
stderr
malloc
failed
message
exit
return
notice
that
acts
like
pass
through
function
when
all
well
the
pointer
coming
from
malloc
returned
assertp
and
saved
the
variable
that
point
assured
non
null
when
assertp
receives
null
pointer
prints
message
stderr
and
exits
use
the
top
most
functions
verify
that
all
inbound
pointers
are
not
null
where
null
not
valid
expected
assertp
page
page
save
gets
null
page
assertp
page
url
page
save
gets
null
page
url
assertp
page
html
page
save
gets
null
page
html
assertp
pagedirectory
page
save
gets
null
pagedirectory
test
for
the
unexpected
aka
defensive
programming
your
crawler
and
indexer
uses
defensive
programming
for
checking
that
the
input
arguments
are
logically
correct
that
path
actually
existed
but
useful
technique
when
coding
expect
the
unexpected
code
for
the
unexpected
adding
checks
for
avg
example
another
below
grade
grade
can
happen
dartmouth
letter
else
grade
letter
else
other
examples
include
out
range
subscripts
null
pointers
divide
zero
this
especially
important
for
physical
systems
the
controlling
software
must
aware
the
limitations
the
physical
system
otherwise
seeming
valid
perhaps
unusual
software
interactions
could
lead
disaster
see
this
video
the
effect
some
process
control
software
hacking
plan
for
automate
able
and
repeatable
tests
amp
recommend
that
the
test
output
should
always
contain
all
the
input
parameter
settings
that
the
results
can
matched
the
parameter
settings
furthermore
you
need
able
precisely
recreate
the
conditions
that
test
accurately
possible
some
situations
complicate
this
goal
your
program
uses
random
numbers
you
will
need
some
way
set
and
print
the
starting
seed
that
you
can
ensure
the
same
sequence
random
numbers
for
each
test
run
alternatively
you
can
have
file
random
numbers
for
use
during
test
the
random
number
function
just
reads
the
next
one
from
the
file
another
situation
which
poses
challenge
here
testing
the
presence
asynchronous
processes
these
could
simple
collection
independent
and
variable
length
timers
complicated
distributed
real
time
process
control
system
managing
the
flow
product
through
refinery
process
always
check
error
returns
from
functions
really
good
programmer
will
always
check
the
return
status
from
functions
system
calls
and
libraries
you
neglect
look
the
return
status
how
you
know
that
the
function
really
worked
your
code
assumes
did
not
fail
but
did
then
the
resulting
segfault
error
will
hard
debug
better
always
check
the
error
status
returned
functions
another
example
from
kernighan
and
pike
fopen
outfile
null
file
could
not
opened
while
some
expression
fprintf
but
what
there
error
fclose
eof
some
output
error
occurred
the
error
status
fprintf
not
checked
what
fails
the
data
written
may
have
been
lost
summary
test
incrementally
and
build
confidence
your
code
write
unit
tests
that
can
run
once
fixes
changes
have
been
made
write
self
contained
unit
tests
test
inputs
and
outputs
test
the
dataflow
through
the
program
test
all
the
execution
paths
through
the
program
stress
test
the
code
start
simple
and
advance
test
crawler
depths
for
example
don
implement
new
features
there
are
known
bugs
the
system
the
target
runtime
environment
important
design
and
implementation
point
the
purpose
the
code
design
and
test
with
that
environment
mind
test
for
portability
run
code
and
tests
multiple
machines
oss
before
shipping
code
make
sure
that
the
any
debug
test
modes
are
turned
off
you
follow
least
the
tips
these
notes
you
will
write
better
code
and
will
have
considerably
fewer
bugs
tips
from
google
google
testing
frameworks
puts
the
goals
testing
this
way
and
clearly
applicable
programming
and
unit
testing
well
functional
and
system
testing
tests
should
independent
and
repeatable
tests
should
portable
and
reusable
when
tests
fail
they
should
provide
much
information
possible
about
the
failure
the
testing
framework
should
handle
all
the
tracking
successful
and
unsuccessful
tests
for
you
tests
should
fast
possible
activity
today
activity
will
review
the
feedback
from
the
mid
term
survey
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
unit
testing
engs
labs
notes
reading
resources
examples
unit
testing
the
goal
effective
unit
testing
isolate
each
functional
part
the
system
and
demonstrate
that
each
those
parts
working
properly
short
online
reference
jeff
canna
testing
fun
really
although
talking
mostly
about
java
his
insights
unit
testing
are
superb
unit
tests
tell
developer
that
the
code
doing
things
right
functional
tests
tell
developer
that
the
code
doing
the
right
things
jeff
canna
testing
fun
really
unit
tests
are
written
from
the
developer
perspective
and
focus
particular
methods
the
class
under
test
jeff
canna
testing
fun
really
use
these
guidelines
when
writing
unit
tests
from
jeff
canna
testing
fun
really
write
the
unit
test
before
writing
code
for
class
tests
capture
code
comments
unit
tests
test
all
the
public
methods
that
perform
interesting
function
that
not
getters
and
setters
unless
they
their
getting
and
setting
some
unique
way
put
each
test
case
the
same
package
the
class
testing
gain
access
package
and
protected
members
avoid
using
domain
specific
objects
unit
tests
unit
testing
our
binary
tree
today
terminal
script
available
unzip
the
tree
examples
file
the
tree
example
demonstrated
binary
tree
data
structure
here
enhance
become
treea
computer
scientist
comes
next
after
look
treea
tree
and
its
makefile
and
you
notice
three
things
the
code
now
has
main
function
the
bottom
the
file
protected
inside
ifdef
unit
test
endif
only
compiled
when
want
compile
unit
test
preceding
main
include
unittest
pick
several
preprocessor
macros
which
explain
below
the
makefile
now
has
unittest
target
which
builds
distinct
executable
and
unit
target
which
runs
the
unittest
target
unusual
that
explicitly
mentions
dependency
test
normally
make
automatically
recognizes
the
dependency
between
files
and
files
rarely
see
rules
with
dependency
files
here
because
there
unittest
always
build
unittest
from
tree
with
special
flag
and
not
use
tree
must
explicitly
list
all
the
pieces
that
into
building
unitest
preprocessor
macros
the
unit
test
makes
heavy
use
some
macros
which
are
recognized
and
textually
replaced
the
preprocessor
before
the
compiler
even
runs
they
are
useful
put
them
separate
unittest
file
and
textually
include
them
test
when
unit
test
has
been
defined
show
the
core
unittest
below
these
are
macros
note
how
define
fragments
code
with
each
define
the
first
two
even
take
parameters
when
scanning
code
the
preprocessor
does
textual
substitution
for
each
defined
symbol
does
not
evaluate
the
code
all
just
substitutes
the
remainder
the
line
after
the
symbol
and
after
space
into
the
program
wherever
sees
that
symbol
optionally
inserting
the
parameter
wherever
appears
the
macro
body
because
each
definition
must
appear
one
line
had
use
line
continuation
character
backslash
the
last
character
the
line
let
format
the
definitions
human
readable
way
lined
the
backslashes
they
all
look
neat
each
test
should
start
setting
the
result
count
zero
define
start
test
case
name
int
failures
char
testname
name
check
condition
false
print
warning
message
expect
dict
start
null
note
the
preprocessor
converts
line
into
line
number
where
this
macro
was
used
and
converts
into
string
constant
for
arg
define
expect
failures
printf
fail
line
testname
line
return
the
result
count
the
end
test
define
end
test
case
failures
printf
pass
test
testname
else
printf
fail
test
with
errors
testname
failures
define
test
result
failures
the
preprocessor
defines
special
macro
line
that
set
the
line
number
the
original
source
file
each
source
line
processed
this
great
for
printing
out
the
line
number
where
our
test
case
failed
the
preprocessor
also
has
special
syntax
parameter
that
substitutes
string
constant
for
the
text
the
parameter
you
can
see
right
the
end
the
expect
macro
thus
expect
tree
null
will
produce
code
that
ends
with
tree
null
enabling
print
the
line
number
and
the
condition
that
failed
you
can
that
with
only
with
the
preprocessor
warning
strongly
discourage
the
use
preprocessor
macros
there
are
times
however
where
they
are
the
right
tool
for
the
job
and
this
one
those
times
the
macros
are
meant
used
for
constructing
small
unit
tests
like
this
one
create
and
validate
empty
tree
int
test
newtree
start
test
case
newtree
tree
tree
tree
new
expect
tree
null
expect
tree
root
null
expect
tree
find
tree
hello
null
tree
delete
tree
null
expect
count
net
end
test
case
return
test
result
the
above
test
create
new
empty
tree
try
find
something
and
delete
the
tree
notice
though
that
actually
peek
inside
the
struct
tree
verify
that
all
its
members
are
set
correctly
note
too
how
used
those
new
macros
using
start
test
case
give
the
test
name
and
initialize
everything
expect
indicate
the
conditions
expect
true
end
test
case
print
the
summary
and
clean
and
return
test
result
provide
return
value
for
this
function
here
how
that
code
looks
after
running
through
the
preprocessor
with
gcc
dunit
test
tree
int
test
newtree
int
failures
char
testname
newtree
tree
tree
tree
new
tree
void
failures
printf
fail
line
testname
tree
null
tree
root
void
failures
printf
fail
line
testname
tree
root
null
tree
find
tree
hello
void
failures
printf
fail
line
testname
tree
find
tree
hello
null
tree
delete
tree
void
count
net
failures
printf
fail
line
testname
count
net
failures
printf
pass
test
testname
else
printf
fail
test
with
errors
testname
failures
return
failures
you
look
closely
you
can
see
the
original
bits
code
like
tree
delete
tree
null
with
null
expanded
well
the
expanded
expect
and
other
macros
then
the
main
program
runs
series
unit
tests
and
prints
error
any
them
failed
int
main
const
int
argc
const
char
argv
int
failed
failed
test
newtree
failed
test
newtree
failed
test
treeleft
failed
test
treefind
failed
printf
fail
test
cases
failed
return
failed
else
printf
pass
all
test
cases
return
here
what
the
output
looks
like
when
everything
passes
make
unit
gcc
wall
pedantic
std
ggdb
memory
memory
gcc
wall
pedantic
std
ggdb
dunit
test
tree
memory
unittest
unittest
pass
test
newtree
pass
test
newtree
pass
test
treeleft
ann
bob
cheri
dave
pass
test
treefind
pass
all
test
cases
see
what
looks
like
when
failure
occurs
could
either
break
the
tree
code
which
rather
not
break
the
test
code
the
latter
changing
one
line
expect
tree
find
tree
abcd
amp
data
expect
tree
find
tree
abcd
null
and
run
the
test
again
make
unit
gcc
wall
pedantic
std
ggdb
dunit
test
tree
memory
unittest
unittest
pass
test
newtree
fail
newtree
line
tree
find
tree
abcd
null
fail
test
newtree
with
errors
pass
test
treeleft
ann
bob
cheri
dave
pass
test
treefind
fail
test
cases
make
unit
error
notice
how
make
exited
with
error
that
because
unittest
exited
with
non
zero
status
note
the
code
end
main
cunit
test
framework
although
don
have
time
study
any
professional
frameworks
there
are
several
unit
testing
frameworks
available
the
internet
check
and
cunit
here
example
using
cunit
activity
today
activity
your
group
will
design
unit
test
for
one
our
other
modules
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
tse
indexer
engs
labs
notes
reading
resources
examples
tse
indexer
goals
reflect
our
design
principles
and
the
crawler
review
the
specs
for
the
indexer
explore
the
design
data
structures
for
search
engine
index
key
points
the
crawler
design
what
are
some
the
key
ideas
the
crawler
design
first
separate
application
specific
logic
from
general
purpose
utility
modules
leveraging
general
purpose
modules
from
lab
coding
the
crawler
specfic
logic
much
cleaner
and
simpler
than
were
woven
with
the
data
structure
code
your
crawler
weaves
the
logic
web
crawling
into
the
details
any
your
data
structures
you
missed
this
opportunity
your
code
likely
more
complicated
more
buggy
harder
debug
harder
test
harder
maintain
and
much
harder
reuse
and
extend
second
note
good
data
structure
design
key
successful
projects
the
design
the
crawler
remains
simple
because
chose
two
data
structures
bag
for
the
set
pages
yet
crawl
and
hashtable
for
the
set
urls
already
seen
that
support
the
overall
control
flow
the
other
hand
when
get
the
indexer
and
querier
may
find
that
need
adjust
the
code
provide
slightly
different
functionality
factor
out
code
that
needs
used
multiple
components
hard
have
perfect
foresight
pragmatic
programmer
tip
there
are
final
decisions
decision
cast
stone
instead
consider
each
being
written
the
sand
the
beach
and
plan
for
change
not
all
the
design
decisions
made
the
beginning
crawler
made
through
the
implementation
and
testing
the
final
code
many
times
you
say
sounded
like
good
idea
design
the
time
the
software
development
process
precisely
that
process
not
programmer
one
way
street
but
more
like
chef
crafting
new
dish
you
have
plan
that
everyone
agrees
you
begin
execute
that
plan
and
sometimes
conditions
change
and
unexpected
interactions
arise
you
have
handle
them
and
and
still
get
the
goal
finally
many
you
have
found
that
shell
scripts
can
automate
testing
far
easier
test
your
crawler
writing
bash
script
drive
various
test
cases
examine
the
output
for
correctness
than
manually
run
variety
tests
for
each
new
version
the
code
even
better
now
the
time
use
your
regress
script
from
lab
use
the
shell
luke
know
and
use
your
tools
the
indexer
the
job
the
indexer
read
the
documents
the
pagedirectory
output
the
crawler
build
inverted
index
mapping
from
words
documents
and
write
that
index
file
later
the
querier
will
read
the
index
and
use
answer
queries
now
good
time
read
section
searching
the
web
the
paper
about
search
engines
today
terminal
script
shows
some
classroom
demos
lists
the
files
and
structure
complete
and
clean
tse
directory
another
terminal
script
recreation
indexer
demo
ran
class
shows
how
indextest
might
look
indexer
requirements
see
the
requirements
spec
activity
today
activity
your
group
will
discuss
ideas
for
the
indexer
design
indexer
design
you
writing
out
the
design
specs
part
lab
help
you
get
started
this
lecture
sketch
out
the
key
data
structure
and
some
high
level
pseudo
code
data
structure
inverted
index
need
data
structure
represent
the
inverted
index
called
inverted
index
because
maps
from
words
documents
the
opposite
document
itself
sequence
words
hashtable
great
start
because
can
look
word
hashtable
time
but
what
the
hashtable
for
each
word
need
list
documents
not
the
documents
themselves
silly
just
the
document
ids
actually
enable
later
rank
the
matches
also
like
record
how
many
times
the
given
word
appears
each
document
consider
the
data
structures
have
handy
hashtable
set
bag
and
counters
and
tree
hashtable
countersets
perfect
map
from
word
list
docid
count
pairs
see
the
diagram
below
get
use
three
out
our
four
data
structures
hashtable
set
and
counters
when
processing
given
document
identified
docid
consider
each
word
look
that
word
the
hashtable
and
retrieve
pointer
counters
item
then
use
counters
add
that
item
using
the
docid
key
your
data
set
iterators
like
hashtable
iterate
should
very
useful
for
saving
index
file
for
later
loading
index
from
file
indexer
pseudocode
very
high
level
description
the
indexer
and
indextest
indexer
process
and
validate
command
line
parameters
initialize
data
structure
index
index
build
directory
index
index
save
file
index
clean
data
structures
indextest
process
and
validate
command
line
parameters
initialize
data
structure
index
index
load
file
index
index
save
file
index
clean
data
structures
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
iterators
engs
labs
notes
reading
resources
examples
iterators
this
lecture
will
learn
about
iterators
and
their
uses
what
iterator
how
coded
the
context
our
data
structures
how
leverages
function
pointers
passing
arguments
interators
several
uses
iterators
why
iterators
iterators
are
powerful
concept
especially
when
writing
abstract
data
structure
that
represents
collection
have
several
such
data
structures
tree
bag
set
hashtable
and
counters
the
collection
implements
iterator
can
apply
some
function
every
item
that
collection
for
printing
counting
modifying
and
even
combining
multiple
collections
lab
you
will
find
iterators
helpful
writing
the
contents
the
index
the
index
file
lab
you
will
find
iterators
helpful
combining
the
set
matches
for
one
word
with
the
set
matches
for
another
word
coding
iterator
lab
asked
you
include
iterate
method
each
set
hashtable
and
counters
you
saw
the
bag
iterate
method
example
iterate
over
the
whole
bag
call
the
given
function
each
item
passing
both
the
item
and
argument
ignore
null
bag
null
itemfunc
void
bag
iterate
bag
bag
void
arg
void
itemfunc
void
arg
void
item
bag
null
amp
amp
itemfunc
null
call
itemfunc
with
arg
each
item
for
bagnode
node
bag
head
node
null
node
node
next
itemfunc
arg
node
item
notice
that
the
code
begins
with
defensive
programming
case
the
caller
accidentally
calls
with
null
parameters
otherwise
the
function
simple
for
loop
stepping
through
each
item
the
bag
this
iterator
makes
promise
about
the
order
which
processes
items
after
all
bag
unordered
unlabeled
collection
things
function
pointers
recall
our
discussion
function
pointers
from
earlier
the
term
the
second
parameter
bag
iterate
declares
itemfunc
pointer
function
that
itself
takes
two
parameters
arg
and
data
both
are
void
pointers
that
pointers
some
unspecified
type
because
the
iterator
receives
function
pointer
from
its
caller
and
the
arg
data
parameters
are
arbitrary
pointers
this
iterator
can
work
items
any
type
and
compute
any
sort
function
those
items
making
truly
general
purpose
look
inside
the
for
loop
where
call
itemfunc
here
dereference
the
function
pointer
get
function
then
call
with
two
parameters
the
arg
provided
and
the
data
for
this
item
syntactically
have
wrap
the
dereference
parentheses
but
otherwise
just
like
any
other
function
call
arguments
sometimes
though
not
always
the
caller
will
need
way
communicating
other
information
the
itemfunc
not
just
the
information
about
the
item
our
iterator
can
provide
thus
the
iterator
takes
arg
pointer
arbitrary
something
and
passes
right
through
the
itemfunc
this
mechanism
general
purpose
pass
arg
null
the
caller
has
need
send
additional
arguments
its
itemfunc
pass
pointer
simple
variable
the
caller
just
needs
get
information
into
the
itemfunc
indeed
that
case
the
variable
passed
reference
and
thus
the
itemfunc
can
update
the
variable
needed
furthermore
the
caller
needs
send
multiple
things
the
itemfunc
can
pass
pointer
struct
holding
those
things
see
examples
writing
some
code
that
uses
our
bag
iterate
and
set
iterate
functions
examples
with
bag
iterate
three
examples
from
bagtest
printing
first
let
suppose
don
have
don
like
the
existing
bag
print
method
which
tends
print
some
text
formatting
around
each
item
can
use
our
new
iterator
printf
simpleprint
bag
iterate
bag
stdout
simpleprint
printf
print
the
given
item
the
given
file
just
print
the
stock
symbol
static
void
simpleprint
void
arg
void
item
file
arg
struct
stock
stp
item
null
amp
amp
stp
null
fprintf
stp
symbol
here
pass
the
file
pointer
through
the
arg
parameter
notice
how
simpleprint
immediately
copies
its
arg
data
parameters
into
local
variables
the
right
type
that
gives
them
more
readable
names
allows
the
compiler
check
the
code
that
follows
and
allows
use
structure
pointers
like
stp
reach
members
those
structures
counting
even
simpler
could
just
count
the
items
but
where
put
the
counter
define
local
variable
and
pass
its
address
the
arg
printf
count
int
nitems
bag
iterate
bag
amp
nitems
itemcount
printf
nitems
count
the
non
null
items
the
bag
note
here
don
care
what
kind
item
bag
static
void
itemcount
void
arg
void
item
int
nitems
arg
nitems
null
amp
amp
item
null
nitems
multiple
arguments
what
want
two
counters
this
version
bagtest
read
stock
quotes
symbol
previous
closing
price
current
price
and
trading
volume
let
just
count
the
number
gainers
and
number
losers
little
structure
carry
two
counters
struct
gainloss
int
ngainers
int
nlosers
printf
changes
struct
gainloss
changes
bag
iterate
bag
amp
changes
stockgainloss
printf
gainers
losers
changes
ngainers
changes
nlosers
count
the
number
gainers
and
losers
static
void
stockgainloss
void
arg
void
item
struct
gainloss
arg
struct
stock
stp
item
null
amp
amp
stp
null
stp
price
stp
close
ngainers
stp
price
stp
close
nlosers
once
the
stucture
defined
our
use
iterator
very
much
like
the
previous
example
define
and
initialize
local
variable
pass
pointer
that
variable
our
arg
and
then
the
itemfunc
copies
that
pointer
into
pointer
the
relevant
type
can
access
and
update
the
contents
notice
that
not
necessary
malloc
space
order
pass
pointer
the
iterator
this
example
amp
changes
pointer
local
variable
examples
with
set
iterate
the
bag
module
nice
because
very
simple
but
can
more
interesting
things
when
the
items
have
key
well
let
use
set
iterate
for
two
examples
see
terminal
script
for
the
code
and
test
run
merging
two
sets
start
with
simple
case
here
the
sets
represent
schools
where
the
key
the
name
the
school
see
set
iterate
note
also
set
iterate
makefile
set
seta
setb
result
three
sets
initialize
each
set
with
set
new
fill
seta
and
setb
with
set
insert
printf
merge
seta
into
result
set
merge
result
seta
set
print
result
stdout
itemprint
putchar
printf
merge
setb
into
result
set
merge
result
setb
set
print
result
stdout
itemprint
putchar
merge
the
second
set
into
the
first
set
the
second
set
unchanged
static
void
set
merge
set
seta
set
setb
set
iterate
setb
seta
set
merge
helper
consider
one
item
for
insertion
into
the
other
set
static
void
set
merge
helper
void
arg
const
char
key
void
item
set
seta
arg
set
insert
seta
key
item
printf
added
key
else
printf
exists
key
notice
how
the
above
approach
iterates
over
one
set
setb
and
for
each
item
that
set
tries
insert
update
its
value
the
first
set
seta
the
end
setb
unchanged
but
seta
should
have
all
items
from
both
sets
merging
two
sets
and
their
data
now
more
interesting
case
which
the
set
items
each
hold
data
want
combine
this
simple
test
that
datum
just
integer
actually
pointer
integer
see
set
iterate
note
also
set
iterate
makefile
this
example
seta
and
setb
each
contain
set
school
names
and
number
for
each
school
say
perhaps
the
number
people
you
know
each
school
when
merging
two
sets
you
want
the
data
the
resulting
set
represent
the
sum
the
values
each
set
set
insert
seta
dartmouth
intsave
printf
merge
seta
into
result
set
merge
result
seta
set
print
result
stdout
itemprint
putchar
printf
merge
setb
into
result
set
merge
result
setb
set
print
result
stdout
itemprint
putchar
merge
the
second
set
into
the
first
set
the
second
set
unchanged
static
void
set
merge
set
seta
set
setb
set
iterate
setb
seta
set
merge
helper
consider
one
item
for
insertion
into
the
other
set
the
other
set
does
not
contain
the
item
insert
otherwise
update
the
other
set
item
with
sum
item
values
static
void
set
merge
helper
void
arg
const
char
key
void
item
set
seta
arg
int
itemb
item
find
the
same
key
seta
int
itema
set
find
seta
key
itema
null
not
found
insert
set
insert
seta
key
intsave
itemb
printf
added
key
else
add
the
existing
value
itema
itemb
printf
exists
key
static
int
intsave
int
item
int
saved
assertp
malloc
sizeof
int
intsave
saved
item
return
saved
the
overall
structure
the
code
identical
the
prior
example
the
difference
here
that
need
look
the
key
the
destination
set
first
and
then
perhaps
update
its
data
because
get
pointer
the
data
can
easily
reach
and
update
its
value
summary
iterators
are
super
powerful
function
pointers
are
great
activity
you
now
seen
how
construct
the
union
two
sets
today
activity
your
group
discusses
how
you
would
construct
the
intersection
two
sets
very
analogous
but
bit
trickier
found
that
the
itemfunc
needed
pointer
each
set
not
just
the
one
set
the
example
above
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
cohesion
and
coupling
engs
labs
notes
reading
resources
examples
cohesion
and
coupling
goals
discuss
routines
types
and
names
cohesion
and
why
want
strong
cohesion
coupling
and
why
want
weak
coupling
the
concepts
today
lecture
come
from
chapter
code
complete
steve
mcconnell
microsoft
press
routines
often
use
the
word
routine
general
concept
refer
function
procedure
typically
use
the
word
procedure
refer
function
with
return
value
other
languages
routines
might
called
subroutines
methods
there
are
many
reasons
break
program
into
routines
reduce
complexity
avoid
duplicate
code
limit
effects
changes
narrow
scope
change
routine
hide
sequences
form
information
hiding
improve
performance
optimize
one
place
centralize
control
controlling
devices
files
data
structures
more
information
hiding
hide
data
structures
adts
hide
global
data
access
routines
centralize
control
globals
hide
pointer
operations
makes
easier
read
promote
code
reuse
easier
reuse
code
routine
plan
for
family
programs
isolate
parts
that
may
change
few
routines
improve
readability
named
routine
more
readable
avoid
deep
nesting
etc
improve
portability
isolate
nonportable
features
isolate
complex
operations
algorithm
protocols
etc
isolate
use
nonstandard
language
functions
isolate
nonportable
features
simplify
complicated
boolean
tests
inlines
are
great
here
routines
should
well
named
procedure
name
should
strong
verb
followed
object
like
printcalendar
function
name
should
describe
its
return
value
like
numberofnonzeros
boolean
function
name
should
sound
like
question
like
isinternalurl
good
routine
name
avoids
meaningless
verbs
like
perform
describes
everything
the
routine
does
long
necessary
follows
naming
conventions
routine
body
should
not
too
long
you
find
your
routine
approaching
lines
you
should
break
have
darn
good
reason
you
should
not
break
cohesion
cohesion
refers
how
closely
strongly
the
operations
routine
are
related
mcconnell
one
study
found
that
high
cohesion
routines
were
fault
free
while
low
cohesion
routines
were
fault
free
good
routines
have
strong
cohesion
acceptable
cohesion
functional
cohesion
strongest
and
best
kind
performs
one
and
only
one
operation
sequential
cohesion
contains
operations
that
must
performed
sequential
order
communicational
cohesion
contains
operations
that
make
use
the
same
data
but
are
not
otherwise
related
temporal
cohesion
contains
operations
that
several
things
because
all
are
done
the
same
time
unacceptable
cohesion
procedural
cohesion
contains
operations
that
must
performed
sequential
order
but
don
share
the
same
data
logical
cohesion
several
things
routine
only
one
executed
depending
flag
parameter
exception
can
using
switch
statement
call
one
many
other
cohesive
functions
coincidental
cohesion
apparent
reason
for
things
together
routine
coupling
the
degree
coupling
refers
the
strength
connection
between
two
routines
coupling
complement
cohesion
mcconnell
good
code
has
loose
coupling
among
routines
make
the
coupling
routines
simple
possible
criteria
for
evaluating
coupling
between
routines
size
number
connections
intimacy
directness
connection
better
use
direct
parameter
passing
than
indirect
global
variables
visibility
best
connection
obvious
flexibility
how
easily
you
can
change
connections
for
minimal
interconnectedness
and
make
what
interconnections
you
have
simple
and
obvious
program
were
piece
wood
you
try
split
with
the
grain
kinds
coupling
simple
data
coupling
the
only
data
passed
from
one
routine
another
through
parameters
and
nonstructured
data
structure
coupling
one
routine
passes
data
structure
another
best
really
needs
the
whole
data
structure
control
coupling
one
routine
tells
the
other
what
global
data
coupling
two
routines
use
the
same
global
data
may
tolerable
read
only
pathological
coupling
one
routine
uses
the
data
inside
the
other
routine
somewhat
hard
and
try
create
routines
that
depend
little
other
routines
defensive
programming
best
practices
use
assert
other
tests
insert
sanity
checks
into
your
code
particularly
suspicious
parameters
and
input
values
that
come
from
another
module
including
the
user
data
that
crosses
module
interface
routine
parameters
best
practices
put
parameters
input
modify
output
order
put
status
error
variables
last
use
all
the
parameters
use
consistent
order
among
similar
routines
document
assumptions
about
parameters
preconditions
are
assumptions
about
the
parameters
internal
data
structure
state
before
the
routine
executes
and
postconditions
are
assumptions
about
the
parameters
data
structure
and
return
value
after
the
routine
exits
macros
you
can
write
macros
with
define
these
are
handled
the
preprocessor
macros
can
handy
occasion
but
usually
better
use
inline
functions
const
variables
for
these
purposes
you
get
better
syntax
type
checking
and
better
debugger
support
modules
module
collection
related
routines
that
together
encapsulate
data
structure
subsystem
task
object
oriented
programming
module
typically
called
class
why
modules
sometimes
necessary
have
strong
coupling
between
routines
that
case
you
should
group
those
routines
into
module
the
module
has
strong
cohesion
strive
for
strong
intra
module
cohesion
and
loose
inter
module
coupling
well
designed
module
class
java
encourages
information
hiding
information
hiding
good
module
serves
hide
implementation
details
inside
the
module
providing
clean
abstraction
and
clear
interface
other
modules
each
module
programmer
makes
many
implementation
decisions
which
should
largely
unknown
code
outside
the
module
thus
the
module
less
coupled
others
more
maintainable
more
self
testable
more
replacable
more
debuggable
can
insert
debugging
code
easily
more
reliable
can
insert
checks
few
places
more
understandable
hides
complexity
collaborative
work
modules
classes
are
excellent
mechanism
for
dividing
work
among
programmers
because
module
boundaries
and
interfaces
are
clear
and
there
otherwise
little
coupling
thus
the
module
programmer
has
wide
flexibility
and
authority
the
implementation
details
her
module
long
she
sticks
the
agreed
upon
interface
for
the
module
and
clearly
documents
the
interface
activity
today
activity
your
group
will
look
some
example
code
and
comment
its
naming
cohesion
and
coupling
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
tse
querier
engs
labs
notes
reading
resources
examples
tse
querier
goals
there
are
three
mini
lectures
today
goals
the
querier
fuzz
testing
expressions
and
accumulators
arithmetic
expressions
precedence
activity
the
querier
the
third
component
the
tiny
search
engine
the
querier
which
reads
the
index
produced
the
indexer
and
the
page
files
produced
the
crawler
interactively
answer
written
queries
entered
the
user
our
querier
loads
the
index
into
memory
data
structure
developed
for
the
indexer
and
then
prompts
the
user
for
queries
queries
are
comprised
words
with
optional
and
operators
for
example
computer
science
computer
and
science
computer
science
baseball
basketball
ultimate
frisbee
the
first
two
examples
are
treated
identically
matching
only
documents
that
have
both
words
not
necessarily
together
the
phrase
computer
science
the
third
picks
documents
that
have
either
word
the
fourth
matches
documents
that
mention
baseball
basketball
both
ultimate
and
the
word
frisbee
not
necessarily
together
here
example
run
with
the
output
truncated
bit
querier
querier
data
data
index
key
words
computer
and
science
query
computer
and
science
matches
documents
ranked
score
doc
http
old
www
dartmouth
edu
dfk
papers
index
html
score
doc
http
old
www
dartmouth
edu
dfk
papers
index
html
score
doc
http
old
www
dartmouth
edu
dfk
papers
index
html
score
doc
http
old
www
dartmouth
edu
dfk
papers
index
html
score
doc
http
old
www
dartmouth
edu
dfk
armada
score
doc
http
old
www
dartmouth
edu
dfk
people
html
score
doc
http
old
www
dartmouth
edu
dfk
teaching
html
score
doc
http
old
www
dartmouth
edu
dfk
papers
abstracts
deshpande
thesis
html
score
doc
http
old
www
dartmouth
edu
dfk
papers
abstracts
nanda
thesis
html
score
doc
http
old
www
dartmouth
edu
dfk
index
html
key
words
tiny
search
engine
query
tiny
search
engine
documents
match
key
words
tse
query
tse
documents
match
key
words
note
lowercase
the
query
first
query
note
lowercase
the
query
first
documents
match
key
words
spaces
not
mattter
query
spaces
not
mattter
documents
match
key
words
non
letter
characters
are
disallowed
error
bad
character
query
key
words
even
digits
error
bad
character
query
key
words
and
query
and
error
and
cannot
first
key
words
query
error
cannot
first
key
words
what
about
and
query
what
about
and
error
and
cannot
last
key
words
friend
and
foe
query
friend
and
foe
documents
match
key
words
quit
query
quit
documents
match
key
words
exit
query
exit
matches
documents
ranked
score
doc
http
old
www
dartmouth
edu
dfk
visit
dartmouth
html
key
words
let
study
the
requirements
spec
for
the
querier
and
run
some
demos
today
demo
scripts
are
here
script
and
script
fuzz
testing
recent
lecture
talked
about
unit
testing
and
the
difference
between
glass
box
testing
and
black
box
testing
usually
these
tests
are
based
carefully
constructed
series
test
cases
devised
test
all
code
sequences
and
push
the
edge
cases
however
such
tests
are
only
good
the
test
writer
who
must
logically
study
the
code
for
glass
box
testing
the
specs
for
black
box
testing
think
the
suitable
test
cases
possible
they
will
miss
some
important
cases
another
solution
therefore
fuzz
testing
form
black
box
testing
which
you
fire
thousands
random
inputs
the
program
see
how
reacts
the
chances
triggering
unconsidered
test
case
far
greater
you
try
lot
cases
here
fuzz
testing
program
for
our
querier
generates
series
random
queries
stdout
which
then
pipes
the
querier
stdin
here
the
core
the
fuzz
tester
generate
query
generate
one
random
query
and
print
stdout
pull
random
words
from
the
wordlist
and
from
the
dictionary
static
void
generate
query
const
wordlist
wordlist
const
wordlist
dictionary
some
parameters
that
affect
query
generation
const
int
max
words
generate
max
words
const
float
probability
between
two
words
const
float
and
probability
and
between
two
words
const
float
dict
probability
draw
from
dict
instead
wordlist
int
qwords
random
max
words
number
words
query
for
int
qwords
draw
word
either
dictionary
wordlist
random
dict
probability
printf
dictionary
words
random
dictionary
nwords
else
printf
wordlist
words
random
wordlist
nwords
last
word
qwords
which
operator
print
int
random
and
probability
printf
and
else
and
probability
probability
printf
printf
with
the
following
setup
tse
mkdir
data
crawler
crawler
http
old
www
dartmouth
edu
data
indexer
indexer
data
data
index
and
here
the
output
random
queries
querier
fuzzquery
usage
querier
fuzzquery
indexfile
numqueries
randomseed
querier
fuzzquery
data
index
querier
fuzzquery
generating
queries
from
words
captured
and
despite
pcs
frontiers
activityaware
relay
tour
unix
downloading
pre
triactine
pieces
colgate
aspects
wine
wise
direx
uncompressed
early
taxonomy
austrian
and
jewelry
manages
once
forced
odame
localization
marsch
comparison
suffer
desires
workflow
facilitated
garth
yang
cardiac
and
ruslan
and
synthetic
and
here
what
happens
when
pipe
our
querier
output
abbreviated
little
querier
fuzzquery
data
index
querier
querier
data
data
index
querier
fuzzquery
generating
queries
from
words
key
words
query
captured
and
despite
documents
match
key
words
query
pcs
frontiers
activityaware
relay
tour
matches
documents
ranked
score
doc
http
old
www
dartmouth
edu
dfk
papers
index
html
score
doc
http
old
www
dartmouth
edu
dfk
papers
index
html
score
doc
http
old
www
dartmouth
edu
dfk
papers
index
html
score
doc
http
old
www
dartmouth
edu
dfk
papers
index
html
score
doc
http
old
www
dartmouth
edu
dfk
papers
abstracts
oldfield
app
pario
html
key
words
query
unix
downloading
pre
matches
documents
ranked
score
doc
http
old
www
dartmouth
edu
dfk
papers
abstracts
khanna
group
html
key
words
error
bad
character
query
key
words
query
uncompressed
early
taxonomy
austrian
and
jewelry
manages
matches
documents
ranked
score
doc
http
old
www
dartmouth
edu
dfk
papers
index
html
score
doc
http
old
www
dartmouth
edu
dfk
starfish
score
doc
http
old
www
dartmouth
edu
dfk
rapid
transit
html
key
words
query
once
forced
odame
localization
marsch
matches
documents
ranked
score
doc
http
old
www
dartmouth
edu
dfk
papers
index
html
score
doc
http
old
www
dartmouth
edu
dfk
papers
abstracts
anthony
sith
html
score
doc
http
old
www
dartmouth
edu
dfk
papers
index
html
score
doc
http
old
www
dartmouth
edu
dfk
papers
index
html
score
doc
http
old
www
dartmouth
edu
dfk
papers
index
html
key
words
query
comparison
matches
documents
ranked
score
doc
http
old
www
dartmouth
edu
dfk
papers
index
html
score
doc
http
old
www
dartmouth
edu
dfk
papers
index
html
score
doc
http
old
www
dartmouth
edu
dfk
papers
index
html
key
words
query
suffer
desires
workflow
matches
documents
ranked
score
doc
http
old
www
dartmouth
edu
dfk
papers
abstracts
mare
thesis
html
key
words
query
facilitated
matches
documents
ranked
score
doc
http
old
www
dartmouth
edu
dfk
papers
abstracts
chen
fusenet
html
score
doc
http
old
www
dartmouth
edu
dfk
papers
abstracts
tan
crf
html
key
words
query
garth
yang
cardiac
and
ruslan
and
synthetic
matches
documents
ranked
score
doc
http
old
www
dartmouth
edu
dfk
papers
index
html
score
doc
http
old
www
dartmouth
edu
dfk
charisma
score
doc
http
old
www
dartmouth
edu
dfk
people
html
could
generate
different
series
random
queries
changing
the
random
seed
and
can
run
lot
more
queries
too
querier
fuzzquery
data
index
querier
querier
data
data
index
dev
null
querier
fuzzquery
generating
queries
from
words
querier
fuzzquery
data
index
querier
querier
data
data
index
querier
fuzzquery
generating
queries
from
words
the
fuzz
tester
does
not
test
all
aspects
the
querier
particular
will
not
generate
syntactically
incorrect
inputs
those
should
tested
another
program
perhaps
another
fuzz
tester
furthermore
does
not
verify
whether
the
querier
actually
produces
the
right
answers
for
regression
testing
might
save
the
querier
output
file
and
then
compare
the
output
fresh
test
run
against
the
saved
results
from
earlier
runs
had
earlier
believed
those
results
correct
then
seeing
unchanged
output
would
presumably
indicate
the
results
and
thus
the
new
code
are
still
correct
expressions
and
accumulators
thinking
ahead
the
querier
let
think
about
how
one
evaluates
expression
involving
operators
work
with
arithmetic
analogy
arithmetic
expressions
consider
the
following
arithmetic
expression
sum
since
addition
left
associative
operator
this
means
the
same
thing
sum
this
means
can
scan
the
expression
from
left
right
accumulating
sum
effectively
like
this
sum
sum
sum
sum
sum
sum
sum
sum
sum
here
the
sum
acts
accumulator
indeed
many
early
hardware
architectures
include
explicit
register
called
accumulator
often
see
this
approach
generalized
code
int
int
array
int
sum
for
int
sum
array
printf
sum
average
sum
float
sum
precedence
what
you
have
mixture
operators
with
precedence
consider
the
following
arithmetic
expression
sum
both
addition
and
multiplication
are
left
associative
operators
but
multiplication
has
precedence
over
addition
thus
implicitly
rewrite
the
above
expression
follows
sum
sequence
sum
sum
sum
prod
prod
prod
prod
prod
sum
sum
prod
sum
sum
notice
how
step
aside
from
the
sum
for
moment
while
compute
the
product
using
exactly
analogous
process
prod
accumulator
for
the
product
initialized
the
multiplicative
identity
instead
the
additive
identity
for
reasons
hope
are
obvious
but
then
just
multiply
each
the
successive
items
one
time
this
generalizes
longer
expressions
like
sum
becomes
sum
prod
prod
prod
prod
prod
sum
sum
prod
prod
prod
prod
prod
prod
prod
prod
sum
sum
prod
prod
prod
prod
sum
sum
prod
prod
prod
prod
prod
prod
prod
prod
sum
sum
prod
let
add
some
indentation
make
this
little
easier
read
sum
prod
prod
prod
prod
prod
sum
sum
prod
prod
prod
prod
prod
prod
prod
prod
sum
sum
prod
prod
prod
prod
sum
sum
prod
prod
prod
prod
prod
prod
prod
prod
sum
sum
prod
notice
what
did
with
and
that
never
add
anything
sum
other
than
prod
this
structure
should
give
you
hint
about
how
you
might
write
code
evaluate
such
expressions
you
have
product
function
scan
the
expression
left
right
from
given
starting
point
accumulating
product
individual
items
until
sees
the
end
the
expression
you
can
then
write
function
sum
that
scans
the
expression
left
right
from
the
start
accumulating
sum
products
calling
product
the
start
and
after
each
activity
today
activity
your
group
will
discuss
how
the
above
ideas
relate
and
operators
query
expression
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
networking
and
socket
programming
engs
labs
notes
reading
resources
examples
networking
and
socket
programming
how
build
internet
applications
this
lecture
will
discuss
the
socket
api
and
support
for
network
communications
between
internet
hosts
socket
programming
the
key
api
for
programming
distributed
applications
the
internet
you
are
interested
getting
deeper
into
networking
take
computer
networks
socket
programming
key
skill
needed
for
the
final
project
goals
overview
the
client
server
model
provide
high
level
understanding
tcp
introduce
the
berkeley
sockets
api
for
networking
the
client
server
model
the
client
server
model
one
the
most
commonly
used
communication
paradigms
networked
systems
server
long
running
program
that
stands
idle
until
some
clients
connect
the
server
and
request
service
thus
the
client
who
initiates
communication
with
the
server
clients
normally
communicate
with
one
server
time
but
most
servers
can
communicate
with
multiple
clients
simultaneously
clients
need
some
advance
knowledge
the
server
and
its
address
but
the
server
does
not
need
know
the
address
even
the
existence
the
client
prior
the
connection
being
established
client
and
servers
communicate
means
multiple
layers
network
protocols
this
class
focus
the
tcp
protocol
suite
when
the
client
and
server
are
both
connected
the
same
local
area
network
lan
looks
like
the
following
although
the
diagram
shows
ethernet
the
case
exactly
analogous
the
client
and
the
server
may
different
lans
with
both
lans
connected
wide
area
network
wan
means
routers
the
largest
wan
the
internet
but
companies
may
have
their
own
wans
this
scenario
depicted
below
the
flow
information
between
the
client
and
the
server
goes
down
the
protocol
stack
one
side
then
across
the
network
and
then
the
protocol
stack
the
other
side
transmission
control
protocol
tcp
tcp
provides
connection
oriented
service
since
based
connections
between
clients
and
servers
when
the
client
contacts
the
server
over
tcp
asks
connect
and
the
server
must
then
accept
the
connection
once
open
the
connection
between
socket
the
client
and
socket
the
server
acts
there
stream
bytes
flowing
from
client
server
and
stream
bytes
flowing
from
server
client
these
streams
look
and
act
almost
exactly
like
the
stdin
and
stdout
streams
you
accustomed
the
client
writes
its
socket
and
the
bytes
stream
over
the
connection
the
server
who
then
reads
bytes
from
its
socket
and
vice
versa
tcp
provides
reliability
when
tcp
client
sends
data
the
server
requires
acknowledgement
return
acknowledgement
not
received
tcp
automatically
retransmits
the
data
and
waits
for
longer
period
time
these
acknowledgements
are
all
handled
the
tcp
layer
the
protocol
stack
and
are
invisible
applications
socket
addresses
the
tcp
protocol
depends
the
underlying
protocol
tcp
bundles
bytes
from
the
outbound
stream
into
packets
and
asks
the
layer
route
those
packets
across
the
lan
wan
the
destination
where
the
receiving
tcp
layer
drops
those
bytes
ito
the
inbound
stream
this
class
use
version
ipv
the
traditional
and
still
most
common
version
how
does
the
sender
identify
the
destination
the
packets
with
address
the
unix
socket
api
aka
berkeley
sockets
the
ipv
socket
address
structure
named
sockaddr
and
defined
including
the
netinet
header
file
have
found
sufficient
include
netdb
for
the
client
arpa
inet
for
the
server
because
there
are
many
socket
related
include
files
and
they
all
appear
include
each
other
the
standard
definition
the
following
struct
addr
addr
addr
bit
ipv
network
byte
ordered
address
struct
sockaddr
uint
sin
len
length
structure
family
sin
family
inet
port
sin
port
bit
tcp
udp
port
number
struct
addr
sin
addr
bit
ipv
address
char
sin
zero
not
used
but
always
set
zero
the
uint
data
type
unsigned
bit
integer
host
byte
order
network
byte
order
conversion
there
are
two
ways
store
two
four
byte
integers
memory
big
endian
with
the
most
significant
byte
first
and
bytes
decreasing
significance
memory
address
increases
see
diagram
little
endian
with
the
least
significant
byte
first
and
bytes
increasing
significance
memory
address
increases
see
diagram
see
wikipedia
about
endianness
refer
these
orders
the
host
byte
order
for
example
intel
processor
stores
bit
integer
four
consecutive
bytes
memory
the
order
where
the
most
significant
byte
which
little
endian
ibm
powerpc
processors
would
store
the
integer
the
byte
order
which
big
endian
standard
internet
protocols
such
and
tcp
use
big
endian
byte
ordering
the
following
functions
are
provided
all
unix
platforms
aid
you
converting
between
host
byte
order
whatever
may
and
network
byte
order
big
endian
host
these
functions
nothing
little
endian
machine
they
swap
the
order
bytes
code
using
these
functions
can
thus
compiled
either
big
endian
little
endian
machine
and
work
correctly
include
netinet
uint
htons
uint
host
bitvalue
host
network
short
uint
htonl
uint
host
bitvalue
host
network
long
uint
ntohs
uint
net
bitvalue
network
host
short
uint
ntohl
uint
net
bitvalue
network
host
long
network
parlance
short
means
bits
and
long
means
bits
the
first
two
functions
return
the
value
network
byte
order
and
bit
respectively
the
latter
two
functions
return
the
value
host
byte
order
and
bit
respectively
the
type
uint
refers
unsigned
bit
integer
the
type
uint
refers
unsigned
bit
integer
the
type
uint
refers
unsigned
bit
integer
tcp
socket
api
for
more
information
about
the
socket
api
read
berkeley
sockets
wikipedia
and
the
man
pages
for
the
functions
you
see
used
below
the
sequence
function
calls
for
the
client
and
server
participating
tcp
connection
presented
below
shown
the
figure
the
steps
for
establishing
tcp
socket
the
client
side
are
the
following
create
socket
using
the
socket
function
connect
the
socket
the
address
the
server
using
the
connect
function
send
and
receive
data
means
the
write
and
read
functions
the
steps
involved
establishing
tcp
socket
the
server
side
are
follows
create
socket
with
the
socket
function
bind
the
socket
address
using
the
bind
function
listen
for
connections
with
the
listen
function
accept
connection
with
the
accept
function
system
call
this
call
typically
blocks
until
client
connects
with
the
server
send
and
receive
data
means
write
and
read
the
actual
determination
which
side
reads
first
and
which
side
writes
first
depends
the
particular
protocol
running
atop
tcp
the
socket
function
the
first
step
call
the
socket
function
specifying
the
type
communication
protocol
tcp
based
ipv
tcp
based
ipv
udp
the
function
defined
follows
include
sys
socket
int
socket
int
family
int
type
int
protocol
where
family
specifies
the
protocol
family
inet
for
the
ipv
protocols
type
constant
described
the
type
socket
sock
stream
for
stream
tcp
sockets
and
sock
dgram
for
datagram
udp
sockets
and
protocol
parameter
that
can
set
zero
for
this
course
the
function
returns
non
negative
integer
error
this
number
file
descriptor
file
descriptors
file
descriptors
are
small
non
negative
integers
that
the
kernel
uses
identify
the
files
being
accessed
particular
process
whenever
opens
existing
file
creates
new
file
the
kernel
returns
file
descriptor
that
used
read
write
the
file
they
are
not
the
same
thing
stdio
file
pointers
the
stdio
package
wraps
file
descriptors
its
file
type
provide
more
convenient
api
convention
file
descriptor
the
standard
input
known
stdio
stdin
file
descriptor
the
standard
output
wrapped
stdio
stdout
and
file
descriptor
the
standard
error
wrapped
stdio
stderr
the
bind
function
the
bind
assigns
local
protocol
address
socket
with
the
internet
protocols
the
address
the
combination
ipv
address
and
bit
tcp
port
number
the
function
defined
follows
include
sys
socket
int
bind
int
sockfd
const
struct
sockaddr
servaddr
socklen
addrlen
where
sockfd
the
socket
descriptor
servaddr
points
socket
address
structure
and
addrlen
its
length
bind
returns
succeeds
error
this
use
the
generic
socket
address
sockaddr
requires
that
any
calls
these
functions
must
cast
the
pointer
the
protocol
specific
address
structure
for
example
for
ipv
socket
structure
that
use
this
class
struct
sockaddr
serv
ipv
socket
address
structure
bind
sockfd
struct
sockaddr
amp
serv
sizeof
serv
process
can
bind
specific
address
port
its
socket
normally
tcp
client
does
not
bind
address
its
socket
the
kernel
chooses
the
source
based
the
outgoing
interface
that
used
and
assigns
unused
port
number
for
tcp
server
bind
required
and
restricts
the
socket
receive
incoming
client
connections
destined
that
address
and
port
that
said
the
server
can
pass
wildcard
address
bind
and
allow
the
system
choose
address
and
unused
port
number
the
listen
function
the
listen
function
converts
unconnected
socket
into
passive
socket
indicating
that
the
kernel
should
accept
incoming
connection
requests
directed
this
socket
defined
follows
include
sys
socket
int
listen
int
sockfd
int
backlog
where
sockfd
the
socket
descriptor
and
backlog
the
maximum
number
connections
the
kernel
should
queue
for
this
socket
the
backlog
argument
provides
hint
the
system
the
number
outstanding
connect
requests
that
should
enqueue
behalf
the
process
once
the
queue
full
the
system
will
reject
additional
connection
requests
the
backlog
value
must
chosen
based
the
expected
load
the
server
the
function
listen
returns
succeeds
error
the
connect
function
the
connect
function
used
tcp
client
establish
connection
with
tcp
server
the
function
defined
follows
include
sys
socket
int
connect
int
sockfd
const
struct
sockaddr
servaddr
socklen
addrlen
where
sockfd
the
socket
descriptor
returned
the
call
socket
and
servaddr
points
socket
address
structure
and
addrlen
its
length
the
function
returns
succeeds
establishing
tcp
connection
and
otherwise
the
client
does
not
have
call
bind
before
calling
this
function
the
client
unix
kernel
will
choose
both
ephemeral
port
and
the
source
necessary
the
accept
function
the
accept
function
used
retrieve
connect
request
create
new
socket
just
like
the
original
one
and
allocate
new
file
descriptor
for
that
socket
defined
follows
include
sys
socket
int
accept
int
sockfd
struct
sockaddr
cliaddr
socklen
addrlen
where
sockfd
new
file
descriptor
that
connected
the
client
that
called
the
connect
the
cliaddr
and
addrlen
arguments
are
used
return
the
protocol
address
the
client
the
new
socket
descriptor
has
the
same
socket
type
and
address
family
the
original
socket
the
original
socket
passed
accept
not
associated
with
the
connection
but
instead
remains
available
receive
additional
connect
requests
the
kernel
creates
one
connected
socket
for
each
client
connection
that
accepted
don
care
about
the
client
identity
can
set
the
cliaddr
and
addrlen
null
otherwise
before
calling
the
accept
function
the
cliaddr
parameter
has
set
buffer
large
enough
hold
the
address
and
set
the
integer
pointed
addrlen
the
size
the
buffer
tcp
client
server
example
this
example
client
server
see
basic
tcp
client
that
can
talk
our
basic
tcp
server
this
code
demonstrates
the
server
loop
over
clients
and
handling
each
client
turn
the
server
side
flow
socket
bind
listen
accept
read
close
the
client
side
flow
socket
connect
write
close
the
use
getsockname
retrieve
the
port
number
bound
socket
the
use
gethostbyname
find
the
address
for
hostname
the
use
bzero
zero
all
bytes
buffer
the
use
bcopy
copy
all
bytes
from
one
buffer
another
read
write
loop
recognizing
that
read
does
not
always
fill
the
buffer
http
over
tcp
client
server
example
this
example
client
server
http
enhance
the
basic
example
support
http
the
client
can
connect
our
http
server
real
http
servers
the
server
can
serve
our
basic
http
client
real
browsers
this
code
demonstrates
the
http
protocol
both
server
and
client
side
the
use
fdopen
convert
file
descriptor
into
file
pointer
usable
with
stdio
and
our
file
module
learn
more
for
more
details
about
the
handshake
protocols
see
this
excellent
tcp
state
diagram
wikipedia
activity
today
activity
your
group
will
copy
and
install
the
example
code
and
try
out
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
gitlab
with
ssh
engs
labs
notes
reading
resources
examples
gitlab
with
ssh
use
the
git
revision
control
system
and
specifically
our
own
gitlab
server
connections
between
gitlab
and
your
computer
whether
that
your
laptop
one
the
linux
servers
are
conducted
over
secure
connection
either
using
the
https
ssh
protocols
although
takes
little
bit
more
set
effort
ssh
the
preferred
choice
and
find
that
works
better
for
students
once
set
instructions
visit
gitlab
and
click
your
personal
icon
the
upper
right
corner
pick
settings
from
the
pop
menu
click
ssh
keys
the
list
panes
across
the
top
log
your
account
the
linux
server
check
see
whether
you
already
have
ssh
key
lives
the
ssh
subdirectory
your
home
directory
try
cat
ssh
rsa
pub
you
have
key
will
print
out
not
you
get
error
such
file
directory
kotz
flume
cat
ssh
rsa
pub
ssh
rsa
aaaab
nzac
eaaaadaqabaaabaqdy
dertm
wkvk
ofgwpygrjkemxhynpz
ghmb
sqemljygwcjb
mqwiqzrii
nvr
cod
imh
odmlc
zkgj
ycl
wmylq
ctye
oyxd
ybve
baxdz
kwwem
uwtjz
oipvt
cly
qind
vco
iui
wbcfinybp
ptv
bjyid
lmoshpljm
oyd
rft
ycblhydmo
mfldxliyav
aojfb
ykg
jqgnbzczvtyprflea
rlbuwqvo
zjbki
hmtdajoxrd
dfk
topdog
dartmouth
edu
you
not
have
ssh
key
generate
one
ssh
keygen
rsa
yourusername
dartmouth
edu
then
try
cat
ssh
rsa
pub
use
your
mouse
select
the
whole
output
cat
copy
your
clipboard
back
your
browser
still
the
ssh
keys
page
gitlab
and
paste
your
clipboard
into
that
big
box
click
the
add
key
button
you
should
now
use
the
ssh
style
url
when
cloning
repos
from
gitlab
you
already
cloned
repo
with
the
https
style
url
see
below
whenever
you
git
pull
git
push
other
operations
that
involve
the
remote
you
will
need
enter
the
passphrase
you
provided
when
you
generated
the
ssh
keypair
not
your
gitlab
password
because
you
need
give
ssh
permission
use
your
private
key
authenticate
yourself
the
remote
gitlab
server
macos
users
you
use
macos
laptop
and
want
able
clone
from
gitlab
repos
your
mac
copy
your
ssh
keys
your
laptop
scp
yourusername
flume
dartmouth
edu
ssh
rsa
ssh
scp
yourusername
flume
dartmouth
edu
ssh
rsa
pub
ssh
switching
from
https
ssh
you
already
cloned
repo
using
the
https
style
url
and
now
want
use
the
ssh
method
set
for
ssh
first
above
then
the
directory
holding
your
clone
you
should
see
something
like
this
git
remote
origin
https
dfkotz
gitlab
dartmouth
edu
dfkotz
demonstration
git
fetch
origin
https
dfkotz
gitlab
dartmouth
edu
dfkotz
demonstration
git
push
visit
your
repo
home
page
gitlab
and
find
the
box
that
holds
the
url
click
the
pop
next
that
box
and
choose
ssh
copy
the
url
your
clipboard
and
tell
git
set
that
url
your
origin
instead
git
remote
set
url
origin
git
gitlab
dartmouth
edu
dfkotz
demonstration
git
git
remote
origin
git
gitlab
dartmouth
edu
dfkotz
demonstration
git
fetch
origin
git
gitlab
dartmouth
edu
dfkotz
demonstration
git
push
more
help
see
the
gitlab
ssh
help
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
install
macos
and
using
gtk
engs
labs
notes
reading
resources
examples
install
macos
and
using
gtk
macos
xquartz
enables
you
use
the
window
system
install
xquartz
application
here
provide
two
ways
install
xquartz
application
you
could
either
install
from
official
website
install
with
homebrew
general
recommend
you
use
homebrew
install
and
manage
packages
macos
download
and
install
directly
from
xquartz
install
with
homebrew
there
are
two
steps
homebrew
cask
extension
homebrew
installs
gui
applications
under
the
framework
homebrew
install
homebrew
cask
with
command
brew
tap
caskroom
cask
install
xquartz
with
command
brew
cask
install
xquartz
validate
installation
your
mac
open
xquartz
application
from
the
launchpad
your
mac
see
installed
correctly
will
open
xterm
window
that
does
not
work
immediately
try
restarting
your
computer
validate
connection
remote
server
next
try
running
application
one
the
unix
servers
log
into
unix
server
and
launch
application
such
xclock
xemacs
for
little
fun
try
xeyes
ssh
username
flume
dartmouth
edu
xpdf
the
option
ssh
sets
forwarding
for
ssh
connections
that
sets
secure
tunnel
between
the
program
like
xclock
running
the
server
and
the
xquartz
application
your
mac
the
program
can
create
windows
buttons
menus
etc
all
the
information
flows
through
the
ssh
tunnel
xquartz
which
renders
the
windows
your
mac
works
with
all
unix
servers
xpdf
will
open
pdf
viewer
windows
system
your
local
computer
here
xpdf
window
note
warning
may
show
saying
home
xauthority
does
not
exist
your
first
time
use
the
xauthority
file
will
configured
automatically
the
first
run
from
then
the
warning
should
not
appear
reference
using
windows
your
first
gtk
application
you
need
gui
graphical
user
interface
recommend
the
gtk
library
which
popular
toolkit
for
the
window
system
there
are
two
versions
gtk
libraries
gtk
version
and
gtk
version
gtk
still
alive
but
recommend
the
latest
version
gtk
both
versions
are
ready
use
our
unix
servers
you
need
specify
the
version
work
with
compile
time
the
gtk
example
example
program
below
uses
gtk
opens
window
with
simple
button
shown
below
the
code
feel
free
use
filename
gtk
example
source
https
developer
gnome
org
gtk
stable
gtk
getting
started
html
include
gtk
gtk
static
void
print
hello
gtkwidget
widget
gpointer
data
print
hello
world
static
void
activate
gtkapplication
app
gpointer
user
data
gtkwidget
window
gtkwidget
button
gtkwidget
button
box
window
gtk
application
window
new
app
gtk
window
set
title
gtk
window
window
window
gtk
window
set
default
size
gtk
window
window
button
box
gtk
button
box
new
gtk
orientation
horizontal
gtk
container
add
gtk
container
window
button
box
button
gtk
button
new
with
label
hello
world
signal
connect
button
clicked
callback
print
hello
null
signal
connect
swapped
button
clicked
callback
gtk
widget
destroy
window
gtk
container
add
gtk
container
button
box
button
gtk
widget
show
all
window
int
main
int
argc
char
argv
gtkapplication
app
int
status
app
gtk
application
new
org
gtk
example
application
flags
none
signal
connect
app
activate
callback
activate
null
status
application
run
application
app
argc
argv
object
unref
app
return
status
compiling
with
gtk
use
the
following
command
compile
gtk
example
gcc
pkg
config
cflags
gtk
gtk
example
gtk
example
pkg
config
libs
gtk
pkg
config
cflags
gtk
will
produce
list
header
paths
you
might
use
your
application
and
pkg
config
libs
gtk
will
produce
list
library
paths
notice
the
use
back
ticks
for
bash
command
substitution
more
detailed
explanation
can
found
references
below
which
include
well
written
tutorial
reference
gtk
documentation
getting
started
with
gtk
compiling
gtk
applications
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
homebrew
installation
engs
labs
notes
reading
resources
examples
homebrew
installation
macos
users
are
lucky
because
they
get
all
the
grace
graphical
interface
with
large
ecosystem
applications
make
their
computer
productive
plus
they
have
access
the
full
power
unix
under
the
hood
apple
includes
lot
the
core
unix
commands
and
utilities
default
but
some
the
commands
you
need
want
this
course
need
added
some
these
can
installed
through
the
apple
developer
tool
xcode
but
lots
great
open
source
software
needs
installed
separately
the
easiest
way
install
open
source
software
through
package
manager
linux
users
are
likely
already
familiar
with
this
concept
there
are
several
package
managers
for
macos
but
like
the
one
called
homebrew
easy
install
and
easy
use
for
installing
other
tools
get
started
open
terminal
window
and
browser
window
your
browser
visit
the
homebrew
site
copy
the
one
line
command
near
the
top
the
page
notice
that
simply
asks
you
copy
and
paste
complex
command
into
the
terminal
you
should
never
blindly
copy
paste
shell
commands
without
understanding
what
the
command
will
your
computer
this
case
the
homebrew
page
explains
what
will
and
you
hearing
from
this
safe
tool
install
far
know
switch
terminal
and
paste
that
command
the
installation
will
download
some
files
and
start
running
you
never
run
any
the
developer
oriented
commands
like
gcc
make
your
mac
before
you
may
see
popup
like
the
following
click
install
let
xcode
its
thing
may
large
download
this
installer
downloads
all
the
command
line
tools
from
apple
and
installs
them
your
mac
you
need
these
tools
and
does
homebrew
when
that
completes
press
return
the
terminal
window
allow
the
homebrew
installation
complete
then
you
can
install
new
packages
with
command
line
brew
install
followed
the
package
name
homebrew
actually
calls
them
formulas
you
can
search
for
package
names
with
brew
search
later
periodically
you
should
brew
update
and
then
brew
upgrade
keep
all
your
software
date
this
about
once
month
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
bin
csh
set
nonomatch
set
echo
out
dsym
foreach
makefile
make
clean
end
makefile
for
the
names
program
that
uses
the
bag
module
david
kotz
april
gcc
cflags
wall
pedantic
std
ggdb
prog
names
objs
names
bag
readlinep
libs
phony
all
clean
all
names
executable
depends
object
files
prog
objs
cflags
objs
libs
prog
object
files
depend
include
files
names
bag
readlinep
bag
bag
readlinep
readlinep
clean
prog
dsym
the
project
gutenberg
text
the
sonnets
william
shakespeare
body
color
black
background
white
margin
right
margin
left
font
family
times
new
roman
serif
text
align
justify
text
indent
noindent
text
indent
text
indent
font
size
text
align
center
text
indent
font
size
text
align
center
text
indent
font
size
text
align
center
text
indent
font
size
font
weight
bold
text
align
center
text
indent
font
size
text
align
center
text
indent
font
size
font
weight
bold
text
align
center
text
indent
font
size
text
align
center
text
align
center
text
align
center
text
align
center
text
align
center
text
align
center
poem
text
indent
margin
left
contents
text
indent
margin
left
thought
text
indent
letter
spacing
text
align
center
letter
text
indent
margin
left
margin
right
footnote
text
indent
font
size
margin
left
margin
right
transnote
text
indent
margin
left
margin
right
intro
font
size
text
indent
margin
left
margin
right
quote
text
indent
margin
left
margin
right
finis
font
size
larger
text
align
center
text
indent
margin
left
margin
right
the
project
gutenberg
ebook
shakespeare
sonnets
william
shakespeare
this
ebook
for
the
use
anyone
anywhere
cost
and
with
almost
restrictions
whatsoever
you
may
copy
give
away
use
under
the
terms
the
project
gutenberg
license
included
with
this
ebook
online
www
gutenberg
org
title
shakespeare
sonnets
author
william
shakespeare
posting
date
april
ebook
release
date
september
last
updated
march
language
english
character
set
encoding
iso
start
this
project
gutenberg
ebook
shakespeare
sonnets
produced
joseph
miller
and
embry
riddle
aeronautical
university
library
html
version
haines
the
sonnets
william
shakespeare
from
fairest
creatures
desire
increase
that
thereby
beauty
rose
might
never
die
but
the
riper
should
time
decease
his
tender
heir
might
bear
his
memory
but
thou
contracted
thine
own
bright
eyes
feed
thy
light
flame
with
self
substantial
fuel
making
famine
where
abundance
lies
thyself
thy
foe
thy
sweet
self
too
cruel
thou
that
art
now
the
world
fresh
ornament
and
only
herald
the
gaudy
spring
within
thine
own
bud
buriest
thy
content
and
tender
churl
mak
waste
niggarding
nbsp
nbsp
nbsp
nbsp
pity
the
world
else
this
glutton
nbsp
nbsp
nbsp
nbsp
eat
the
world
due
the
grave
and
thee
when
forty
winters
shall
besiege
thy
brow
and
dig
deep
trenches
thy
beauty
field
thy
youth
proud
livery
gazed
now
will
tatter
weed
small
worth
held
then
being
asked
where
all
thy
beauty
lies
where
all
the
treasure
thy
lusty
days
say
within
thine
own
deep
sunken
eyes
were
all
eating
shame
and
thriftless
praise
how
much
more
praise
deserv
thy
beauty
use
thou
couldst
answer
this
fair
child
mine
shall
sum
count
and
make
old
excuse
proving
his
beauty
succession
thine
nbsp
nbsp
nbsp
nbsp
this
were
new
made
when
thou
art
old
nbsp
nbsp
nbsp
nbsp
and
see
thy
blood
warm
when
thou
feel
cold
iii
look
thy
glass
and
tell
the
face
thou
viewest
now
the
time
that
face
should
form
another
whose
fresh
repair
now
thou
not
renewest
thou
dost
beguile
the
world
unbless
some
mother
for
where
she
fair
whose
unear
womb
disdains
the
tillage
thy
husbandry
who
fond
will
the
tomb
his
self
love
stop
posterity
thou
art
thy
mother
glass
and
she
thee
calls
back
the
lovely
april
her
prime
thou
through
windows
thine
age
shalt
see
despite
wrinkles
this
thy
golden
time
nbsp
nbsp
nbsp
nbsp
but
thou
live
remember
not
nbsp
nbsp
nbsp
nbsp
die
single
and
thine
image
dies
with
thee
unthrifty
loveliness
why
dost
thou
spend
upon
thy
self
thy
beauty
legacy
nature
bequest
gives
nothing
but
doth
lend
and
being
frank
she
lends
those
are
free
then
beauteous
niggard
why
dost
thou
abuse
the
bounteous
largess
given
thee
give
profitless
usurer
why
dost
thou
use
great
sum
sums
yet
canst
not
live
for
having
traffic
with
thy
self
alone
thou
thy
self
thy
sweet
self
dost
deceive
then
how
when
nature
calls
thee
gone
what
acceptable
audit
canst
thou
leave
nbsp
nbsp
nbsp
nbsp
thy
unused
beauty
must
tombed
with
thee
nbsp
nbsp
nbsp
nbsp
which
used
lives
executor
those
hours
that
with
gentle
work
did
frame
the
lovely
gaze
where
every
eye
doth
dwell
will
play
the
tyrants
the
very
same
and
that
unfair
which
fairly
doth
excel
for
never
resting
time
leads
summer
hideous
winter
and
confounds
him
there
sap
checked
with
frost
and
lusty
leaves
quite
gone
beauty
snowed
and
bareness
every
where
then
were
not
summer
distillation
left
liquid
prisoner
pent
walls
glass
beauty
effect
with
beauty
were
bereft
nor
nor
remembrance
what
was
nbsp
nbsp
nbsp
nbsp
but
flowers
distill
though
they
with
winter
meet
nbsp
nbsp
nbsp
nbsp
leese
but
their
show
their
substance
still
lives
sweet
then
let
not
winter
ragged
hand
deface
thee
thy
summer
ere
thou
distill
make
sweet
some
vial
treasure
thou
some
place
with
beauty
treasure
ere
self
kill
that
use
not
forbidden
usury
which
happies
those
that
pay
the
willing
loan
that
for
thy
self
breed
another
thee
ten
times
happier
ten
for
one
ten
times
thy
self
were
happier
than
thou
art
ten
thine
ten
times
refigur
thee
then
what
could
death
thou
shouldst
depart
leaving
thee
living
posterity
nbsp
nbsp
nbsp
nbsp
not
self
will
for
thou
art
much
too
fair
nbsp
nbsp
nbsp
nbsp
death
conquest
and
make
worms
thine
heir
vii
the
orient
when
the
gracious
light
lifts
his
burning
head
each
under
eye
doth
homage
his
new
appearing
sight
serving
with
looks
his
sacred
majesty
and
having
climb
the
steep
heavenly
hill
resembling
strong
youth
his
middle
age
yet
mortal
looks
adore
his
beauty
still
attending
his
golden
pilgrimage
but
when
from
highmost
pitch
with
weary
car
like
feeble
age
reeleth
from
the
day
the
eyes
fore
duteous
now
converted
are
from
his
low
tract
and
look
another
way
nbsp
nbsp
nbsp
nbsp
thou
thyself
outgoing
thy
noon
nbsp
nbsp
nbsp
nbsp
unlook
diest
unless
thou
get
son
viii
music
hear
why
hear
thou
music
sadly
sweets
with
sweets
war
not
joy
delights
joy
why
lov
thou
that
which
thou
receiv
not
gladly
else
receiv
with
pleasure
thine
annoy
the
true
concord
well
tuned
sounds
unions
married
offend
thine
ear
they
but
sweetly
chide
thee
who
confounds
singleness
the
parts
that
thou
shouldst
bear
mark
how
one
string
sweet
husband
another
strikes
each
each
mutual
ordering
resembling
sire
and
child
and
happy
mother
who
all
one
one
pleasing
note
sing
nbsp
nbsp
nbsp
nbsp
whose
speechless
song
being
many
seeming
one
nbsp
nbsp
nbsp
nbsp
sings
this
thee
thou
single
wilt
prove
none
for
fear
wet
widow
eye
that
thou
consum
thy
self
single
life
thou
issueless
shalt
hap
die
the
world
will
wail
thee
like
makeless
wife
the
world
will
thy
widow
and
still
weep
that
thou
form
thee
hast
left
behind
when
every
private
widow
well
may
keep
children
eyes
her
husband
shape
mind
look
what
unthrift
the
world
doth
spend
shifts
but
his
place
for
still
the
world
enjoys
but
beauty
waste
hath
the
world
end
and
kept
unused
the
user
destroys
nbsp
nbsp
nbsp
nbsp
love
toward
others
that
bosom
sits
nbsp
nbsp
nbsp
nbsp
that
himself
such
murd
rous
shame
commits
for
shame
deny
that
thou
bear
love
any
who
for
thy
self
art
unprovident
grant
thou
wilt
thou
art
belov
many
but
that
thou
none
lov
most
evident
for
thou
art
possess
with
murderous
hate
that
gainst
thy
self
thou
stick
not
conspire
seeking
that
beauteous
roof
ruinate
which
repair
should
thy
chief
desire
change
thy
thought
that
may
change
mind
shall
hate
fairer
lodg
than
gentle
love
thy
presence
gracious
and
kind
thyself
least
kind
hearted
prove
nbsp
nbsp
nbsp
nbsp
make
thee
another
self
for
love
nbsp
nbsp
nbsp
nbsp
that
beauty
still
may
live
thine
thee
fast
thou
shalt
wane
fast
thou
grow
one
thine
from
that
which
thou
departest
and
that
fresh
blood
which
youngly
thou
bestow
thou
mayst
call
thine
when
thou
from
youth
convertest
herein
lives
wisdom
beauty
and
increase
without
this
folly
age
and
cold
decay
all
were
minded
the
times
should
cease
and
threescore
year
would
make
the
world
away
let
those
whom
nature
hath
not
made
for
store
harsh
featureless
and
rude
barrenly
perish
look
whom
she
best
endow
she
gave
thee
more
which
bounteous
gift
thou
shouldst
bounty
cherish
nbsp
nbsp
nbsp
nbsp
she
carv
thee
for
her
seal
and
meant
thereby
nbsp
nbsp
nbsp
nbsp
thou
shouldst
print
more
not
let
that
copy
die
xii
when
count
the
clock
that
tells
the
time
and
see
the
brave
day
sunk
hideous
night
when
behold
the
violet
past
prime
and
sable
curls
all
silvered
with
white
when
lofty
trees
see
barren
leaves
which
erst
from
heat
did
canopy
the
herd
and
summer
green
all
girded
sheaves
borne
the
bier
with
white
and
bristly
beard
then
thy
beauty
question
make
that
thou
among
the
wastes
time
must
since
sweets
and
beauties
themselves
forsake
and
die
fast
they
see
others
grow
nbsp
nbsp
nbsp
nbsp
and
nothing
gainst
time
scythe
can
make
defence
nbsp
nbsp
nbsp
nbsp
save
breed
brave
him
when
takes
thee
hence
xiii
that
you
were
your
self
but
love
you
are
longer
yours
than
you
your
self
here
live
against
this
coming
end
you
should
prepare
and
your
sweet
semblance
some
other
give
should
that
beauty
which
you
hold
lease
find
determination
then
you
were
yourself
again
after
yourself
decease
when
your
sweet
issue
your
sweet
form
should
bear
who
lets
fair
house
fall
decay
which
husbandry
honour
might
uphold
against
the
stormy
gusts
winter
day
and
barren
rage
death
eternal
cold
nbsp
nbsp
nbsp
nbsp
none
but
unthrifts
dear
love
you
know
nbsp
nbsp
nbsp
nbsp
you
had
father
let
your
son
say
xiv
not
from
the
stars
judgement
pluck
and
yet
methinks
have
astronomy
but
not
tell
good
evil
luck
plagues
dearths
seasons
quality
nor
can
fortune
brief
minutes
tell
pointing
each
his
thunder
rain
and
wind
say
with
princes
shall
well
oft
predict
that
heaven
find
but
from
thine
eyes
knowledge
derive
and
constant
stars
them
read
such
art
truth
and
beauty
shall
together
thrive
from
thyself
store
thou
wouldst
convert
nbsp
nbsp
nbsp
nbsp
else
thee
this
prognosticate
nbsp
nbsp
nbsp
nbsp
thy
end
truth
and
beauty
doom
and
date
when
consider
every
thing
that
grows
holds
perfection
but
little
moment
that
this
huge
stage
presenteth
nought
but
shows
whereon
the
stars
secret
influence
comment
when
perceive
that
men
plants
increase
cheered
and
checked
even
the
self
same
sky
vaunt
their
youthful
sap
height
decrease
and
wear
their
brave
state
out
memory
then
the
conceit
this
inconstant
stay
sets
you
most
rich
youth
before
sight
where
wasteful
time
debateth
with
decay
change
your
day
youth
sullied
night
nbsp
nbsp
nbsp
nbsp
and
all
war
with
time
for
love
you
nbsp
nbsp
nbsp
nbsp
takes
from
you
engraft
you
new
xvi
but
wherefore
not
you
mightier
way
make
war
upon
this
bloody
tyrant
time
and
fortify
your
self
your
decay
with
means
more
blessed
than
barren
rhyme
now
stand
you
the
top
happy
hours
and
many
maiden
gardens
yet
unset
with
virtuous
wish
would
bear
you
living
flowers
much
liker
than
your
painted
counterfeit
should
the
lines
life
that
life
repair
which
this
time
pencil
pupil
pen
neither
inward
worth
nor
outward
fair
can
make
you
live
your
self
eyes
men
nbsp
nbsp
nbsp
nbsp
give
away
yourself
keeps
yourself
still
nbsp
nbsp
nbsp
nbsp
and
you
must
live
drawn
your
own
sweet
skill
xvii
who
will
believe
verse
time
come
were
fill
with
your
most
high
deserts
though
yet
heaven
knows
but
tomb
which
hides
your
life
and
shows
not
half
your
parts
could
write
the
beauty
your
eyes
and
fresh
numbers
number
all
your
graces
the
age
come
would
say
this
poet
lies
such
heavenly
touches
touch
earthly
faces
should
papers
yellow
with
their
age
scorn
like
old
men
less
truth
than
tongue
and
your
true
rights
term
poet
rage
and
stretched
metre
antique
song
nbsp
nbsp
nbsp
nbsp
but
were
some
child
yours
alive
that
time
nbsp
nbsp
nbsp
nbsp
you
should
live
twice
and
rhyme
xviii
shall
compare
thee
summer
day
thou
art
more
lovely
and
more
temperate
rough
winds
shake
the
darling
buds
may
and
summer
lease
hath
all
too
short
date
sometime
too
hot
the
eye
heaven
shines
and
often
his
gold
complexion
dimm
and
every
fair
from
fair
sometime
declines
chance
nature
changing
course
untrimm
but
thy
eternal
summer
shall
not
fade
nor
lose
possession
that
fair
thou
nor
shall
death
brag
thou
wander
his
shade
when
eternal
lines
time
thou
grow
nbsp
nbsp
nbsp
nbsp
long
men
can
breathe
eyes
can
see
nbsp
nbsp
nbsp
nbsp
long
lives
this
and
this
gives
life
thee
xix
devouring
time
blunt
thou
the
lion
paws
and
make
the
earth
devour
her
own
sweet
brood
pluck
the
keen
teeth
from
the
fierce
tiger
jaws
and
burn
the
long
liv
phoenix
her
blood
make
glad
and
sorry
seasons
thou
fleets
and
whate
thou
wilt
swift
footed
time
the
wide
world
and
all
her
fading
sweets
but
forbid
thee
one
most
heinous
crime
carve
not
with
thy
hours
love
fair
brow
nor
draw
lines
there
with
thine
antique
pen
him
thy
course
untainted
allow
for
beauty
pattern
succeeding
men
nbsp
nbsp
nbsp
nbsp
yet
thy
worst
old
time
despite
thy
wrong
nbsp
nbsp
nbsp
nbsp
love
shall
verse
ever
live
young
woman
face
with
nature
own
hand
painted
hast
thou
the
master
mistress
passion
woman
gentle
heart
but
not
acquainted
with
shifting
change
false
women
fashion
eye
more
bright
than
theirs
less
false
rolling
gilding
the
object
whereupon
gazeth
man
hue
all
hues
his
controlling
which
steals
men
eyes
and
women
souls
amazeth
and
for
woman
wert
thou
first
created
till
nature
she
wrought
thee
fell
doting
and
addition
thee
defeated
adding
one
thing
purpose
nothing
nbsp
nbsp
nbsp
nbsp
but
since
she
prick
thee
out
for
women
pleasure
nbsp
nbsp
nbsp
nbsp
mine
thy
love
and
thy
love
use
their
treasure
xxi
not
with
with
that
muse
stirr
painted
beauty
his
verse
who
heaven
itself
for
ornament
doth
use
and
every
fair
with
his
fair
doth
rehearse
making
couplement
proud
compare
with
sun
and
moon
with
earth
and
sea
rich
gems
with
april
first
born
flowers
and
all
things
rare
that
heaven
air
this
huge
rondure
hems
let
true
love
but
truly
write
and
then
believe
love
fair
any
mother
child
though
not
bright
those
gold
candles
fix
heaven
air
nbsp
nbsp
nbsp
nbsp
let
them
say
more
that
like
hearsay
well
nbsp
nbsp
nbsp
nbsp
will
not
praise
that
purpose
not
sell
xxii
glass
shall
not
persuade
old
long
youth
and
thou
are
one
date
but
when
thee
time
furrows
behold
then
look
death
days
should
expiate
for
all
that
beauty
that
doth
cover
thee
but
the
seemly
raiment
heart
which
thy
breast
doth
live
thine
how
can
then
elder
than
thou
art
therefore
love
thyself
wary
not
for
myself
but
for
thee
will
bearing
thy
heart
which
will
keep
chary
tender
nurse
her
babe
from
faring
ill
nbsp
nbsp
nbsp
nbsp
presume
not
thy
heart
when
mine
slain
nbsp
nbsp
nbsp
nbsp
thou
gav
thine
not
give
back
again
xxiii
unperfect
actor
the
stage
who
with
his
fear
put
beside
his
part
some
fierce
thing
replete
with
too
much
rage
whose
strength
abundance
weakens
his
own
heart
for
fear
trust
forget
say
the
perfect
ceremony
love
rite
and
mine
own
love
strength
seem
decay
ercharg
with
burthen
mine
own
love
might
let
looks
then
the
eloquence
and
dumb
presagers
speaking
breast
who
plead
for
love
and
look
for
recompense
more
than
that
tongue
that
more
hath
more
express
nbsp
nbsp
nbsp
nbsp
learn
read
what
silent
love
hath
writ
nbsp
nbsp
nbsp
nbsp
hear
with
eyes
belongs
love
fine
wit
xxiv
mine
eye
hath
play
the
painter
and
hath
stell
thy
beauty
form
table
heart
body
the
frame
wherein
tis
held
and
perspective
best
painter
art
for
through
the
painter
must
you
see
his
skill
find
where
your
true
image
pictur
lies
which
bosom
shop
hanging
still
that
hath
his
windows
glazed
with
thine
eyes
now
see
what
good
turns
eyes
for
eyes
have
done
mine
eyes
have
drawn
thy
shape
and
thine
for
are
windows
breast
where
through
the
sun
delights
peep
gaze
therein
thee
nbsp
nbsp
nbsp
nbsp
yet
eyes
this
cunning
want
grace
their
art
nbsp
nbsp
nbsp
nbsp
they
draw
but
what
they
see
know
not
the
heart
xxv
let
those
who
are
favour
with
their
stars
public
honour
and
proud
titles
boast
whilst
whom
fortune
such
triumph
bars
unlook
for
joy
that
honour
most
great
princes
favourites
their
fair
leaves
spread
but
the
marigold
the
sun
eye
and
themselves
their
pride
lies
buried
for
frown
they
their
glory
die
the
painful
warrior
famoused
for
fight
after
thousand
victories
once
foil
from
the
book
honour
razed
quite
and
all
the
rest
forgot
for
which
toil
then
happy
that
love
and
belov
where
may
not
remove
nor
remov
xxvi
lord
love
whom
vassalage
thy
merit
hath
duty
strongly
knit
thee
send
this
written
embassage
witness
duty
not
show
wit
duty
great
which
wit
poor
mine
may
make
seem
bare
wanting
words
show
but
that
hope
some
good
conceit
thine
thy
soul
thought
all
naked
will
bestow
till
whatsoever
star
that
guides
moving
points
graciously
with
fair
aspect
and
puts
apparel
tatter
loving
show
worthy
thy
sweet
respect
nbsp
nbsp
nbsp
nbsp
then
may
dare
boast
how
love
thee
nbsp
nbsp
nbsp
nbsp
till
then
not
show
head
where
thou
mayst
prove
xxvii
weary
with
toil
haste
bed
the
dear
respose
for
limbs
with
travel
tir
but
then
begins
journey
head
work
mind
when
body
work
expired
for
then
thoughts
from
far
where
abide
intend
zealous
pilgrimage
thee
and
keep
drooping
eyelids
open
wide
looking
darkness
which
the
blind
see
save
that
soul
imaginary
sight
presents
thy
shadow
sightless
view
which
like
jewel
hung
ghastly
night
makes
black
night
beauteous
and
her
old
face
new
nbsp
nbsp
nbsp
nbsp
thus
day
limbs
night
mind
nbsp
nbsp
nbsp
nbsp
for
thee
and
for
myself
quiet
find
xxviii
how
can
then
return
happy
plight
that
debarre
the
benefit
rest
when
day
oppression
not
eas
night
but
day
night
and
night
day
oppress
and
each
though
enemies
either
reign
consent
shake
hands
torture
the
one
toil
the
other
complain
how
far
toil
still
farther
off
from
thee
tell
the
day
please
him
thou
art
bright
and
dost
him
grace
when
clouds
blot
the
heaven
flatter
the
swart
complexion
night
when
sparkling
stars
twire
not
thou
gild
the
even
nbsp
nbsp
nbsp
nbsp
but
day
doth
daily
draw
sorrows
longer
nbsp
nbsp
nbsp
nbsp
and
night
doth
nightly
make
grief
length
seem
stronger
xxix
when
disgrace
with
fortune
and
men
eyes
all
alone
beweep
outcast
state
and
trouble
deaf
heaven
with
bootless
cries
and
look
upon
myself
and
curse
fate
wishing
like
one
more
rich
hope
featur
like
him
like
him
with
friends
possess
desiring
this
man
art
and
that
man
scope
with
what
most
enjoy
contented
least
yet
these
thoughts
self
almost
despising
haply
think
thee
and
then
state
like
the
lark
break
day
arising
from
sullen
earth
sings
hymns
heaven
gate
nbsp
nbsp
nbsp
nbsp
for
thy
sweet
love
remember
such
wealth
brings
nbsp
nbsp
nbsp
nbsp
that
then
scorn
change
state
with
kings
xxx
when
the
sessions
sweet
silent
thought
summon
remembrance
things
past
sigh
the
lack
many
thing
sought
and
with
old
woes
new
wail
dear
time
waste
then
can
drown
eye
unused
flow
for
precious
friends
hid
death
dateless
night
and
weep
afresh
love
long
since
cancell
woe
and
moan
the
expense
many
vanish
sight
then
can
grieve
grievances
foregone
and
heavily
from
woe
woe
tell
the
sad
account
fore
bemoaned
moan
which
new
pay
not
paid
before
nbsp
nbsp
nbsp
nbsp
but
the
while
think
thee
dear
friend
nbsp
nbsp
nbsp
nbsp
all
losses
are
restor
and
sorrows
end
xxxi
thy
bosom
endeared
with
all
hearts
which
lacking
have
supposed
dead
and
there
reigns
love
and
all
love
loving
parts
and
all
those
friends
which
thought
buried
how
many
holy
and
obsequious
tear
hath
dear
religious
love
stol
from
mine
eye
interest
the
dead
which
now
appear
but
things
remov
that
hidden
thee
lie
thou
art
the
grave
where
buried
love
doth
live
hung
with
the
trophies
lovers
gone
who
all
their
parts
thee
did
give
that
due
many
now
thine
alone
nbsp
nbsp
nbsp
nbsp
their
images
lov
view
thee
nbsp
nbsp
nbsp
nbsp
and
thou
all
they
hast
all
the
all
xxxii
thou
survive
well
contented
day
when
that
churl
death
bones
with
dust
shall
cover
and
shalt
fortune
once
more
survey
these
poor
rude
lines
thy
deceased
lover
compare
them
with
the
bett
ring
the
time
and
though
they
outstripp
every
pen
reserve
them
for
love
not
for
their
rhyme
exceeded
the
height
happier
men
then
vouchsafe
but
this
loving
thought
had
friend
muse
grown
with
this
growing
age
dearer
birth
than
this
his
love
had
brought
march
ranks
better
equipage
nbsp
nbsp
nbsp
nbsp
but
since
died
and
poets
better
prove
nbsp
nbsp
nbsp
nbsp
theirs
for
their
style
read
his
for
his
love
xxxiii
full
many
glorious
morning
have
seen
flatter
the
mountain
tops
with
sovereign
eye
kissing
with
golden
face
the
meadows
green
gilding
pale
streams
with
heavenly
alchemy
anon
permit
the
basest
clouds
ride
with
ugly
rack
his
celestial
face
and
from
the
forlorn
world
his
visage
hide
stealing
unseen
west
with
this
disgrace
even
sun
one
early
morn
did
shine
with
all
triumphant
splendour
brow
but
out
alack
was
but
one
hour
mine
the
region
cloud
hath
mask
him
from
now
nbsp
nbsp
nbsp
nbsp
yet
him
for
this
love
whit
disdaineth
nbsp
nbsp
nbsp
nbsp
suns
the
world
may
stain
when
heaven
sun
staineth
xxxiv
why
didst
thou
promise
such
beauteous
day
and
make
travel
forth
without
cloak
let
base
clouds
ertake
way
hiding
thy
bravery
their
rotten
smoke
tis
not
enough
that
through
the
cloud
thou
break
dry
the
rain
storm
beaten
face
for
man
well
such
salve
can
speak
that
heals
the
wound
and
cures
not
the
disgrace
nor
can
thy
shame
give
physic
grief
though
thou
repent
yet
have
still
the
loss
the
offender
sorrow
lends
but
weak
relief
him
that
bears
the
strong
offence
cross
nbsp
nbsp
nbsp
nbsp
but
those
tears
are
pearl
which
thy
love
sheds
nbsp
nbsp
nbsp
nbsp
and
they
are
rich
and
ransom
all
ill
deeds
xxxv
more
griev
that
which
thou
hast
done
roses
have
thorns
and
silver
fountains
mud
clouds
and
eclipses
stain
both
moon
and
sun
and
loathsome
canker
lives
sweetest
bud
all
men
make
faults
and
even
this
authorizing
thy
trespass
with
compare
myself
corrupting
salving
thy
amiss
excusing
thy
sins
more
than
thy
sins
are
for
thy
sensual
fault
bring
sense
thy
adverse
party
thy
advocate
and
gainst
myself
lawful
plea
commence
such
civil
war
love
and
hate
nbsp
nbsp
nbsp
nbsp
that
accessary
needs
must
nbsp
nbsp
nbsp
nbsp
that
sweet
thief
which
sourly
robs
from
xxxvi
let
confess
that
two
must
twain
although
our
undivided
loves
are
one
shall
those
blots
that
with
remain
without
thy
help
borne
alone
our
two
loves
there
but
one
respect
though
our
lives
separable
spite
which
though
alter
not
love
sole
effect
yet
doth
steal
sweet
hours
from
love
delight
may
not
evermore
acknowledge
thee
lest
bewailed
guilt
should
thee
shame
nor
thou
with
public
kindness
honour
unless
thou
take
that
honour
from
thy
name
nbsp
nbsp
nbsp
nbsp
but
not
love
thee
such
sort
nbsp
nbsp
nbsp
nbsp
thou
being
mine
mine
thy
good
report
xxxvii
decrepit
father
takes
delight
see
his
active
child
deeds
youth
made
lame
fortune
dearest
spite
take
all
comfort
thy
worth
and
truth
for
whether
beauty
birth
wealth
wit
any
these
all
all
more
entitled
thy
parts
crowned
sit
make
love
engrafted
this
store
then
not
lame
poor
nor
despis
whilst
that
this
shadow
doth
such
substance
give
that
thy
abundance
suffic
and
part
all
thy
glory
live
nbsp
nbsp
nbsp
nbsp
look
what
best
that
best
wish
thee
nbsp
nbsp
nbsp
nbsp
this
wish
have
then
ten
times
happy
xxxviii
how
can
muse
want
subject
invent
while
thou
dost
breathe
that
pour
into
verse
thine
own
sweet
argument
too
excellent
for
every
vulgar
paper
rehearse
give
thy
self
the
thanks
aught
worthy
perusal
stand
against
thy
sight
for
who
dumb
that
cannot
write
thee
when
thou
thy
self
dost
give
invention
light
thou
the
tenth
muse
ten
times
more
worth
than
those
old
nine
which
rhymers
invocate
and
that
calls
thee
let
him
bring
forth
eternal
numbers
outlive
long
date
nbsp
nbsp
nbsp
nbsp
slight
muse
please
these
curious
days
nbsp
nbsp
nbsp
nbsp
the
pain
mine
but
thine
shall
the
praise
xxxix
how
thy
worth
with
manners
may
sing
when
thou
art
all
the
better
part
what
can
mine
own
praise
mine
own
self
bring
and
what
but
mine
own
when
praise
thee
even
for
this
let
divided
live
and
our
dear
love
lose
name
single
one
that
this
separation
may
give
that
due
thee
which
thou
deserv
alone
absence
what
torment
wouldst
thou
prove
were
not
thy
sour
leisure
gave
sweet
leave
entertain
the
time
with
thoughts
love
which
time
and
thoughts
sweetly
doth
deceive
nbsp
nbsp
nbsp
nbsp
and
that
thou
teachest
how
make
one
twain
nbsp
nbsp
nbsp
nbsp
praising
him
here
who
doth
hence
remain
take
all
loves
love
yea
take
them
all
what
hast
thou
then
more
than
thou
hadst
before
love
love
that
thou
mayst
true
love
call
all
mine
was
thine
before
thou
hadst
this
more
then
for
love
thou
love
receivest
cannot
blame
thee
for
love
thou
usest
but
yet
blam
thou
thy
self
deceivest
wilful
taste
what
thyself
refusest
forgive
thy
robbery
gentle
thief
although
thou
steal
thee
all
poverty
and
yet
love
knows
greater
grief
bear
love
wrong
than
hate
known
injury
nbsp
nbsp
nbsp
nbsp
lascivious
grace
whom
all
ill
well
shows
nbsp
nbsp
nbsp
nbsp
kill
with
spites
yet
must
not
foes
xli
those
pretty
wrongs
that
liberty
commits
when
sometime
absent
from
thy
heart
thy
beauty
and
thy
years
full
well
befits
for
still
temptation
follows
where
thou
art
gentle
thou
art
and
therefore
won
beauteous
thou
art
therefore
assail
and
when
woman
woos
what
woman
son
will
sourly
leave
her
till
have
prevail
but
yet
thou
mightst
seat
forbear
and
chide
thy
beauty
and
thy
straying
youth
who
lead
thee
their
riot
even
there
where
thou
art
forced
break
twofold
truth
nbsp
nbsp
nbsp
nbsp
hers
thy
beauty
tempting
her
thee
nbsp
nbsp
nbsp
nbsp
thine
thy
beauty
being
false
xlii
that
thou
hast
her
not
all
grief
and
yet
may
said
loved
her
dearly
that
she
hath
thee
wailing
chief
loss
love
that
touches
more
nearly
loving
offenders
thus
will
excuse
thou
dost
love
her
because
thou
know
love
her
and
for
sake
even
doth
she
abuse
suffering
friend
for
sake
approve
her
lose
thee
loss
love
gain
and
losing
her
friend
hath
found
that
loss
both
find
each
other
and
lose
both
twain
and
both
for
sake
lay
this
cross
nbsp
nbsp
nbsp
nbsp
but
here
the
joy
friend
and
are
one
nbsp
nbsp
nbsp
nbsp
sweet
flattery
then
she
loves
but
alone
xliii
when
most
wink
then
mine
eyes
best
see
for
all
the
day
they
view
things
unrespected
but
when
sleep
dreams
they
look
thee
and
darkly
bright
are
bright
dark
directed
then
thou
whose
shadow
shadows
doth
make
bright
how
would
thy
shadow
form
form
happy
show
the
clear
day
with
thy
much
clearer
light
when
unseeing
eyes
thy
shade
shines
how
would
say
mine
eyes
blessed
made
looking
thee
the
living
day
when
dead
night
thy
fair
imperfect
shade
through
heavy
sleep
sightless
eyes
doth
stay
nbsp
nbsp
nbsp
nbsp
all
days
are
nights
see
till
see
thee
nbsp
nbsp
nbsp
nbsp
and
nights
bright
days
when
dreams
show
thee
xliv
the
dull
substance
flesh
were
thought
injurious
distance
should
not
stop
way
for
then
despite
space
would
brought
from
limits
far
remote
where
thou
dost
stay
matter
then
although
foot
did
stand
upon
the
farthest
earth
remov
from
thee
for
nimble
thought
can
jump
both
sea
and
land
soon
think
the
place
where
would
but
thought
kills
that
not
thought
leap
large
lengths
miles
when
thou
art
gone
but
that
much
earth
and
water
wrought
must
attend
time
leisure
with
moan
nbsp
nbsp
nbsp
nbsp
receiving
nought
elements
slow
nbsp
nbsp
nbsp
nbsp
but
heavy
tears
badges
either
woe
xlv
the
other
two
slight
air
and
purging
fire
are
both
with
thee
wherever
abide
the
first
thought
the
other
desire
these
present
absent
with
swift
motion
slide
for
when
these
quicker
elements
are
gone
tender
embassy
love
thee
life
being
made
four
with
two
alone
sinks
down
death
oppress
with
melancholy
until
life
composition
recur
those
swift
messengers
return
from
thee
who
even
but
now
come
back
again
assur
thy
fair
health
recounting
nbsp
nbsp
nbsp
nbsp
this
told
joy
but
then
longer
glad
nbsp
nbsp
nbsp
nbsp
send
them
back
again
and
straight
grow
sad
xlvi
mine
eye
and
heart
are
mortal
war
how
divide
the
conquest
thy
sight
mine
eye
heart
thy
picture
sight
would
bar
heart
mine
eye
the
freedom
that
right
heart
doth
plead
that
thou
him
dost
lie
closet
never
pierc
with
crystal
eyes
but
the
defendant
doth
that
plea
deny
and
says
him
thy
fair
appearance
lies
side
this
title
impannelled
quest
thoughts
all
tenants
the
heart
and
their
verdict
determined
the
clear
eye
moiety
and
the
dear
heart
part
nbsp
nbsp
nbsp
nbsp
thus
mine
eye
due
thy
outward
part
nbsp
nbsp
nbsp
nbsp
and
heart
right
thy
inward
love
heart
xlvii
betwixt
mine
eye
and
heart
league
took
and
each
doth
good
turns
now
unto
the
other
when
that
mine
eye
famish
for
look
heart
love
with
sighs
himself
doth
smother
with
love
picture
then
eye
doth
feast
and
the
painted
banquet
bids
heart
another
time
mine
eye
heart
guest
and
his
thoughts
love
doth
share
part
either
thy
picture
love
thyself
away
art
present
still
with
for
thou
not
farther
than
thoughts
canst
move
and
still
with
them
and
they
with
thee
nbsp
nbsp
nbsp
nbsp
they
sleep
thy
picture
sight
nbsp
nbsp
nbsp
nbsp
awakes
heart
heart
and
eye
delight
xlviii
how
careful
was
when
took
way
each
trifle
under
truest
bars
thrust
that
use
might
unused
stay
from
hands
falsehood
sure
wards
trust
but
thou
whom
jewels
trifles
are
most
worthy
comfort
now
greatest
grief
thou
best
dearest
and
mine
only
care
art
left
the
prey
every
vulgar
thief
thee
have
not
lock
any
chest
save
where
thou
art
not
though
feel
thou
art
within
the
gentle
closure
breast
from
whence
pleasure
thou
mayst
come
and
part
nbsp
nbsp
nbsp
nbsp
and
even
thence
thou
wilt
stol
fear
nbsp
nbsp
nbsp
nbsp
for
truth
proves
thievish
for
prize
dear
xlix
against
that
time
ever
that
time
come
when
shall
see
thee
frown
defects
when
thy
love
hath
cast
his
utmost
sum
call
that
audit
advis
respects
against
that
time
when
thou
shalt
strangely
pass
and
scarcely
greet
with
that
sun
thine
eye
when
love
converted
from
the
thing
was
shall
reasons
find
settled
gravity
against
that
time
ensconce
here
within
the
knowledge
mine
own
desert
and
this
hand
against
self
uprear
guard
the
lawful
reasons
thy
part
nbsp
nbsp
nbsp
nbsp
leave
poor
thou
hast
the
strength
laws
nbsp
nbsp
nbsp
nbsp
since
why
love
can
allege
cause
how
heavy
journey
the
way
when
what
seek
weary
travel
end
doth
teach
that
ease
and
that
repose
say
thus
far
the
miles
are
measured
from
thy
friend
the
beast
that
bears
tired
with
woe
plods
dully
bear
that
weight
some
instinct
the
wretch
did
know
his
rider
lov
not
speed
being
made
from
thee
the
bloody
spur
cannot
provoke
him
that
sometimes
anger
thrusts
into
his
hide
which
heavily
answers
with
groan
more
sharp
than
spurring
his
side
nbsp
nbsp
nbsp
nbsp
for
that
same
groan
doth
put
this
mind
nbsp
nbsp
nbsp
nbsp
grief
lies
onward
and
joy
behind
thus
can
love
excuse
the
slow
offence
dull
bearer
when
from
thee
speed
from
where
thou
art
why
should
haste
thence
till
return
posting
need
what
excuse
will
poor
beast
then
find
when
swift
extremity
can
seem
but
slow
then
should
spur
though
mounted
the
wind
winged
speed
motion
shall
know
then
can
horse
with
desire
keep
pace
therefore
desire
perfect
love
being
made
shall
neigh
dull
flesh
his
fiery
race
but
love
for
love
thus
shall
excuse
jade
nbsp
nbsp
nbsp
nbsp
since
from
thee
going
went
wilful
slow
nbsp
nbsp
nbsp
nbsp
towards
thee
run
and
give
him
leave
lii
the
rich
whose
blessed
key
can
bring
him
his
sweet
locked
treasure
the
which
will
not
every
hour
survey
for
blunting
the
fine
point
seldom
pleasure
therefore
are
feasts
solemn
and
rare
since
seldom
coming
that
long
year
set
like
stones
worth
they
thinly
placed
are
captain
jewels
the
carcanet
the
time
that
keeps
you
chest
the
wardrobe
which
the
robe
doth
hide
make
some
special
instant
special
blest
new
unfolding
his
imprison
pride
nbsp
nbsp
nbsp
nbsp
blessed
are
you
whose
worthiness
gives
scope
nbsp
nbsp
nbsp
nbsp
being
had
triumph
being
lacked
hope
liii
what
your
substance
whereof
are
you
made
that
millions
strange
shadows
you
tend
since
every
one
hath
every
one
one
shade
and
you
but
one
can
every
shadow
lend
describe
adonis
and
the
counterfeit
poorly
imitated
after
you
helen
cheek
all
art
beauty
set
and
you
grecian
tires
are
painted
new
speak
the
spring
and
foison
the
year
the
one
doth
shadow
your
beauty
show
the
other
your
bounty
doth
appear
and
you
every
blessed
shape
know
nbsp
nbsp
nbsp
nbsp
all
external
grace
you
have
some
part
nbsp
nbsp
nbsp
nbsp
but
you
like
none
none
you
for
constant
heart
liv
how
much
more
doth
beauty
beauteous
seem
that
sweet
ornament
which
truth
doth
give
the
rose
looks
fair
but
fairer
deem
for
that
sweet
odour
which
doth
live
the
canker
blooms
have
full
deep
dye
the
perfumed
tincture
the
roses
hang
such
thorns
and
play
wantonly
when
summer
breath
their
masked
buds
discloses
but
for
their
virtue
only
their
show
they
live
unwoo
and
unrespected
fade
die
themselves
sweet
roses
not
their
sweet
deaths
are
sweetest
odours
made
nbsp
nbsp
nbsp
nbsp
and
you
beauteous
and
lovely
youth
nbsp
nbsp
nbsp
nbsp
when
that
shall
vade
verse
distills
your
truth
not
marble
nor
the
gilded
monuments
princes
shall
outlive
this
powerful
rhyme
but
you
shall
shine
more
bright
these
contents
than
unswept
stone
besmear
with
sluttish
time
when
wasteful
war
shall
statues
overturn
and
broils
root
out
the
work
masonry
nor
mars
his
sword
nor
war
quick
fire
shall
burn
the
living
record
your
memory
gainst
death
and
all
oblivious
enmity
shall
you
pace
forth
your
praise
shall
still
find
room
even
the
eyes
all
posterity
that
wear
this
world
out
the
ending
doom
nbsp
nbsp
nbsp
nbsp
till
the
judgment
that
yourself
arise
nbsp
nbsp
nbsp
nbsp
you
live
this
and
dwell
lovers
eyes
lvi
sweet
love
renew
thy
force
not
said
thy
edge
should
blunter
than
appetite
which
but
day
feeding
allay
morrow
sharpened
his
former
might
love
thou
although
day
thou
fill
thy
hungry
eyes
even
till
they
wink
with
fulness
morrow
see
again
and
not
kill
the
spirit
love
with
perpetual
dulness
let
this
sad
interim
like
the
ocean
which
parts
the
shore
where
two
contracted
new
come
daily
the
banks
that
when
they
see
return
love
more
blest
may
the
view
nbsp
nbsp
nbsp
nbsp
call
winter
which
being
full
care
nbsp
nbsp
nbsp
nbsp
makes
summer
welcome
thrice
more
wished
more
rare
lvii
being
your
slave
what
should
but
tend
upon
the
hours
and
times
your
desire
have
precious
time
all
spend
nor
services
till
you
require
nor
dare
chide
the
world
without
end
hour
whilst
sovereign
watch
the
clock
for
you
nor
think
the
bitterness
absence
sour
when
you
have
bid
your
servant
once
adieu
nor
dare
question
with
jealous
thought
where
you
may
your
affairs
suppose
but
like
sad
slave
stay
and
think
nought
save
where
you
are
how
happy
you
make
those
nbsp
nbsp
nbsp
nbsp
true
fool
love
that
your
will
nbsp
nbsp
nbsp
nbsp
though
you
anything
thinks
ill
lviii
that
god
forbid
that
made
first
your
slave
should
thought
control
your
times
pleasure
your
hand
the
account
hours
crave
being
your
vassal
bound
stay
your
leisure
let
suffer
being
your
beck
the
imprison
absence
your
liberty
and
patience
tame
sufferance
bide
each
check
without
accusing
you
injury
where
you
list
your
charter
strong
that
you
yourself
may
privilage
your
time
what
you
will
you
doth
belong
yourself
pardon
self
doing
crime
nbsp
nbsp
nbsp
nbsp
wait
though
waiting
hell
nbsp
nbsp
nbsp
nbsp
not
blame
your
pleasure
ill
well
lix
there
nothing
new
but
that
which
hath
been
before
how
are
our
brains
beguil
which
labouring
for
invention
bear
amiss
the
second
burthen
former
child
that
record
could
with
backward
look
even
five
hundred
courses
the
sun
show
your
image
some
antique
book
since
mind
first
character
was
done
that
might
see
what
the
old
world
could
say
this
composed
wonder
your
frame
are
mended
better
they
whether
revolution
the
same
nbsp
nbsp
nbsp
nbsp
sure
the
wits
former
days
nbsp
nbsp
nbsp
nbsp
subjects
worse
have
given
admiring
praise
like
the
waves
make
towards
the
pebbled
shore
our
minutes
hasten
their
end
each
changing
place
with
that
which
goes
before
sequent
toil
all
forwards
contend
nativity
once
the
main
light
crawls
maturity
wherewith
being
crown
crooked
eclipses
gainst
his
glory
fight
and
time
that
gave
doth
now
his
gift
confound
time
doth
transfix
the
flourish
set
youth
and
delves
the
parallels
beauty
brow
feeds
the
rarities
nature
truth
and
nothing
stands
but
for
his
scythe
mow
nbsp
nbsp
nbsp
nbsp
and
yet
times
hope
verse
shall
stand
nbsp
nbsp
nbsp
nbsp
praising
thy
worth
despite
his
cruel
hand
lxi
thy
will
thy
image
should
keep
open
heavy
eyelids
the
weary
night
dost
thou
desire
slumbers
should
broken
while
shadows
like
thee
mock
sight
thy
spirit
that
thou
send
from
thee
far
from
home
into
deeds
pry
find
out
shames
and
idle
hours
the
scope
and
tenure
thy
jealousy
thy
love
though
much
not
great
love
that
keeps
mine
eye
awake
mine
own
true
love
that
doth
rest
defeat
play
the
watchman
ever
for
thy
sake
nbsp
nbsp
nbsp
nbsp
for
thee
watch
whilst
thou
dost
wake
elsewhere
nbsp
nbsp
nbsp
nbsp
from
far
off
with
others
all
too
near
lxii
sin
self
love
possesseth
all
mine
eye
and
all
soul
and
all
every
part
and
for
this
sin
there
remedy
grounded
inward
heart
methinks
face
gracious
mine
shape
true
truth
such
account
and
for
myself
mine
own
worth
define
all
other
all
worths
surmount
but
when
glass
shows
myself
indeed
beated
and
chopp
with
tanned
antiquity
mine
own
self
love
quite
contrary
read
self
self
loving
were
iniquity
nbsp
nbsp
nbsp
nbsp
tis
thee
myself
that
for
myself
praise
nbsp
nbsp
nbsp
nbsp
painting
age
with
beauty
thy
days
lxiii
against
love
shall
now
with
time
injurious
hand
crush
and
erworn
when
hours
have
drain
his
blood
and
fill
his
brow
with
lines
and
wrinkles
when
his
youthful
morn
hath
travell
age
steepy
night
and
all
those
beauties
whereof
now
king
are
vanishing
vanished
out
sight
stealing
away
the
treasure
his
spring
for
such
time
now
fortify
against
confounding
age
cruel
knife
that
shall
never
cut
from
memory
sweet
love
beauty
though
lover
life
nbsp
nbsp
nbsp
nbsp
his
beauty
shall
these
black
lines
seen
nbsp
nbsp
nbsp
nbsp
and
they
shall
live
and
them
still
green
lxiv
when
have
seen
time
fell
hand
defac
the
rich
proud
cost
outworn
buried
age
when
sometime
lofty
towers
see
down
raz
and
brass
eternal
slave
mortal
rage
when
have
seen
the
hungry
ocean
gain
advantage
the
kingdom
the
shore
and
the
firm
soil
win
the
watery
main
increasing
store
with
loss
and
loss
with
store
when
have
seen
such
interchange
state
state
itself
confounded
decay
ruin
hath
taught
thus
ruminate
that
time
will
come
and
take
love
away
nbsp
nbsp
nbsp
nbsp
this
thought
death
which
cannot
choose
nbsp
nbsp
nbsp
nbsp
but
weep
have
that
which
fears
lose
lxv
since
brass
nor
stone
nor
earth
nor
boundless
sea
but
sad
mortality
ersways
their
power
how
with
this
rage
shall
beauty
hold
plea
whose
action
stronger
than
flower
how
shall
summer
honey
breath
hold
out
against
the
wrackful
siege
battering
days
when
rocks
impregnable
are
not
stout
nor
gates
steel
strong
but
time
decays
fearful
meditation
where
alack
shall
time
best
jewel
from
time
chest
lie
hid
what
strong
hand
can
hold
his
swift
foot
back
who
his
spoil
beauty
can
forbid
nbsp
nbsp
nbsp
nbsp
none
unless
this
miracle
have
might
nbsp
nbsp
nbsp
nbsp
that
black
ink
love
may
still
shine
bright
lxvi
tired
with
all
these
for
restful
death
cry
behold
desert
beggar
born
and
needy
nothing
trimm
jollity
and
purest
faith
unhappily
forsworn
and
gilded
honour
shamefully
misplac
and
maiden
virtue
rudely
strumpeted
and
right
perfection
wrongfully
disgrac
and
strength
limping
sway
disabled
and
art
made
tongue
tied
authority
and
folly
doctor
like
controlling
skill
and
simple
truth
miscall
simplicity
and
captive
good
attending
captain
ill
nbsp
nbsp
nbsp
nbsp
tir
with
all
these
from
these
would
gone
nbsp
nbsp
nbsp
nbsp
save
that
die
leave
love
alone
lxvii
wherefore
with
infection
should
live
and
with
his
presence
grace
impiety
that
sin
him
advantage
should
achieve
and
lace
itself
with
his
society
why
should
false
painting
imitate
his
cheek
and
steel
dead
seeming
his
living
hue
why
should
poor
beauty
indirectly
seek
roses
shadow
since
his
rose
true
why
should
live
now
nature
bankrupt
beggar
blood
blush
through
lively
veins
for
she
hath
exchequer
now
but
his
and
proud
many
lives
upon
his
gains
nbsp
nbsp
nbsp
nbsp
him
she
stores
show
what
wealth
she
had
nbsp
nbsp
nbsp
nbsp
days
long
since
before
these
last
bad
lxviii
thus
his
cheek
the
map
days
outworn
when
beauty
lived
and
died
flowers
now
before
these
bastard
signs
fair
were
born
durst
inhabit
living
brow
before
the
golden
tresses
the
dead
the
right
sepulchres
were
shorn
away
live
second
life
second
head
ere
beauty
dead
fleece
made
another
gay
him
those
holy
antique
hours
are
seen
without
all
ornament
itself
and
true
making
summer
another
green
robbing
old
dress
his
beauty
new
nbsp
nbsp
nbsp
nbsp
and
him
for
map
doth
nature
store
nbsp
nbsp
nbsp
nbsp
show
false
art
what
beauty
was
yore
lxix
those
parts
thee
that
the
world
eye
doth
view
want
nothing
that
the
thought
hearts
can
mend
all
tongues
the
voice
souls
give
thee
that
due
uttering
bare
truth
even
foes
commend
thy
outward
thus
with
outward
praise
crown
but
those
same
tongues
that
give
thee
thine
own
other
accents
this
praise
confound
seeing
farther
than
the
eye
hath
shown
they
look
into
the
beauty
thy
mind
and
that
guess
they
measure
thy
deeds
then
churls
their
thoughts
although
their
eyes
were
kind
thy
fair
flower
add
the
rank
smell
weeds
nbsp
nbsp
nbsp
nbsp
but
why
thy
odour
matcheth
not
thy
show
nbsp
nbsp
nbsp
nbsp
the
soil
this
that
thou
dost
common
grow
lxx
that
thou
art
blam
shall
not
thy
defect
for
slander
mark
was
ever
yet
the
fair
the
ornament
beauty
suspect
crow
that
flies
heaven
sweetest
air
thou
good
slander
doth
but
approve
thy
worth
the
greater
being
woo
time
for
canker
vice
the
sweetest
buds
doth
love
and
thou
present
pure
unstained
prime
thou
hast
passed
the
ambush
young
days
either
not
assail
victor
being
charg
yet
this
thy
praise
cannot
thy
praise
tie
envy
evermore
enlarg
nbsp
nbsp
nbsp
nbsp
some
suspect
ill
mask
not
thy
show
nbsp
nbsp
nbsp
nbsp
then
thou
alone
kingdoms
hearts
shouldst
owe
lxxi
longer
mourn
for
when
dead
than
you
shall
hear
the
surly
sullen
bell
give
warning
the
world
that
fled
from
this
vile
world
with
vilest
worms
dwell
nay
you
read
this
line
remember
not
the
hand
that
writ
for
love
you
that
your
sweet
thoughts
would
forgot
thinking
then
should
make
you
woe
say
you
look
upon
this
verse
when
perhaps
compounded
with
clay
not
much
poor
name
rehearse
but
let
your
love
even
with
life
decay
nbsp
nbsp
nbsp
nbsp
lest
the
wise
world
should
look
into
your
moan
nbsp
nbsp
nbsp
nbsp
and
mock
you
with
after
gone
lxxii
lest
the
world
should
task
you
recite
what
merit
lived
that
you
should
love
after
death
dear
love
forget
quite
for
you
can
nothing
worthy
prove
unless
you
would
devise
some
virtuous
lie
more
for
than
mine
own
desert
and
hang
more
praise
upon
deceased
than
niggard
truth
would
willingly
impart
lest
your
true
love
may
seem
false
this
that
you
for
love
speak
well
untrue
name
buried
where
body
and
live
more
shame
nor
nor
you
nbsp
nbsp
nbsp
nbsp
for
shamed
that
which
bring
forth
nbsp
nbsp
nbsp
nbsp
and
should
you
love
things
nothing
worth
lxxiii
that
time
year
thou
mayst
behold
when
yellow
leaves
none
few
hang
upon
those
boughs
which
shake
against
the
cold
bare
ruin
choirs
where
late
the
sweet
birds
sang
thou
see
the
twilight
such
day
after
sunset
fadeth
the
west
which
and
black
night
doth
take
away
death
second
self
that
seals
all
rest
thou
see
the
glowing
such
fire
that
the
ashes
his
youth
doth
lie
the
death
bed
whereon
must
expire
consum
with
that
which
was
nourish
nbsp
nbsp
nbsp
nbsp
this
thou
perceiv
which
makes
thy
love
more
strong
nbsp
nbsp
nbsp
nbsp
love
that
well
which
thou
must
leave
ere
long
lxxiv
but
contented
when
that
fell
arrest
without
all
bail
shall
carry
away
life
hath
this
line
some
interest
which
for
memorial
still
with
thee
shall
stay
when
thou
reviewest
this
thou
dost
review
the
very
part
was
consecrate
thee
the
earth
can
have
but
earth
which
his
due
spirit
thine
the
better
part
then
thou
hast
but
lost
the
dregs
life
the
prey
worms
body
being
dead
the
coward
conquest
wretch
knife
too
base
thee
remembered
nbsp
nbsp
nbsp
nbsp
the
worth
that
that
which
contains
nbsp
nbsp
nbsp
nbsp
and
that
this
and
this
with
thee
remains
lxxv
are
you
thoughts
food
life
sweet
season
showers
are
the
ground
and
for
the
peace
you
hold
such
strife
twixt
miser
and
his
wealth
found
now
proud
enjoyer
and
anon
doubting
the
filching
age
will
steal
his
treasure
now
counting
best
with
you
alone
then
better
that
the
world
may
see
pleasure
sometime
all
full
with
feasting
your
sight
and
and
clean
starved
for
look
possessing
pursuing
delight
save
what
had
must
from
you
took
nbsp
nbsp
nbsp
nbsp
thus
pine
and
surfeit
day
day
nbsp
nbsp
nbsp
nbsp
gluttoning
all
all
away
lxxvi
why
verse
barren
new
pride
far
from
variation
quick
change
why
with
the
time
not
glance
aside
new
found
methods
and
compounds
strange
why
write
still
all
one
ever
the
same
and
keep
invention
noted
weed
that
every
word
doth
almost
tell
name
showing
their
birth
and
where
they
did
proceed
know
sweet
love
always
write
you
and
you
and
love
are
still
argument
all
best
dressing
old
words
new
spending
again
what
already
spent
nbsp
nbsp
nbsp
nbsp
for
the
sun
daily
new
and
old
nbsp
nbsp
nbsp
nbsp
love
still
telling
what
told
lxxvii
thy
glass
will
show
thee
how
thy
beauties
wear
thy
dial
how
thy
precious
minutes
waste
these
vacant
leaves
thy
mind
imprint
will
bear
and
this
book
this
learning
mayst
thou
taste
the
wrinkles
which
thy
glass
will
truly
show
mouthed
graves
will
give
thee
memory
thou
thy
dial
shady
stealth
mayst
know
time
thievish
progress
eternity
look
what
thy
memory
cannot
contain
commit
these
waste
blanks
and
thou
shalt
find
those
children
nursed
deliver
from
thy
brain
take
new
acquaintance
thy
mind
nbsp
nbsp
nbsp
nbsp
these
offices
oft
thou
wilt
look
nbsp
nbsp
nbsp
nbsp
shall
profit
thee
and
much
enrich
thy
book
lxxviii
oft
have
invoked
thee
for
muse
and
found
such
fair
assistance
verse
every
alien
pen
hath
got
use
and
under
thee
their
poesy
disperse
thine
eyes
that
taught
the
dumb
high
sing
and
heavy
ignorance
aloft
fly
have
added
feathers
the
learned
wing
and
given
grace
double
majesty
yet
most
proud
that
which
compile
whose
influence
thine
and
born
thee
others
works
thou
dost
but
mend
the
style
and
arts
with
thy
sweet
graces
graced
nbsp
nbsp
nbsp
nbsp
but
thou
art
all
art
and
dost
advance
nbsp
nbsp
nbsp
nbsp
high
learning
rude
ignorance
lxxix
whilst
alone
did
call
upon
thy
aid
verse
alone
had
all
thy
gentle
grace
but
now
gracious
numbers
are
decay
and
sick
muse
doth
give
other
place
grant
sweet
love
thy
lovely
argument
deserves
the
travail
worthier
pen
yet
what
thee
thy
poet
doth
invent
robs
thee
and
pays
thee
again
lends
thee
virtue
and
stole
that
word
from
thy
behaviour
beauty
doth
give
and
found
thy
cheek
can
afford
praise
thee
but
what
thee
doth
live
nbsp
nbsp
nbsp
nbsp
then
thank
him
not
for
that
which
doth
say
nbsp
nbsp
nbsp
nbsp
since
what
owes
thee
thou
thyself
dost
pay
lxxx
how
faint
when
you
write
knowing
better
spirit
doth
use
your
name
and
the
praise
thereof
spends
all
his
might
make
tongue
tied
speaking
your
fame
but
since
your
worth
wide
the
ocean
the
humble
the
proudest
sail
doth
bear
saucy
bark
inferior
far
his
your
broad
main
doth
wilfully
appear
your
shallowest
help
will
hold
afloat
whilst
upon
your
soundless
deep
doth
ride
being
wrack
worthless
boat
tall
building
and
goodly
pride
nbsp
nbsp
nbsp
nbsp
then
thrive
and
cast
away
nbsp
nbsp
nbsp
nbsp
the
worst
was
this
love
was
decay
lxxxi
shall
live
your
epitaph
make
you
survive
when
earth
rotten
from
hence
your
memory
death
cannot
take
although
each
part
will
forgotten
your
name
from
hence
immortal
life
shall
have
though
once
gone
all
the
world
must
die
the
earth
can
yield
but
common
grave
when
you
entombed
men
eyes
shall
lie
your
monument
shall
gentle
verse
which
eyes
not
yet
created
shall
read
and
tongues
your
being
shall
rehearse
when
all
the
breathers
this
world
are
dead
nbsp
nbsp
nbsp
nbsp
you
still
shall
live
such
virtue
hath
pen
nbsp
nbsp
nbsp
nbsp
where
breath
most
breathes
even
the
mouths
men
lxxxii
grant
thou
wert
not
married
muse
and
therefore
mayst
without
attaint
erlook
the
dedicated
words
which
writers
use
their
fair
subject
blessing
every
book
thou
art
fair
knowledge
hue
finding
thy
worth
limit
past
praise
and
therefore
art
enforced
seek
anew
some
fresher
stamp
the
time
bettering
days
and
love
yet
when
they
have
devis
what
strained
touches
rhetoric
can
lend
thou
truly
fair
wert
truly
sympathiz
true
plain
words
thy
true
telling
friend
nbsp
nbsp
nbsp
nbsp
and
their
gross
painting
might
better
nbsp
nbsp
nbsp
nbsp
where
cheeks
need
blood
thee
abus
lxxxiii
never
saw
that
you
did
painting
need
and
therefore
your
fair
painting
set
found
thought
found
you
did
exceed
that
barren
tender
poet
debt
and
therefore
have
slept
your
report
that
you
yourself
being
extant
well
might
show
how
far
modern
quill
doth
come
too
short
speaking
worth
what
worth
you
doth
grow
this
silence
for
sin
you
did
impute
which
shall
most
glory
being
dumb
for
impair
not
beauty
being
mute
when
others
would
give
life
and
bring
tomb
nbsp
nbsp
nbsp
nbsp
there
lives
more
life
one
your
fair
eyes
nbsp
nbsp
nbsp
nbsp
than
both
your
poets
can
praise
devise
lxxxiv
who
that
says
most
which
can
say
more
than
this
rich
praise
that
you
alone
are
you
whose
confine
immured
the
store
which
should
example
where
your
equal
grew
lean
penury
within
that
pen
doth
dwell
that
his
subject
lends
not
some
small
glory
but
that
writes
you
can
tell
that
you
are
you
dignifies
his
story
let
him
but
copy
what
you
writ
not
making
worse
what
nature
made
clear
and
such
counterpart
shall
fame
his
wit
making
his
style
admired
every
where
nbsp
nbsp
nbsp
nbsp
you
your
beauteous
blessings
add
curse
nbsp
nbsp
nbsp
nbsp
being
fond
praise
which
makes
your
praises
worse
lxxxv
tongue
tied
muse
manners
holds
her
still
while
comments
your
praise
richly
compil
reserve
their
character
with
golden
quill
and
precious
phrase
all
the
muses
fil
think
good
thoughts
whilst
others
write
good
words
and
like
unlettered
clerk
still
cry
amen
every
hymn
that
able
spirit
affords
polish
form
well
refined
pen
hearing
you
praised
say
tis
tis
true
and
the
most
praise
add
something
more
but
that
thought
whose
love
you
though
words
come
hindmost
holds
his
rank
before
nbsp
nbsp
nbsp
nbsp
then
others
for
the
breath
words
respect
nbsp
nbsp
nbsp
nbsp
for
dumb
thoughts
speaking
effect
lxxxvi
was
the
proud
full
sail
his
great
verse
bound
for
the
prize
all
too
precious
you
that
did
ripe
thoughts
brain
inhearse
making
their
tomb
the
womb
wherein
they
grew
was
his
spirit
spirits
taught
write
above
mortal
pitch
that
struck
dead
neither
nor
his
compeers
night
giving
him
aid
verse
astonished
nor
that
affable
familiar
ghost
which
nightly
gulls
him
with
intelligence
victors
silence
cannot
boast
was
not
sick
any
fear
from
thence
nbsp
nbsp
nbsp
nbsp
but
when
your
countenance
fill
his
line
nbsp
nbsp
nbsp
nbsp
then
lacked
matter
that
enfeebled
mine
lxxxvii
farewell
thou
art
too
dear
for
possessing
and
like
enough
thou
know
thy
estimate
the
charter
thy
worth
gives
thee
releasing
bonds
thee
are
all
determinate
for
how
hold
thee
but
thy
granting
and
for
that
riches
where
deserving
the
cause
this
fair
gift
wanting
and
patent
back
again
swerving
thy
self
thou
gav
thy
own
worth
then
not
knowing
whom
thou
gav
else
mistaking
thy
great
gift
upon
misprision
growing
comes
home
again
better
judgement
making
nbsp
nbsp
nbsp
nbsp
thus
have
had
thee
dream
doth
flatter
nbsp
nbsp
nbsp
nbsp
sleep
king
but
waking
such
matter
lxxxviii
when
thou
shalt
dispos
set
light
and
place
merit
the
eye
scorn
upon
thy
side
against
myself
fight
and
prove
thee
virtuous
though
thou
art
forsworn
with
mine
own
weakness
being
best
acquainted
upon
thy
part
can
set
down
story
faults
conceal
wherein
attainted
that
thou
losing
shalt
win
much
glory
and
this
will
gainer
too
for
bending
all
loving
thoughts
thee
the
injuries
that
myself
doing
thee
vantage
double
vantage
nbsp
nbsp
nbsp
nbsp
such
love
thee
belong
nbsp
nbsp
nbsp
nbsp
that
for
thy
right
myself
will
bear
all
wrong
lxxxix
say
that
thou
didst
forsake
for
some
fault
and
will
comment
upon
that
offence
speak
lameness
and
straight
will
halt
against
thy
reasons
making
defence
thou
canst
not
love
disgrace
half
ill
set
form
upon
desired
change
myself
disgrace
knowing
thy
will
will
acquaintance
strangle
and
look
strange
absent
from
thy
walks
and
tongue
thy
sweet
beloved
name
more
shall
dwell
lest
too
much
profane
should
wrong
and
haply
our
old
acquaintance
tell
nbsp
nbsp
nbsp
nbsp
for
thee
against
self
vow
debate
nbsp
nbsp
nbsp
nbsp
for
must
love
him
whom
thou
dost
hate
then
hate
when
thou
wilt
ever
now
now
while
the
world
bent
deeds
cross
join
with
the
spite
fortune
make
bow
and
not
drop
for
after
loss
not
when
heart
hath
scap
this
sorrow
come
the
rearward
conquer
woe
give
not
windy
night
rainy
morrow
linger
out
purpos
overthrow
thou
wilt
leave
not
leave
last
when
other
petty
griefs
have
done
their
spite
but
the
onset
come
shall
taste
first
the
very
worst
fortune
might
nbsp
nbsp
nbsp
nbsp
and
other
strains
woe
which
now
seem
woe
nbsp
nbsp
nbsp
nbsp
compar
with
loss
thee
will
not
seem
xci
some
glory
their
birth
some
their
skill
some
their
wealth
some
their
body
force
some
their
garments
though
new
fangled
ill
some
their
hawks
and
hounds
some
their
horse
and
every
humour
hath
his
adjunct
pleasure
wherein
finds
joy
above
the
rest
but
these
particulars
are
not
measure
all
these
better
one
general
best
thy
love
better
than
high
birth
richer
than
wealth
prouder
than
garments
costs
more
delight
than
hawks
and
horses
and
having
thee
all
men
pride
boast
nbsp
nbsp
nbsp
nbsp
wretched
this
alone
that
thou
mayst
take
nbsp
nbsp
nbsp
nbsp
all
this
away
and
most
wretchcd
make
xcii
but
thy
worst
steal
thyself
away
for
term
life
thou
art
assured
mine
and
life
longer
than
thy
love
will
stay
for
depends
upon
that
love
thine
then
need
not
fear
the
worst
wrongs
when
the
least
them
life
hath
end
see
better
state
belongs
than
that
which
thy
humour
doth
depend
thou
canst
not
vex
with
inconstant
mind
since
that
life
thy
revolt
doth
lie
what
happy
title
find
happy
have
thy
love
happy
die
nbsp
nbsp
nbsp
nbsp
but
what
blessed
fair
that
fears
blot
nbsp
nbsp
nbsp
nbsp
thou
mayst
false
and
yet
know
not
xciii
shall
live
supposing
thou
art
true
like
deceived
husband
love
face
may
still
seem
love
though
alter
new
thy
looks
with
thy
heart
other
place
for
there
can
live
hatred
thine
eye
therefore
that
cannot
know
thy
change
many
looks
the
false
heart
history
writ
moods
and
frowns
and
wrinkles
strange
but
heaven
thy
creation
did
decree
that
thy
face
sweet
love
should
ever
dwell
whate
thy
thoughts
thy
heart
workings
thy
looks
should
nothing
thence
but
sweetness
tell
nbsp
nbsp
nbsp
nbsp
how
like
eve
apple
doth
thy
beauty
grow
nbsp
nbsp
nbsp
nbsp
thy
sweet
virtue
answer
not
thy
show
xciv
they
that
have
power
hurt
and
will
none
that
not
the
thing
they
most
show
who
moving
others
are
themselves
stone
unmoved
cold
and
temptation
slow
they
rightly
inherit
heaven
graces
and
husband
nature
riches
from
expense
they
are
the
lords
and
owners
their
faces
others
but
stewards
their
excellence
the
summer
flower
the
summer
sweet
though
itself
only
live
and
die
but
that
flower
with
base
infection
meet
the
basest
weed
outbraves
his
dignity
nbsp
nbsp
nbsp
nbsp
for
sweetest
things
turn
sourest
their
deeds
nbsp
nbsp
nbsp
nbsp
lilies
that
fester
smell
far
worse
than
weeds
xcv
how
sweet
and
lovely
dost
thou
make
the
shame
which
like
canker
the
fragrant
rose
doth
spot
the
beauty
thy
budding
name
what
sweets
dost
thou
thy
sins
enclose
that
tongue
that
tells
the
story
thy
days
making
lascivious
comments
thy
sport
cannot
dispraise
but
kind
praise
naming
thy
name
blesses
ill
report
what
mansion
have
those
vices
got
which
for
their
habitation
chose
out
thee
where
beauty
veil
doth
cover
every
blot
and
all
things
turns
fair
that
eyes
can
see
nbsp
nbsp
nbsp
nbsp
take
heed
dear
heart
this
large
privilege
nbsp
nbsp
nbsp
nbsp
the
hardest
knife
ill
doth
lose
his
edge
xcvi
some
say
thy
fault
youth
some
wantonness
some
say
thy
grace
youth
and
gentle
sport
both
grace
and
faults
are
lov
more
and
less
thou
mak
faults
graces
that
thee
resort
the
finger
throned
queen
the
basest
jewel
will
well
esteem
are
those
errors
that
thee
are
seen
truths
translated
and
for
true
things
deem
how
many
lambs
might
the
stern
wolf
betray
like
lamb
could
his
looks
translate
how
many
gazers
mightst
thou
lead
away
thou
wouldst
use
the
strength
all
thy
state
nbsp
nbsp
nbsp
nbsp
but
not
love
thee
such
sort
nbsp
nbsp
nbsp
nbsp
thou
being
mine
mine
thy
good
report
xcvii
how
like
winter
hath
absence
been
from
thee
the
pleasure
the
fleeting
year
what
freezings
have
felt
what
dark
days
seen
what
old
december
bareness
everywhere
and
yet
this
time
removed
was
summer
time
the
teeming
autumn
big
with
rich
increase
bearing
the
wanton
burden
the
prime
like
widow
wombs
after
their
lords
decease
yet
this
abundant
issue
seem
but
hope
orphans
and
unfather
fruit
for
summer
and
his
pleasures
wait
thee
and
thou
away
the
very
birds
are
mute
nbsp
nbsp
nbsp
nbsp
they
sing
tis
with
dull
cheer
nbsp
nbsp
nbsp
nbsp
that
leaves
look
pale
dreading
the
winter
near
xcviii
from
you
have
been
absent
the
spring
when
proud
pied
april
dress
all
his
trim
hath
put
spirit
youth
every
thing
that
heavy
saturn
laugh
and
leap
with
him
yet
nor
the
lays
birds
nor
the
sweet
smell
different
flowers
odour
and
hue
could
make
any
summer
story
tell
from
their
proud
lap
pluck
them
where
they
grew
nor
did
wonder
the
lily
white
nor
praise
the
deep
vermilion
the
rose
they
were
but
sweet
but
figures
delight
drawn
after
you
you
pattern
all
those
nbsp
nbsp
nbsp
nbsp
yet
seem
winter
still
and
you
away
nbsp
nbsp
nbsp
nbsp
with
your
shadow
with
these
did
play
xcix
the
forward
violet
thus
did
chide
sweet
thief
whence
didst
thou
steal
thy
sweet
that
smells
not
from
love
breath
the
purple
pride
which
thy
soft
cheek
for
complexion
dwells
love
veins
thou
hast
too
grossly
the
lily
condemned
for
thy
hand
and
buds
marjoram
had
stol
thy
hair
the
roses
fearfully
thorns
did
stand
one
blushing
shame
another
white
despair
third
nor
red
nor
white
had
stol
both
and
his
robbery
had
annex
thy
breath
but
for
his
theft
pride
all
his
growth
vengeful
canker
eat
him
death
nbsp
nbsp
nbsp
nbsp
more
flowers
noted
yet
none
could
see
nbsp
nbsp
nbsp
nbsp
but
sweet
colour
had
stol
from
thee
where
art
thou
muse
that
thou
forget
long
speak
that
which
gives
thee
all
thy
might
spend
thou
thy
fury
some
worthless
song
darkening
thy
power
lend
base
subjects
light
return
forgetful
muse
and
straight
redeem
gentle
numbers
time
idly
spent
sing
the
ear
that
doth
thy
lays
esteem
and
gives
thy
pen
both
skill
and
argument
rise
resty
muse
love
sweet
face
survey
time
have
any
wrinkle
graven
there
any
satire
decay
and
make
time
spoils
despised
every
where
nbsp
nbsp
nbsp
nbsp
give
love
fame
faster
than
time
wastes
life
nbsp
nbsp
nbsp
nbsp
thou
prevent
his
scythe
and
crooked
knife
truant
muse
what
shall
thy
amends
for
thy
neglect
truth
beauty
both
truth
and
beauty
love
depends
dost
thou
too
and
therein
dignified
make
answer
muse
wilt
thou
not
haply
say
truth
needs
colour
with
his
colour
fix
beauty
pencil
beauty
truth
lay
but
best
best
never
intermix
because
needs
praise
wilt
thou
dumb
excuse
not
silence
for
lies
thee
make
him
much
outlive
gilded
tomb
and
prais
ages
yet
nbsp
nbsp
nbsp
nbsp
then
thy
office
muse
teach
thee
how
nbsp
nbsp
nbsp
nbsp
make
him
seem
long
hence
shows
now
cii
love
strengthen
though
more
weak
seeming
love
not
less
though
less
the
show
appear
that
love
merchandiz
whose
rich
esteeming
the
owner
tongue
doth
publish
every
where
our
love
was
new
and
then
but
the
spring
when
was
wont
greet
with
lays
philomel
summer
front
doth
sing
and
stops
her
pipe
growth
riper
days
not
that
the
summer
less
pleasant
now
than
when
her
mournful
hymns
did
hush
the
night
but
that
wild
music
burthens
every
bough
and
sweets
grown
common
lose
their
dear
delight
nbsp
nbsp
nbsp
nbsp
therefore
like
her
sometime
hold
tongue
nbsp
nbsp
nbsp
nbsp
because
would
not
dull
you
with
song
ciii
alack
what
poverty
muse
brings
forth
that
having
such
scope
show
her
pride
the
argument
all
bare
more
worth
than
when
hath
added
praise
beside
blame
not
more
can
write
look
your
glass
and
there
appears
face
that
over
goes
blunt
invention
quite
dulling
lines
and
doing
disgrace
were
not
sinful
then
striving
mend
mar
the
subject
that
before
was
well
for
other
pass
verses
tend
than
your
graces
and
your
gifts
tell
nbsp
nbsp
nbsp
nbsp
and
more
much
more
than
verse
can
sit
nbsp
nbsp
nbsp
nbsp
your
own
glass
shows
you
when
you
look
civ
fair
friend
you
never
can
old
for
you
were
when
first
your
eye
such
seems
your
beauty
still
three
winters
cold
have
from
the
forests
shook
three
summers
pride
three
beauteous
springs
yellow
autumn
turn
process
the
seasons
have
seen
three
april
perfumes
three
hot
junes
burn
since
first
saw
you
fresh
which
yet
are
green
yet
doth
beauty
like
dial
hand
steal
from
his
figure
and
pace
perceiv
your
sweet
hue
which
methinks
still
doth
stand
hath
motion
and
mine
eye
may
deceiv
nbsp
nbsp
nbsp
nbsp
for
fear
which
hear
this
thou
age
unbred
nbsp
nbsp
nbsp
nbsp
ere
you
were
born
was
beauty
summer
dead
let
not
love
call
idolatry
nor
beloved
idol
show
since
all
alike
songs
and
praises
one
one
still
such
and
ever
kind
love
day
morrow
kind
still
constant
wondrous
excellence
therefore
verse
constancy
confin
one
thing
expressing
leaves
out
difference
fair
kind
and
true
all
argument
fair
kind
and
true
varying
other
words
and
this
change
invention
spent
three
themes
one
which
wondrous
scope
affords
nbsp
nbsp
nbsp
nbsp
fair
kind
and
true
have
often
liv
alone
nbsp
nbsp
nbsp
nbsp
which
three
till
now
never
kept
seat
one
cvi
when
the
chronicle
wasted
time
see
descriptions
the
fairest
wights
and
beauty
making
beautiful
old
rime
praise
ladies
dead
and
lovely
knights
then
the
blazon
sweet
beauty
best
hand
foot
lip
eye
brow
see
their
antique
pen
would
have
express
even
such
beauty
you
master
now
all
their
praises
are
but
prophecies
this
our
time
all
you
prefiguring
and
for
they
looked
but
with
divining
eyes
they
had
not
skill
enough
your
worth
sing
nbsp
nbsp
nbsp
nbsp
for
which
now
behold
these
present
days
nbsp
nbsp
nbsp
nbsp
have
eyes
wonder
but
lack
tongues
praise
cvii
not
mine
own
fears
nor
the
prophetic
soul
the
wide
world
dreaming
things
come
can
yet
the
lease
true
love
control
supposed
forfeit
confin
doom
the
mortal
moon
hath
her
eclipse
endur
and
the
sad
augurs
mock
their
own
presage
incertainties
now
crown
themselves
assur
and
peace
proclaims
olives
endless
age
now
with
the
drops
this
most
balmy
time
love
looks
fresh
and
death
subscribes
since
spite
him
live
this
poor
rime
while
insults
dull
and
speechless
tribes
nbsp
nbsp
nbsp
nbsp
and
thou
this
shalt
find
thy
monument
nbsp
nbsp
nbsp
nbsp
when
tyrants
crests
and
tombs
brass
are
spent
cviii
what
the
brain
that
ink
may
character
which
hath
not
figur
thee
true
spirit
what
new
speak
what
now
register
that
may
express
love
thy
dear
merit
nothing
sweet
boy
but
yet
like
prayers
divine
must
each
day
say
the
very
same
counting
old
thing
old
thou
mine
thine
even
when
first
hallow
thy
fair
name
that
eternal
love
love
fresh
case
weighs
not
the
dust
and
injury
age
nor
gives
necessary
wrinkles
place
but
makes
antiquity
for
aye
his
page
nbsp
nbsp
nbsp
nbsp
finding
the
first
conceit
love
there
bred
nbsp
nbsp
nbsp
nbsp
where
time
and
outward
form
would
show
dead
cix
never
say
that
was
false
heart
though
absence
seem
flame
qualify
easy
might
from
self
depart
from
soul
which
thy
breast
doth
lie
that
home
love
have
rang
like
him
that
travels
return
again
just
the
time
not
with
the
time
exchang
that
myself
bring
water
for
stain
never
believe
though
nature
reign
all
frailties
that
besiege
all
kinds
blood
that
could
preposterously
stain
leave
for
nothing
all
thy
sum
good
nbsp
nbsp
nbsp
nbsp
for
nothing
this
wide
universe
call
nbsp
nbsp
nbsp
nbsp
save
thou
rose
thou
art
all
alas
tis
true
have
gone
here
and
there
and
made
self
motley
the
view
gor
mine
own
thoughts
sold
cheap
what
most
dear
made
old
offences
affections
new
most
true
that
have
look
truth
askance
and
strangely
but
all
above
these
blenches
gave
heart
another
youth
and
worse
essays
prov
thee
best
love
now
all
done
save
what
shall
have
end
mine
appetite
never
more
will
grind
newer
proof
try
older
friend
god
love
whom
confin
nbsp
nbsp
nbsp
nbsp
then
give
welcome
next
heaven
the
best
nbsp
nbsp
nbsp
nbsp
even
thy
pure
and
most
most
loving
breast
cxi
for
sake
you
with
fortune
chide
the
guilty
goddess
harmful
deeds
that
did
not
better
for
life
provide
than
public
means
which
public
manners
breeds
thence
comes
that
name
receives
brand
and
almost
thence
nature
subdu
what
works
like
the
dyer
hand
pity
then
and
wish
were
renew
whilst
like
willing
patient
will
drink
potions
eisel
gainst
strong
infection
bitterness
that
will
bitter
think
nor
double
penance
correct
correction
nbsp
nbsp
nbsp
nbsp
pity
then
dear
friend
and
assure
nbsp
nbsp
nbsp
nbsp
even
that
your
pity
enough
cure
cxii
your
love
and
pity
doth
the
impression
fill
which
vulgar
scandal
stamp
upon
brow
for
what
care
who
calls
well
ill
you
green
bad
good
allow
you
are
all
the
world
and
must
strive
know
shames
and
praises
from
your
tongue
none
else
nor
none
alive
that
steel
sense
changes
right
wrong
profound
abysm
throw
all
care
others
voices
that
adder
sense
critic
and
flatterer
stopped
are
mark
how
with
neglect
dispense
nbsp
nbsp
nbsp
nbsp
you
are
strongly
purpose
bred
nbsp
nbsp
nbsp
nbsp
that
all
the
world
besides
methinks
are
dead
cxiii
since
left
you
mine
eye
mind
and
that
which
governs
about
doth
part
his
function
and
partly
blind
seems
seeing
but
effectually
out
for
form
delivers
the
heart
bird
flower
shape
which
doth
latch
his
quick
objects
hath
the
mind
part
nor
his
own
vision
holds
what
doth
catch
for
see
the
rud
gentlest
sight
the
most
sweet
favour
deformed
creature
the
mountain
the
sea
the
day
night
the
crow
dove
shapes
them
your
feature
nbsp
nbsp
nbsp
nbsp
incapable
more
replete
with
you
nbsp
nbsp
nbsp
nbsp
most
true
mind
thus
maketh
mine
untrue
cxiv
whether
doth
mind
being
crown
with
you
drink
the
monarch
plague
this
flattery
whether
shall
say
mine
eye
saith
true
and
that
your
love
taught
this
alchemy
make
monsters
and
things
indigest
such
cherubins
your
sweet
self
resemble
creating
every
bad
perfect
best
fast
objects
his
beams
assemble
tis
the
first
tis
flattery
seeing
and
great
mind
most
kingly
drinks
mine
eye
well
knows
what
with
his
gust
greeing
and
his
palate
doth
prepare
the
cup
nbsp
nbsp
nbsp
nbsp
poison
tis
the
lesser
sin
nbsp
nbsp
nbsp
nbsp
that
mine
eye
loves
and
doth
first
begin
cxv
those
lines
that
before
have
writ
lie
even
those
that
said
could
not
love
you
dearer
yet
then
judgment
knew
reason
why
most
full
flame
should
afterwards
burn
clearer
but
reckoning
time
whose
million
accidents
creep
twixt
vows
and
change
decrees
kings
tan
sacred
beauty
blunt
the
sharp
intents
divert
strong
minds
the
course
altering
things
alas
why
fearing
time
tyranny
might
not
then
say
now
love
you
best
when
was
certain
incertainty
crowning
the
present
doubting
the
rest
nbsp
nbsp
nbsp
nbsp
love
babe
then
might
not
say
nbsp
nbsp
nbsp
nbsp
give
full
growth
that
which
still
doth
grow
cxvi
let
not
the
marriage
true
minds
admit
impediments
love
not
love
which
alters
when
alteration
finds
bends
with
the
remover
remove
ever
fixed
mark
that
looks
tempests
and
never
shaken
the
star
every
wandering
bark
whose
worth
unknown
although
his
height
taken
love
not
time
fool
though
rosy
lips
and
cheeks
within
his
bending
sickle
compass
come
love
alters
not
with
his
brief
hours
and
weeks
but
bears
out
even
the
edge
doom
nbsp
nbsp
nbsp
nbsp
this
error
and
upon
prov
nbsp
nbsp
nbsp
nbsp
never
writ
nor
man
ever
lov
cxvii
accuse
thus
that
have
scanted
all
wherein
should
your
great
deserts
repay
forgot
upon
your
dearest
love
call
whereto
all
bonds
tie
day
day
that
have
frequent
been
with
unknown
minds
and
given
time
your
own
dear
purchas
right
that
have
hoisted
sail
all
the
winds
which
should
transport
farthest
from
your
sight
book
both
wilfulness
and
errors
down
and
just
proof
surmise
accumulate
bring
within
the
level
your
frown
but
shoot
not
your
waken
hate
nbsp
nbsp
nbsp
nbsp
since
appeal
says
did
strive
prove
nbsp
nbsp
nbsp
nbsp
the
constancy
and
virtue
your
love
cxviii
like
make
our
appetite
more
keen
with
eager
compounds
our
palate
urge
prevent
our
maladies
unseen
sicken
shun
sickness
when
purge
even
being
full
your
cloying
sweetness
bitter
sauces
did
frame
feeding
and
sick
welfare
found
kind
meetness
diseas
ere
that
there
was
true
needing
thus
policy
love
anticipate
the
ills
that
were
not
grew
faults
assur
and
brought
medicine
healthful
state
which
rank
goodness
would
ill
cur
nbsp
nbsp
nbsp
nbsp
but
thence
learn
and
find
the
lesson
true
nbsp
nbsp
nbsp
nbsp
drugs
poison
him
that
fell
sick
you
cxix
what
potions
have
drunk
siren
tears
distill
from
limbecks
foul
hell
within
applying
fears
hopes
and
hopes
fears
still
losing
when
saw
myself
win
what
wretched
errors
hath
heart
committed
whilst
hath
thought
itself
blessed
never
how
have
mine
eyes
out
their
spheres
been
fitted
the
distraction
this
madding
fever
benefit
ill
now
find
true
that
better
evil
still
made
better
and
ruin
love
when
built
anew
grows
fairer
than
first
more
strong
far
greater
nbsp
nbsp
nbsp
nbsp
return
rebuk
content
nbsp
nbsp
nbsp
nbsp
and
gain
ill
thrice
more
than
have
spent
cxx
that
you
were
once
unkind
befriends
now
and
for
that
sorrow
which
then
did
feel
needs
must
under
transgression
bow
unless
nerves
were
brass
hammer
steel
for
you
were
unkindness
shaken
yours
you
pass
hell
time
and
tyrant
have
leisure
taken
weigh
how
once
suffer
your
crime
that
our
night
woe
might
have
remember
deepest
sense
how
hard
true
sorrow
hits
and
soon
you
you
then
tender
the
humble
salve
which
wounded
bosoms
fits
nbsp
nbsp
nbsp
nbsp
but
that
your
trespass
now
becomes
fee
nbsp
nbsp
nbsp
nbsp
mine
ransoms
yours
and
yours
must
ransom
cxxi
tis
better
vile
than
vile
esteem
when
not
receives
reproach
being
and
the
just
pleasure
lost
which
deem
not
our
feeling
but
others
seeing
for
why
should
others
false
adulterate
eyes
give
salutation
sportive
blood
frailties
why
are
frailer
spies
which
their
wills
count
bad
what
think
good
that
and
they
that
level
abuses
reckon
their
own
may
straight
though
they
themselves
bevel
their
rank
thoughts
deeds
must
not
shown
nbsp
nbsp
nbsp
nbsp
unless
this
general
evil
they
maintain
nbsp
nbsp
nbsp
nbsp
all
men
are
bad
and
their
badness
reign
cxxii
thy
gift
thy
tables
are
within
brain
full
character
with
lasting
memory
which
shall
above
that
idle
rank
remain
beyond
all
date
even
eternity
the
least
long
brain
and
heart
have
faculty
nature
subsist
till
each
raz
oblivion
yield
his
part
thee
thy
record
never
can
miss
that
poor
retention
could
not
much
hold
nor
need
tallies
thy
dear
love
score
therefore
give
them
from
was
bold
trust
those
tables
that
receive
thee
more
nbsp
nbsp
nbsp
nbsp
keep
adjunct
remember
thee
nbsp
nbsp
nbsp
nbsp
were
import
forgetfulness
cxxiii
time
thou
shalt
not
boast
that
change
thy
pyramids
built
with
newer
might
are
nothing
novel
nothing
strange
they
are
but
dressings
former
sight
our
dates
are
brief
and
therefore
admire
what
thou
dost
foist
upon
that
old
and
rather
make
them
born
our
desire
than
think
that
before
have
heard
them
told
thy
registers
and
thee
both
defy
not
wondering
the
present
nor
the
past
for
thy
records
and
what
see
doth
lie
made
more
less
thy
continual
haste
nbsp
nbsp
nbsp
nbsp
this
vow
and
this
shall
ever
nbsp
nbsp
nbsp
nbsp
will
true
despite
thy
scythe
and
thee
cxxiv
dear
love
were
but
the
child
state
might
for
fortune
bastard
unfather
subject
time
love
time
hate
weeds
among
weeds
flowers
with
flowers
gather
was
builded
far
from
accident
suffers
not
smiling
pomp
nor
falls
under
the
blow
thralled
discontent
whereto
inviting
time
our
fashion
calls
fears
not
policy
that
heretic
which
works
leases
short
number
hours
but
all
alone
stands
hugely
politic
that
nor
grows
with
heat
nor
drowns
with
showers
nbsp
nbsp
nbsp
nbsp
this
witness
call
the
fools
time
nbsp
nbsp
nbsp
nbsp
which
die
for
goodness
who
have
lived
for
crime
cxxv
were
aught
bore
the
canopy
with
extern
the
outward
honouring
laid
great
bases
for
eternity
which
proves
more
short
than
waste
ruining
have
not
seen
dwellers
form
and
favour
lose
all
and
more
paying
too
much
rent
for
compound
sweet
forgoing
simple
savour
pitiful
thrivers
their
gazing
spent
let
obsequious
thy
heart
and
take
thou
oblation
poor
but
free
which
not
mix
with
seconds
knows
art
but
mutual
render
only
for
thee
nbsp
nbsp
nbsp
nbsp
hence
thou
suborned
informer
true
soul
nbsp
nbsp
nbsp
nbsp
when
most
impeach
stands
least
thy
control
cxxvi
thou
lovely
boy
who
thy
power
dost
hold
time
fickle
glass
his
fickle
hour
who
hast
waning
grown
and
therein
show
thy
lovers
withering
thy
sweet
self
grow
nature
sovereign
mistress
over
wrack
thou
goest
onwards
still
will
pluck
thee
back
she
keeps
thee
this
purpose
that
her
skill
may
time
disgrace
and
wretched
minutes
kill
yet
fear
her
thou
minion
her
pleasure
she
may
detain
but
not
still
keep
her
treasure
nbsp
nbsp
nbsp
nbsp
her
audit
though
delayed
answered
must
nbsp
nbsp
nbsp
nbsp
and
her
quietus
render
thee
cxxvii
the
old
age
black
was
not
counted
fair
were
bore
not
beauty
name
but
now
black
beauty
successive
heir
and
beauty
slander
with
bastard
shame
for
since
each
hand
hath
put
nature
power
fairing
the
foul
with
art
false
borrowed
face
sweet
beauty
hath
name
holy
bower
but
profan
not
lives
disgrace
therefore
mistress
eyes
are
raven
black
her
eyes
suited
and
they
mourners
seem
such
who
not
born
fair
beauty
lack
sland
ring
creation
with
false
esteem
nbsp
nbsp
nbsp
nbsp
yet
they
mourn
becoming
their
woe
nbsp
nbsp
nbsp
nbsp
that
every
tongue
says
beauty
should
look
cxxviii
how
oft
when
thou
music
music
play
upon
that
blessed
wood
whose
motion
sounds
with
thy
sweet
fingers
when
thou
gently
sway
the
wiry
concord
that
mine
ear
confounds
envy
those
jacks
that
nimble
leap
kiss
the
tender
inward
thy
hand
whilst
poor
lips
which
should
that
harvest
reap
the
wood
boldness
thee
blushing
stand
tickled
they
would
change
their
state
and
situation
with
those
dancing
chips
whom
thy
fingers
walk
with
gentle
gait
making
dead
wood
more
bless
than
living
lips
nbsp
nbsp
nbsp
nbsp
since
saucy
jacks
happy
are
this
nbsp
nbsp
nbsp
nbsp
give
them
thy
fingers
thy
lips
kiss
cxxix
the
expense
spirit
waste
shame
lust
action
and
till
action
lust
perjur
murderous
bloody
full
blame
savage
extreme
rude
cruel
not
trust
enjoy
sooner
but
despised
straight
past
reason
hunted
and
sooner
had
past
reason
hated
swallow
bait
purpose
laid
make
the
taker
mad
mad
pursuit
and
possession
had
having
and
quest
have
extreme
bliss
proof
and
prov
very
woe
before
joy
propos
behind
dream
nbsp
nbsp
nbsp
nbsp
all
this
the
world
well
knows
yet
none
knows
well
nbsp
nbsp
nbsp
nbsp
shun
the
heaven
that
leads
men
this
hell
cxxx
mistress
eyes
are
nothing
like
the
sun
coral
far
more
red
than
her
lips
red
snow
white
why
then
her
breasts
are
dun
hairs
wires
black
wires
grow
her
head
have
seen
roses
damask
red
and
white
but
such
roses
see
her
cheeks
and
some
perfumes
there
more
delight
than
the
breath
that
from
mistress
reeks
love
hear
her
speak
yet
well
know
that
music
hath
far
more
pleasing
sound
grant
never
saw
goddess
mistress
when
she
walks
treads
the
ground
nbsp
nbsp
nbsp
nbsp
and
yet
heaven
think
love
rare
nbsp
nbsp
nbsp
nbsp
any
she
belied
with
false
compare
cxxxi
thou
art
tyrannous
thou
art
those
whose
beauties
proudly
make
them
cruel
for
well
thou
know
dear
doting
heart
thou
art
the
fairest
and
most
precious
jewel
yet
good
faith
some
say
that
thee
behold
thy
face
hath
not
the
power
make
love
groan
say
they
err
dare
not
bold
although
swear
myself
alone
and
sure
that
not
false
swear
thousand
groans
but
thinking
thy
face
one
another
neck
witness
bear
thy
black
fairest
judgment
place
nbsp
nbsp
nbsp
nbsp
nothing
art
thou
black
save
thy
deeds
nbsp
nbsp
nbsp
nbsp
and
thence
this
slander
think
proceeds
cxxxii
thine
eyes
love
and
they
pitying
knowing
thy
heart
torment
with
disdain
have
put
black
and
loving
mourners
looking
with
pretty
ruth
upon
pain
and
truly
not
the
morning
sun
heaven
better
becomes
the
grey
cheeks
the
east
nor
that
full
star
that
ushers
the
even
doth
half
that
glory
the
sober
west
those
two
mourning
eyes
become
thy
face
let
then
well
beseem
thy
heart
mourn
for
since
mourning
doth
thee
grace
and
suit
thy
pity
like
every
part
nbsp
nbsp
nbsp
nbsp
then
will
swear
beauty
herself
black
nbsp
nbsp
nbsp
nbsp
and
all
they
foul
that
thy
complexion
lack
cxxxiii
beshrew
that
heart
that
makes
heart
groan
for
that
deep
wound
gives
friend
and
not
enough
torture
alone
but
slave
slavery
sweet
friend
must
from
myself
thy
cruel
eye
hath
taken
and
next
self
thou
harder
hast
engross
him
myself
and
thee
forsaken
torment
thrice
three
fold
thus
cross
prison
heart
thy
steel
bosom
ward
but
then
friend
heart
let
poor
heart
bail
whoe
keeps
let
heart
his
guard
thou
canst
not
then
use
rigour
jail
nbsp
nbsp
nbsp
nbsp
and
yet
thou
wilt
for
being
pent
thee
nbsp
nbsp
nbsp
nbsp
perforce
thine
and
all
that
cxxxiv
now
have
confess
that
thine
and
self
mortgag
thy
will
myself
forfeit
that
other
mine
thou
wilt
restore
comfort
still
but
thou
wilt
not
nor
will
not
free
for
thou
art
covetous
and
kind
learn
but
surety
like
write
for
under
that
bond
that
him
fast
doth
bind
the
statute
thy
beauty
thou
wilt
take
thou
usurer
that
putt
forth
all
use
and
sue
friend
came
debtor
for
sake
him
lose
through
unkind
abuse
nbsp
nbsp
nbsp
nbsp
him
have
lost
thou
hast
both
him
and
nbsp
nbsp
nbsp
nbsp
pays
the
whole
and
yet
not
free
cxxxv
whoever
hath
her
wish
thou
hast
thy
will
and
will
boot
and
will
over
plus
more
than
enough
that
vex
thee
still
thy
sweet
will
making
addition
thus
wilt
thou
whose
will
large
and
spacious
not
once
vouchsafe
hide
will
thine
shall
will
others
seem
right
gracious
and
will
fair
acceptance
shine
the
sea
all
water
yet
receives
rain
still
and
abundance
addeth
his
store
thou
being
rich
will
add
thy
will
one
will
mine
make
thy
large
will
more
nbsp
nbsp
nbsp
nbsp
let
unkind
fair
beseechers
kill
nbsp
nbsp
nbsp
nbsp
think
all
but
one
and
that
one
will
cxxxvi
thy
soul
check
thee
that
come
near
swear
thy
blind
soul
that
was
thy
will
and
will
thy
soul
knows
admitted
there
thus
far
for
love
love
suit
sweet
fulfil
will
will
fulfil
the
treasure
thy
love
fill
full
with
wills
and
will
one
things
great
receipt
with
ease
prove
among
number
one
reckon
none
then
the
number
let
pass
untold
though
thy
store
account
one
must
for
nothing
hold
please
thee
hold
that
nothing
something
sweet
thee
nbsp
nbsp
nbsp
nbsp
make
but
name
thy
love
and
love
that
still
nbsp
nbsp
nbsp
nbsp
and
then
thou
lov
for
name
will
cxxxvii
thou
blind
fool
love
what
dost
thou
mine
eyes
that
they
behold
and
see
not
what
they
see
they
know
what
beauty
see
where
lies
yet
what
the
best
take
the
worst
eyes
corrupt
over
partial
looks
anchor
the
bay
where
all
men
ride
why
eyes
falsehood
hast
thou
forged
hooks
whereto
the
judgment
heart
tied
why
should
heart
think
that
several
plot
which
heart
knows
the
wide
world
common
place
mine
eyes
seeing
this
say
this
not
put
fair
truth
upon
foul
face
nbsp
nbsp
nbsp
nbsp
things
right
true
heart
and
eyes
have
err
nbsp
nbsp
nbsp
nbsp
and
this
false
plague
are
they
now
transferr
cxxxviii
when
love
swears
that
she
made
truth
believe
her
though
know
she
lies
that
she
might
think
some
untutor
youth
unlearned
the
world
false
subtleties
thus
vainly
thinking
that
she
thinks
young
although
she
knows
days
are
past
the
best
simply
credit
her
false
speaking
tongue
both
sides
thus
simple
truth
suppressed
but
wherefore
says
she
not
she
unjust
and
wherefore
say
not
that
old
love
best
habit
seeming
trust
and
age
love
loves
not
have
years
told
nbsp
nbsp
nbsp
nbsp
therefore
lie
with
her
and
she
with
nbsp
nbsp
nbsp
nbsp
and
our
faults
lies
flatter
cxxxix
call
not
justify
the
wrong
that
thy
unkindness
lays
upon
heart
wound
not
with
thine
eye
but
with
thy
tongue
use
power
with
power
and
slay
not
art
tell
thou
lov
elsewhere
but
sight
dear
heart
forbear
glance
thine
eye
aside
what
need
thou
wound
with
cunning
when
thy
might
more
than
erpress
defence
can
bide
let
excuse
thee
love
well
knows
her
pretty
looks
have
been
mine
enemies
and
therefore
from
face
she
turns
foes
that
they
elsewhere
might
dart
their
injuries
nbsp
nbsp
nbsp
nbsp
yet
not
but
since
near
slain
nbsp
nbsp
nbsp
nbsp
kill
outright
with
looks
and
rid
pain
cxl
wise
thou
art
cruel
not
press
tongue
tied
patience
with
too
much
disdain
lest
sorrow
lend
words
and
words
express
the
manner
pity
wanting
pain
might
teach
thee
wit
better
were
though
not
love
yet
love
tell
testy
sick
men
when
their
deaths
near
news
but
health
from
their
physicians
know
for
should
despair
should
grow
mad
and
madness
might
speak
ill
thee
now
this
ill
wresting
world
grown
bad
mad
slanderers
mad
ears
believed
nbsp
nbsp
nbsp
nbsp
that
may
not
nor
thou
belied
nbsp
nbsp
nbsp
nbsp
bear
thine
eyes
straight
though
thy
proud
heart
wide
cxli
faith
not
love
thee
with
mine
eyes
for
they
thee
thousand
errors
note
but
tis
heart
that
loves
what
they
despise
who
despite
view
pleased
dote
nor
are
mine
ears
with
thy
tongue
tune
delighted
nor
tender
feeling
base
touches
prone
nor
taste
nor
smell
desire
invited
any
sensual
feast
with
thee
alone
but
five
wits
nor
five
senses
can
dissuade
one
foolish
heart
from
serving
thee
who
leaves
unsway
the
likeness
man
thy
proud
heart
slave
and
vassal
wretch
nbsp
nbsp
nbsp
nbsp
only
plague
thus
far
count
gain
nbsp
nbsp
nbsp
nbsp
that
she
that
makes
sin
awards
pain
cxlii
love
sin
and
thy
dear
virtue
hate
hate
sin
grounded
sinful
loving
but
with
mine
compare
thou
thine
own
state
and
thou
shalt
find
merits
not
reproving
not
from
those
lips
thine
that
have
profan
their
scarlet
ornaments
and
seal
false
bonds
love
oft
mine
robb
others
beds
revenues
their
rents
lawful
love
thee
thou
lov
those
whom
thine
eyes
woo
mine
importune
thee
root
pity
thy
heart
that
when
grows
thy
pity
may
deserve
pitied
nbsp
nbsp
nbsp
nbsp
thou
dost
seek
have
what
thou
dost
hide
nbsp
nbsp
nbsp
nbsp
self
example
mayst
thou
denied
cxliii
careful
housewife
runs
catch
one
her
feather
creatures
broke
away
sets
down
her
babe
and
makes
all
swift
dispatch
pursuit
the
thing
she
would
have
stay
whilst
her
neglected
child
holds
her
chase
cries
catch
her
whose
busy
care
bent
follow
that
which
flies
before
her
face
not
prizing
her
poor
infant
discontent
runn
thou
after
that
which
flies
from
thee
whilst
thy
babe
chase
thee
afar
behind
but
thou
catch
thy
hope
turn
back
and
play
the
mother
part
kiss
kind
nbsp
nbsp
nbsp
nbsp
will
pray
that
thou
mayst
have
thy
will
nbsp
nbsp
nbsp
nbsp
thou
turn
back
and
loud
crying
still
cxliv
two
loves
have
comfort
and
despair
which
like
two
spirits
suggest
still
the
better
angel
man
right
fair
the
worser
spirit
woman
colour
ill
win
soon
hell
female
evil
tempteth
better
angel
from
side
and
would
corrupt
saint
devil
wooing
his
purity
with
her
foul
pride
and
whether
that
angel
turn
fiend
suspect
may
yet
not
directly
tell
but
being
both
from
both
each
friend
guess
one
angel
another
hell
nbsp
nbsp
nbsp
nbsp
yet
this
shall
know
but
live
doubt
nbsp
nbsp
nbsp
nbsp
till
bad
angel
fire
good
one
out
cxlv
those
lips
that
love
own
hand
did
make
breathed
forth
the
sound
that
said
hate
that
languish
for
her
sake
but
when
she
saw
woeful
state
straight
her
heart
did
mercy
come
chiding
that
tongue
that
ever
sweet
was
giving
gentle
doom
and
taught
thus
anew
greet
hate
she
alter
with
end
that
followed
gentle
day
doth
follow
night
who
like
fiend
from
heaven
hell
flown
away
nbsp
nbsp
nbsp
nbsp
hate
from
hate
away
she
threw
nbsp
nbsp
nbsp
nbsp
and
sav
life
saying
not
you
cxlvi
poor
soul
the
centre
sinful
earth
sinful
earth
these
rebel
powers
array
why
dost
thou
pine
within
and
suffer
dearth
painting
thy
outward
walls
costly
gay
why
large
cost
having
short
lease
dost
thou
upon
thy
fading
mansion
spend
shall
worms
inheritors
this
excess
eat
thy
charge
this
thy
body
end
then
soul
live
thou
upon
thy
servant
loss
and
let
that
pine
aggravate
thy
store
buy
terms
divine
selling
hours
dross
within
fed
without
rich
more
nbsp
nbsp
nbsp
nbsp
shall
thou
feed
death
that
feeds
men
nbsp
nbsp
nbsp
nbsp
and
death
once
dead
there
more
dying
then
cxlvii
love
fever
longing
still
for
that
which
longer
nurseth
the
disease
feeding
that
which
doth
preserve
the
ill
the
uncertain
sickly
appetite
please
reason
the
physician
love
angry
that
his
prescriptions
are
not
kept
hath
left
and
desperate
now
approve
desire
death
which
physic
did
except
past
cure
now
reason
past
care
and
frantic
mad
with
evermore
unrest
thoughts
and
discourse
madmen
are
random
from
the
truth
vainly
express
nbsp
nbsp
nbsp
nbsp
for
have
sworn
thee
fair
and
thought
thee
bright
nbsp
nbsp
nbsp
nbsp
who
art
black
hell
dark
night
cxlviii
what
eyes
hath
love
put
head
which
have
correspondence
with
true
sight
they
have
where
judgment
fled
that
censures
falsely
what
they
see
aright
that
fair
whereon
false
eyes
dote
what
means
the
world
say
not
not
then
love
doth
well
denote
love
eye
not
true
all
men
how
can
how
can
love
eye
true
that
vexed
with
watching
and
with
tears
marvel
then
though
mistake
view
the
sun
itself
sees
not
till
heaven
clears
nbsp
nbsp
nbsp
nbsp
cunning
love
with
tears
thou
keep
blind
nbsp
nbsp
nbsp
nbsp
lest
eyes
well
seeing
thy
foul
faults
should
find
cxlix
canst
thou
cruel
say
love
thee
not
when
against
myself
with
thee
partake
not
think
thee
when
forgot
self
all
tyrant
for
thy
sake
who
hateth
thee
that
call
friend
whom
frown
thou
that
fawn
upon
nay
thou
lour
not
spend
revenge
upon
myself
with
present
moan
what
merit
self
respect
that
proud
thy
service
despise
when
all
best
doth
worship
thy
defect
commanded
the
motion
thine
eyes
nbsp
nbsp
nbsp
nbsp
but
love
hate
for
now
know
thy
mind
nbsp
nbsp
nbsp
nbsp
those
that
can
see
thou
lov
and
blind
from
what
power
hast
thou
this
powerful
might
with
insufficiency
heart
sway
make
give
the
lie
true
sight
and
swear
that
brightness
doth
not
grace
the
day
whence
hast
thou
this
becoming
things
ill
that
the
very
refuse
thy
deeds
there
such
strength
and
warrantise
skill
that
mind
thy
worst
all
best
exceeds
who
taught
thee
how
make
love
thee
more
the
more
hear
and
see
just
cause
hate
though
love
what
others
abhor
with
others
thou
shouldst
not
abhor
state
nbsp
nbsp
nbsp
nbsp
thy
unworthiness
rais
love
nbsp
nbsp
nbsp
nbsp
more
worthy
belov
thee
cli
love
too
young
know
what
conscience
yet
who
knows
not
conscience
born
love
then
gentle
cheater
urge
not
amiss
lest
guilty
faults
thy
sweet
self
prove
for
thou
betraying
betray
nobler
part
gross
body
treason
soul
doth
tell
body
that
may
triumph
love
flesh
stays
farther
reason
but
rising
thy
name
doth
point
out
thee
his
triumphant
prize
proud
this
pride
contented
thy
poor
drudge
stand
thy
affairs
fall
thy
side
nbsp
nbsp
nbsp
nbsp
want
conscience
hold
that
call
nbsp
nbsp
nbsp
nbsp
her
love
for
whose
dear
love
rise
and
fall
clii
loving
thee
thou
know
forsworn
but
thou
art
twice
forsworn
love
swearing
act
thy
bed
vow
broke
and
new
faith
torn
vowing
new
hate
after
new
love
bearing
but
why
two
oaths
breach
accuse
thee
when
break
twenty
perjur
most
for
all
vows
are
oaths
but
misuse
thee
and
all
honest
faith
thee
lost
for
have
sworn
deep
oaths
thy
deep
kindness
oaths
thy
love
thy
truth
thy
constancy
and
enlighten
thee
gave
eyes
blindness
made
them
swear
against
the
thing
they
see
nbsp
nbsp
nbsp
nbsp
for
have
sworn
thee
fair
more
perjur
nbsp
nbsp
nbsp
nbsp
swear
against
the
truth
foul
lie
cliii
cupid
laid
his
brand
and
fell
asleep
maid
dian
this
advantage
found
and
his
love
kindling
fire
did
quickly
steep
cold
valley
fountain
that
ground
which
borrow
from
this
holy
fire
love
dateless
lively
heat
still
endure
and
grew
seeting
bath
which
yet
men
prove
against
strange
maladies
sovereign
cure
but
mistress
eye
love
brand
new
fired
the
boy
for
trial
needs
would
touch
breast
sick
withal
the
help
bath
desired
and
thither
hied
sad
distemper
guest
nbsp
nbsp
nbsp
nbsp
but
found
cure
the
bath
for
help
lies
nbsp
nbsp
nbsp
nbsp
where
cupid
got
new
fire
mistress
eyes
cliv
the
little
love
god
lying
once
asleep
laid
his
side
his
heart
inflaming
brand
whilst
many
nymphs
that
vow
chaste
life
keep
came
tripping
but
her
maiden
hand
the
fairest
votary
took
that
fire
which
many
legions
true
hearts
had
warm
and
the
general
hot
desire
was
sleeping
virgin
hand
disarm
this
brand
she
quenched
cool
well
which
from
love
fire
took
heat
perpetual
growing
bath
and
healthful
remedy
for
men
diseas
but
mistress
thrall
nbsp
nbsp
nbsp
nbsp
came
there
for
cure
and
this
that
prove
nbsp
nbsp
nbsp
nbsp
love
fire
heats
water
water
cools
not
love
end
project
gutenberg
shakespeare
sonnets
william
shakespeare
end
this
project
gutenberg
ebook
shakespeare
sonnets
this
file
should
named
htm
zip
this
and
all
associated
files
various
formats
will
found
http
www
gutenberg
org
produced
joseph
miller
and
embry
riddle
aeronautical
university
library
html
version
haines
updated
editions
will
replace
the
previous
one
the
old
editions
will
renamed
creating
the
works
from
public
domain
print
editions
means
that
one
owns
united
states
copyright
these
works
the
foundation
and
you
can
copy
and
distribute
the
united
states
without
permission
and
without
paying
copyright
royalties
special
rules
set
forth
the
general
terms
use
part
this
license
apply
copying
and
distributing
project
gutenberg
electronic
works
protect
the
project
gutenberg
concept
and
trademark
project
gutenberg
registered
trademark
and
may
not
used
you
charge
for
the
ebooks
unless
you
receive
specific
permission
you
not
charge
anything
for
copies
this
ebook
complying
with
the
rules
very
easy
you
may
use
this
ebook
for
nearly
any
purpose
such
creation
derivative
works
reports
performances
and
research
they
may
modified
and
printed
and
given
away
you
may
practically
anything
with
public
domain
ebooks
redistribution
subject
the
trademark
license
especially
commercial
redistribution
start
full
license
the
full
project
gutenberg
license
please
read
this
before
you
distribute
use
this
work
protect
the
project
gutenberg
mission
promoting
the
free
distribution
electronic
works
using
distributing
this
work
any
other
work
associated
any
way
with
the
phrase
project
gutenberg
you
agree
comply
with
all
the
terms
the
full
project
gutenberg
license
available
with
this
file
online
www
gutenberg
org
license
section
general
terms
use
and
redistributing
project
gutenberg
electronic
works
reading
using
any
part
this
project
gutenberg
electronic
work
you
indicate
that
you
have
read
understand
agree
and
accept
all
the
terms
this
license
and
intellectual
property
trademark
copyright
agreement
you
not
agree
abide
all
the
terms
this
agreement
you
must
cease
using
and
return
destroy
all
copies
project
gutenberg
electronic
works
your
possession
you
paid
fee
for
obtaining
copy
access
project
gutenberg
electronic
work
and
you
not
agree
bound
the
terms
this
agreement
you
may
obtain
refund
from
the
person
entity
whom
you
paid
the
fee
set
forth
paragraph
project
gutenberg
registered
trademark
may
only
used
associated
any
way
with
electronic
work
people
who
agree
bound
the
terms
this
agreement
there
are
few
things
that
you
can
with
most
project
gutenberg
electronic
works
even
without
complying
with
the
full
terms
this
agreement
see
paragraph
below
there
are
lot
things
you
can
with
project
gutenberg
electronic
works
you
follow
the
terms
this
agreement
and
help
preserve
free
future
access
project
gutenberg
electronic
works
see
paragraph
below
the
project
gutenberg
literary
archive
foundation
the
foundation
pglaf
owns
compilation
copyright
the
collection
project
gutenberg
electronic
works
nearly
all
the
individual
works
the
collection
are
the
public
domain
the
united
states
individual
work
the
public
domain
the
united
states
and
you
are
located
the
united
states
not
claim
right
prevent
you
from
copying
distributing
performing
displaying
creating
derivative
works
based
the
work
long
all
references
project
gutenberg
are
removed
course
hope
that
you
will
support
the
project
gutenberg
mission
promoting
free
access
electronic
works
freely
sharing
project
gutenberg
works
compliance
with
the
terms
this
agreement
for
keeping
the
project
gutenberg
name
associated
with
the
work
you
can
easily
comply
with
the
terms
this
agreement
keeping
this
work
the
same
format
with
its
attached
full
project
gutenberg
license
when
you
share
without
charge
with
others
the
copyright
laws
the
place
where
you
are
located
also
govern
what
you
can
with
this
work
copyright
laws
most
countries
are
constant
state
change
you
are
outside
the
united
states
check
the
laws
your
country
addition
the
terms
this
agreement
before
downloading
copying
displaying
performing
distributing
creating
derivative
works
based
this
work
any
other
project
gutenberg
work
the
foundation
makes
representations
concerning
the
copyright
status
any
work
any
country
outside
the
united
states
unless
you
have
removed
all
references
project
gutenberg
the
following
sentence
with
active
links
other
immediate
access
the
full
project
gutenberg
license
must
appear
prominently
whenever
any
copy
project
gutenberg
work
any
work
which
the
phrase
project
gutenberg
appears
with
which
the
phrase
project
gutenberg
associated
accessed
displayed
performed
viewed
copied
distributed
this
ebook
for
the
use
anyone
anywhere
cost
and
with
almost
restrictions
whatsoever
you
may
copy
give
away
use
under
the
terms
the
project
gutenberg
license
included
with
this
ebook
online
www
gutenberg
org
individual
project
gutenberg
electronic
work
derived
from
the
public
domain
does
not
contain
notice
indicating
that
posted
with
permission
the
copyright
holder
the
work
can
copied
and
distributed
anyone
the
united
states
without
paying
any
fees
charges
you
are
redistributing
providing
access
work
with
the
phrase
project
gutenberg
associated
with
appearing
the
work
you
must
comply
either
with
the
requirements
paragraphs
through
obtain
permission
for
the
use
the
work
and
the
project
gutenberg
trademark
set
forth
paragraphs
individual
project
gutenberg
electronic
work
posted
with
the
permission
the
copyright
holder
your
use
and
distribution
must
comply
with
both
paragraphs
through
and
any
additional
terms
imposed
the
copyright
holder
additional
terms
will
linked
the
project
gutenberg
license
for
all
works
posted
with
the
permission
the
copyright
holder
found
the
beginning
this
work
not
unlink
detach
remove
the
full
project
gutenberg
license
terms
from
this
work
any
files
containing
part
this
work
any
other
work
associated
with
project
gutenberg
not
copy
display
perform
distribute
redistribute
this
electronic
work
any
part
this
electronic
work
without
prominently
displaying
the
sentence
set
forth
paragraph
with
active
links
immediate
access
the
full
terms
the
project
gutenberg
license
you
may
convert
and
distribute
this
work
any
binary
compressed
marked
nonproprietary
proprietary
form
including
any
word
processing
hypertext
form
however
you
provide
access
distribute
copies
project
gutenberg
work
format
other
than
plain
vanilla
ascii
other
format
used
the
official
version
posted
the
official
project
gutenberg
web
site
www
gutenberg
org
you
must
additional
cost
fee
expense
the
user
provide
copy
means
exporting
copy
means
obtaining
copy
upon
request
the
work
its
original
plain
vanilla
ascii
other
form
any
alternate
format
must
include
the
full
project
gutenberg
license
specified
paragraph
not
charge
fee
for
access
viewing
displaying
performing
copying
distributing
any
project
gutenberg
works
unless
you
comply
with
paragraph
you
may
charge
reasonable
fee
for
copies
providing
access
distributing
project
gutenberg
electronic
works
provided
that
you
pay
royalty
fee
the
gross
profits
you
derive
from
the
use
project
gutenberg
works
calculated
using
the
method
you
already
use
calculate
your
applicable
taxes
the
fee
owed
the
owner
the
project
gutenberg
trademark
but
has
agreed
donate
royalties
under
this
paragraph
the
project
gutenberg
literary
archive
foundation
royalty
payments
must
paid
within
days
following
each
date
which
you
prepare
are
legally
required
prepare
your
periodic
tax
returns
royalty
payments
should
clearly
marked
such
and
sent
the
project
gutenberg
literary
archive
foundation
the
address
specified
section
information
about
donations
the
project
gutenberg
literary
archive
foundation
you
provide
full
refund
any
money
paid
user
who
notifies
you
writing
mail
within
days
receipt
that
does
not
agree
the
terms
the
full
project
gutenberg
license
you
must
require
such
user
return
destroy
all
copies
the
works
possessed
physical
medium
and
discontinue
all
use
and
all
access
other
copies
project
gutenberg
works
you
provide
accordance
with
paragraph
full
refund
any
money
paid
for
work
replacement
copy
defect
the
electronic
work
discovered
and
reported
you
within
days
receipt
the
work
you
comply
with
all
other
terms
this
agreement
for
free
distribution
project
gutenberg
works
you
wish
charge
fee
distribute
project
gutenberg
electronic
work
group
works
different
terms
than
are
set
forth
this
agreement
you
must
obtain
permission
writing
from
both
the
project
gutenberg
literary
archive
foundation
and
michael
hart
the
owner
the
project
gutenberg
trademark
contact
the
foundation
set
forth
section
below
project
gutenberg
volunteers
and
employees
expend
considerable
effort
identify
copyright
research
transcribe
and
proofread
public
domain
works
creating
the
project
gutenberg
collection
despite
these
efforts
project
gutenberg
electronic
works
and
the
medium
which
they
may
stored
may
contain
defects
such
but
not
limited
incomplete
inaccurate
corrupt
data
transcription
errors
copyright
other
intellectual
property
infringement
defective
damaged
disk
other
medium
computer
virus
computer
codes
that
damage
cannot
read
your
equipment
limited
warranty
disclaimer
damages
except
for
the
right
replacement
refund
described
paragraph
the
project
gutenberg
literary
archive
foundation
the
owner
the
project
gutenberg
trademark
and
any
other
party
distributing
project
gutenberg
electronic
work
under
this
agreement
disclaim
all
liability
you
for
damages
costs
and
expenses
including
legal
fees
you
agree
that
you
have
remedies
for
negligence
strict
liability
breach
warranty
breach
contract
except
those
provided
paragraph
you
agree
that
the
foundation
the
trademark
owner
and
any
distributor
under
this
agreement
will
not
liable
you
for
actual
direct
indirect
consequential
punitive
incidental
damages
even
you
give
notice
the
possibility
such
damage
limited
right
replacement
refund
you
discover
defect
this
electronic
work
within
days
receiving
you
can
receive
refund
the
money
any
you
paid
for
sending
written
explanation
the
person
you
received
the
work
from
you
received
the
work
physical
medium
you
must
return
the
medium
with
your
written
explanation
the
person
entity
that
provided
you
with
the
defective
work
may
elect
provide
replacement
copy
lieu
refund
you
received
the
work
electronically
the
person
entity
providing
you
may
choose
give
you
second
opportunity
receive
the
work
electronically
lieu
refund
the
second
copy
also
defective
you
may
demand
refund
writing
without
further
opportunities
fix
the
problem
except
for
the
limited
right
replacement
refund
set
forth
paragraph
this
work
provided
you
with
other
warranties
any
kind
express
implied
including
but
not
limited
warranties
merchantability
fitness
for
any
purpose
some
states
not
allow
disclaimers
certain
implied
warranties
the
exclusion
limitation
certain
types
damages
any
disclaimer
limitation
set
forth
this
agreement
violates
the
law
the
state
applicable
this
agreement
the
agreement
shall
interpreted
make
the
maximum
disclaimer
limitation
permitted
the
applicable
state
law
the
invalidity
unenforceability
any
provision
this
agreement
shall
not
void
the
remaining
provisions
indemnity
you
agree
indemnify
and
hold
the
foundation
the
trademark
owner
any
agent
employee
the
foundation
anyone
providing
copies
project
gutenberg
electronic
works
accordance
with
this
agreement
and
any
volunteers
associated
with
the
production
promotion
and
distribution
project
gutenberg
electronic
works
harmless
from
all
liability
costs
and
expenses
including
legal
fees
that
arise
directly
indirectly
from
any
the
following
which
you
cause
occur
distribution
this
any
project
gutenberg
work
alteration
modification
additions
deletions
any
project
gutenberg
work
and
any
defect
you
cause
section
information
about
the
mission
project
gutenberg
project
gutenberg
synonymous
with
the
free
distribution
electronic
works
formats
readable
the
widest
variety
computers
including
obsolete
old
middle
aged
and
new
computers
exists
because
the
efforts
hundreds
volunteers
and
donations
from
people
all
walks
life
volunteers
and
financial
support
provide
volunteers
with
the
assistance
they
need
are
critical
reaching
project
gutenberg
goals
and
ensuring
that
the
project
gutenberg
collection
will
remain
freely
available
for
generations
come
the
project
gutenberg
literary
archive
foundation
was
created
provide
secure
and
permanent
future
for
project
gutenberg
and
future
generations
learn
more
about
the
project
gutenberg
literary
archive
foundation
and
how
your
efforts
and
donations
can
help
see
sections
and
and
the
foundation
information
page
www
gutenberg
org
section
information
about
the
project
gutenberg
literary
archive
foundation
the
project
gutenberg
literary
archive
foundation
non
profit
educational
corporation
organized
under
the
laws
the
state
mississippi
and
granted
tax
exempt
status
the
internal
revenue
service
the
foundation
ein
federal
tax
identification
number
contributions
the
project
gutenberg
literary
archive
foundation
are
tax
deductible
the
full
extent
permitted
federal
laws
and
your
state
laws
the
foundation
principal
office
located
melan
fairbanks
but
its
volunteers
and
employees
are
scattered
throughout
numerous
locations
its
business
office
located
north
west
salt
lake
city
email
contact
links
and
date
contact
information
can
found
the
foundation
web
site
and
official
page
www
gutenberg
org
contact
for
additional
contact
information
gregory
newby
chief
executive
and
director
gbnewby
pglaf
org
section
information
about
donations
the
project
gutenberg
literary
archive
foundation
project
gutenberg
depends
upon
and
cannot
survive
without
wide
spread
public
support
and
donations
carry
out
its
mission
increasing
the
number
public
domain
and
licensed
works
that
can
freely
distributed
machine
readable
form
accessible
the
widest
array
equipment
including
outdated
equipment
many
small
donations
are
particularly
important
maintaining
tax
exempt
status
with
the
irs
the
foundation
committed
complying
with
the
laws
regulating
charities
and
charitable
donations
all
states
the
united
states
compliance
requirements
are
not
uniform
and
takes
considerable
effort
much
paperwork
and
many
fees
meet
and
keep
with
these
requirements
not
solicit
donations
locations
where
have
not
received
written
confirmation
compliance
send
donations
determine
the
status
compliance
for
any
particular
state
visit
www
gutenberg
org
donate
while
cannot
and
not
solicit
contributions
from
states
where
have
not
met
the
solicitation
requirements
know
prohibition
against
accepting
unsolicited
donations
from
donors
such
states
who
approach
with
offers
donate
international
donations
are
gratefully
accepted
but
cannot
make
any
statements
concerning
tax
treatment
donations
received
from
outside
the
united
states
laws
alone
swamp
our
small
staff
please
check
the
project
gutenberg
web
pages
for
current
donation
methods
and
addresses
donations
are
accepted
number
other
ways
including
checks
online
payments
and
credit
card
donations
donate
please
visit
www
gutenberg
org
donate
section
general
information
about
project
gutenberg
electronic
works
professor
michael
hart
was
the
originator
the
project
gutenberg
concept
library
electronic
works
that
could
freely
shared
with
anyone
for
forty
years
produced
and
distributed
project
gutenberg
ebooks
with
only
loose
network
volunteer
support
project
gutenberg
ebooks
are
often
created
from
several
printed
editions
all
which
are
confirmed
public
domain
the
unless
copyright
notice
included
thus
not
necessarily
keep
ebooks
compliance
with
any
particular
paper
edition
most
people
start
our
web
site
which
has
the
main
search
facility
www
gutenberg
org
this
web
site
includes
information
about
project
gutenberg
including
how
make
donations
the
project
gutenberg
literary
archive
foundation
how
help
produce
our
new
ebooks
and
how
subscribe
our
email
newsletter
hear
about
new
ebooks
allocating
array
with
calloc
engs
labs
notes
reading
resources
examples
allocating
array
with
calloc
seen
the
use
one
dimensional
array
pointers
strings
names
that
case
the
number
slots
the
array
was
constant
what
don
know
that
number
compile
time
here
snippet
code
hint
how
allocate
array
num
slots
the
number
elements
the
array
int
num
somehow
obtained
below
assume
num
array
ints
int
array
calloc
num
sizeof
int
array
array
pointers
int
int
array
calloc
num
sizeof
int
array
malloc
sizeof
int
array
for
other
types
the
process
analogous
struct
foo
array
calloc
num
sizeof
struct
foo
array
malloc
sizeof
struct
foo
array
foomember
assuming
foomember
integer
member
struct
foo
sometimes
you
don
know
how
initialize
the
structure
because
provides
constructor
function
first
step
the
same
struct
foo
array
calloc
num
sizeof
struct
foo
array
foo
new
let
the
constructor
allocate
and
initialize
new
foo
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
resources
engs
labs
notes
reading
resources
examples
resources
textbooks
and
resources
there
required
textbook
for
this
course
however
highly
recommend
reference
manual
harbison
and
steele
have
found
invaluable
and
always
near
desk
there
copy
reserve
baker
library
there
may
copies
available
local
bookstores
you
can
order
from
amazon
barnes
amp
noble
look
for
the
most
recent
fifth
edition
when
need
more
traditional
text
refer
the
book
second
edition
mike
banahan
declan
brady
and
mark
doran
originally
published
addison
wesley
this
book
available
online
here
the
unix
operating
system
and
the
programming
language
have
both
been
around
for
quite
some
time
unix
was
originally
developed
the
late
assembly
language
and
was
mostly
reimplemented
the
new
programming
language
the
early
the
first
book
kernighan
and
ritchie
programming
language
still
print
and
owned
most
unix
geeks
not
because
such
great
reference
but
well
just
because
there
are
large
number
number
books
unix
and
all
its
variants
including
linux
see
below
unix
systems
contain
lots
documentation
the
form
what
are
called
man
pages
which
short
for
manual
pages
thus
hardcopy
book
unix
may
not
really
necessary
didn
own
unix
book
until
many
years
after
began
using
unix
documentation
for
many
the
tools
will
using
will
either
found
man
pages
will
supplied
url
this
page
course
you
welcome
employ
your
favorite
search
engine
but
beware
that
there
are
subtle
variations
unix
tools
across
its
many
flavors
and
distributions
for
the
man
pages
department
servers
are
the
definitive
reference
other
resources
papers
and
references
will
appear
this
page
they
are
identified
you
find
others
that
you
like
please
let
know
and
share
them
with
everyone
general
department
user
faq
you
need
log
using
your
unix
username
and
password
bash
here
are
some
good
links
bash
scripting
information
short
bash
tutorial
gnu
bash
manual
bash
programming
introduction
how
advanced
bash
scripting
guide
bash
pocket
reference
help
for
power
users
and
sys
admins
edition
arnold
robbins
short
and
useful
book
for
less
than
ten
bucks
explainshell
very
cool
website
that
lets
you
type
bash
command
and
get
feedback
what
supposed
drawing
the
man
pages
editors
editor
software
very
personal
choice
have
used
emacs
for
many
years
extensible
via
lisp
and
customizable
others
prefer
the
increasingly
popular
sublime
text
editor
told
fast
highly
extensible
using
python
amp
json
they
are
both
excellent
for
longer
sessions
others
prefer
vim
for
quick
fixes
and
slow
ssh
connections
the
editor
workable
alternative
getting
started
with
sublime
text
and
great
tutorial
emacs
tutorial
emacs
quick
reference
guide
extremely
quick
and
simple
introduction
the
text
editor
vim
tutorial
markdown
file
with
extension
assumed
text
file
markdown
syntax
which
provides
very
simple
and
readable
markup
for
headings
lists
italics
bold
hyperlinks
code
snippets
and
embedded
images
this
course
website
written
markdown
and
rendered
with
jekyll
many
source
code
web
portals
like
our
gitlab
and
the
popular
github
allow
you
browse
the
files
your
repository
automatically
rendering
any
that
are
markdown
format
making
such
files
much
nicer
look
than
plain
text
files
you
can
edit
markdown
files
any
text
editor
but
there
are
some
specialized
editors
available
markdown
easy
learn
and
there
are
many
useful
resources
online
quick
tutorial
gitlab
markdown
guide
after
all
uses
gitlab
github
mastering
markdown
tutorial
github
markdown
cheatsheet
brett
terpstra
write
better
markdown
which
recognizes
that
many
flavors
markdown
exist
markoff
macos
application
for
previewing
markdown
files
macdown
macos
application
for
editing
markdown
files
git
great
references
for
the
git
distributed
version
control
system
that
use
instructions
for
setting
gitlab
with
ssh
free
pro
git
book
scott
chacon
plus
the
website
has
lots
additional
git
references
including
videos
some
interactive
tutorials
try
github
explain
git
some
other
non
interactive
video
tutorials
learn
version
control
with
git
git
tutorial
requires
ruby
resolving
conflicts
very
slick
and
free
gui
for
git
called
sourcetree
very
popular
the
excellent
licensed
not
free
application
tower
reference
for
common
gitignore
files
tools
software
tools
may
using
valgrind
family
tools
for
dynamic
analysis
programs
quick
guide
valgrind
gnu
make
utility
for
determining
what
needs
done
compile
link
copy
etc
build
program
other
target
and
then
issues
the
commands
pandoc
universal
document
converter
gtk
popular
toolkit
for
creating
graphical
user
interfaces
follow
the
instructions
below
learn
how
compile
and
use
gtk
and
xquartz
run
window
based
graphical
applications
the
unix
servers
but
allow
them
pop
open
windows
your
mac
you
need
install
xquartz
installation
simple
this
link
has
instructions
for
installing
and
using
xquartz
and
for
compiling
gtk
applications
unix
books
unix
amp
linux
books
links
practical
guide
linux
commands
editors
and
shell
programming
mark
sobell
excellent
comprehensive
hands
book
linux
and
shell
programming
well
python
perl
and
mysql
beginning
linux
programming
edition
neil
matthew
richard
stones
really
good
book
covering
debugging
processes
threads
and
socket
programming
clear
and
easy
manner
the
practice
programming
brian
kernighan
rob
pike
great
classic
book
design
and
programming
for
unix
and
professional
linux
programming
jon
masters
and
richard
blum
oldie
but
goodie
unix
network
programming
richard
stevens
prentice
hall
linux
nutshell
linux
system
programming
what
the
window
system
from
reilly
linux
devcenter
com
unix
linux
and
variants
free
website
listing
common
unix
commands
bash
command
line
editing
unix
for
macos
users
video
tutorial
from
version
macos
from
lynda
com
which
free
dartmouth
users
homebrew
tool
for
installing
unix
tools
macos
highly
recommended
for
programming
programming
tutorials
video
tutorials
from
lynda
com
which
are
free
dartmouth
users
the
pragmatic
programmer
andrew
hunt
and
david
thomas
addison
wesley
things
every
programmer
should
know
kevlin
henney
reilly
first
book
ansi
fourth
edition
gary
bronson
very
good
book
for
learning
the
wikipedia
entry
for
the
programming
language
the
usenet
discussion
why
good
introduction
the
programming
language
charles
palmer
easy
read
with
lots
simple
examples
skip
page
start
and
remember
some
the
comments
are
dated
variables
all
lower
case
quick
reference
cards
for
and
gdb
remember
that
not
suggesting
you
buy
all
these
books
the
text
harbison
and
steele
highly
recommended
for
this
course
and
may
local
bookstores
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
tse
crawler
requirements
spec
engs
labs
notes
reading
resources
examples
tse
crawler
requirements
spec
the
tse
crawler
standalone
program
that
crawls
the
web
and
retrieves
webpages
starting
from
seed
url
parses
the
seed
webpage
extracts
any
embedded
urls
then
retrieves
each
those
pages
recursively
but
limiting
its
exploration
given
depth
the
crawler
shall
execute
from
command
line
with
usage
syntax
crawler
seedurl
pagedirectory
maxdepth
where
seedurl
used
the
initial
url
where
pagedirectory
the
pathname
for
existing
directory
which
write
downloaded
webpages
and
where
maxdepth
non
negative
integer
representing
the
maximum
crawl
depth
crawl
all
pages
reachable
from
seedurl
following
links
maximum
depth
maxdepth
where
maxdepth
means
that
crawler
only
explores
the
page
seedurl
maxdepth
means
that
crawler
only
explores
the
page
seedurl
and
those
pages
which
seedurl
links
and
forth
inductively
pause
least
one
second
between
page
fetches
ignore
urls
that
are
not
internal
meaning
outside
the
designated
server
write
each
explored
page
the
pagedirectory
with
unique
document
wherein
the
document
starts
and
increments
for
each
new
page
and
the
filename
form
pagedirectory
and
the
first
line
the
file
the
url
and
the
second
line
the
file
the
depth
and
the
rest
the
file
the
page
content
the
html
unchanged
requirements
spec
shall
means
must
polite
webservers
not
like
crawlers
think
about
why
indeed
you
hit
web
server
too
hard
its
operator
may
block
your
crawler
based
its
internet
address
actually
they
usually
block
your
whole
domain
hyperactive
crawler
could
cause
some
websites
block
the
whole
dartmouth
edu
polite
our
crawler
purposely
slows
its
behavior
introducing
delay
sleeping
for
one
second
between
fetches
furthermore
our
crawler
will
limit
its
crawl
specific
web
server
inside
don
bother
any
other
servers
campus
beyond
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
tse
crawler
design
spec
engs
labs
notes
reading
resources
examples
tse
crawler
design
spec
recall
the
crawler
requirements
spec
the
crawler
crawls
website
and
retrieves
webpages
starting
with
specified
url
parses
the
initial
webpage
extracts
any
embedded
urls
and
retrieves
those
pages
and
crawls
the
pages
found
those
urls
but
limits
itself
maxdepth
hops
from
the
seed
url
and
urls
that
are
internal
the
designated
server
when
the
crawler
process
complete
the
indexing
the
collected
documents
can
begin
design
spec
should
contain
several
sections
user
interface
inputs
and
outputs
functional
decomposition
into
modules
pseudo
code
for
logic
algorithmic
flow
dataflow
through
modules
major
data
structures
testing
plan
let
look
through
each
user
interface
the
crawler
only
interface
with
the
user
the
command
line
must
always
have
three
arguments
crawler
seedurl
pagedirectory
maxdepth
for
example
crawler
http
old
www
dartmouth
edu
index
html
data
inputs
and
outputs
input
the
only
inputs
are
command
line
parameters
see
the
user
interface
above
output
save
each
explored
webpage
file
one
file
per
page
use
unique
document
the
file
name
for
document
ids
and
forth
within
file
write
the
page
url
the
first
line
the
depth
the
page
where
the
seed
depth
the
second
line
the
page
contents
beginning
the
third
line
functional
decomposition
into
modules
anticipate
the
following
modules
functions
main
which
parses
arguments
and
initializes
other
modules
crawler
which
loops
over
pages
explore
until
the
list
exhausted
pagefetcher
which
fetches
page
from
url
pagescanner
which
extracts
urls
from
page
and
processes
each
one
pagesaver
which
outputs
page
the
the
appropriate
file
and
some
helper
modules
that
provide
data
structures
bag
pages
have
yet
explore
hashtable
urls
seen
far
pseudo
code
for
logic
algorithmic
flow
the
crawler
will
run
follows
execute
from
command
line
shown
the
user
interface
parse
the
command
line
validate
parameters
initialize
other
modules
make
webpage
for
the
seedurl
marked
with
depth
add
that
page
the
bag
webpages
crawl
add
that
url
the
hashtable
urls
seen
while
there
are
more
webpages
crawl
extract
webpage
url
depth
item
from
the
bag
webpages
crawled
pause
for
least
one
second
use
pagefetcher
retrieve
webpage
for
that
url
use
pagesaver
write
the
webpage
the
pagedirectory
with
unique
document
described
the
requirements
the
webpage
depth
maxdepth
explore
the
webpage
find
links
use
pagescanner
parse
the
webpage
extract
all
its
embedded
urls
for
each
extracted
url
normalize
the
url
see
below
that
url
not
internal
see
below
ignore
try
insert
that
url
into
the
hashtable
urls
seen
was
already
the
table
nothing
was
added
the
table
make
new
webpage
for
that
url
depth
add
the
new
webpage
the
bag
webpages
crawled
normalize
the
url
means
convert
into
clean
canonical
form
internal
means
the
url
stays
within
the
playground
http
old
www
dartmouth
edu
good
implementation
will
not
necessarily
encode
all
the
above
code
single
deeply
nested
function
part
the
implementation
spec
break
the
pseudocode
down
into
cleanly
arranged
set
functions
notice
that
our
pseudocode
says
nothing
about
the
order
which
crawls
webpages
since
presumably
pulls
them
out
bag
and
bag
abstract
data
structure
explicitly
denies
any
promise
about
the
order
items
removed
from
bag
can
expect
any
particular
crawl
order
that
the
result
may
may
not
breadth
first
search
but
for
the
crawler
don
care
about
the
order
long
explore
everything
within
the
maxdepth
neighborhood
the
crawler
completes
and
exits
when
has
nothing
left
its
bag
more
pages
crawled
the
maxdepth
parameter
indirectly
determines
the
number
pages
that
the
crawler
will
retrieve
dataflow
through
modules
main
parses
parameters
and
passes
them
the
crawler
crawler
uses
bag
track
pages
explore
and
hashtable
track
pages
seen
when
explores
page
gives
the
page
url
the
pagefetcher
then
the
result
pagesaver
then
the
pagescanner
pagefetcher
fetches
the
contents
html
for
page
from
url
and
returns
pagesaver
outputs
page
the
appropriate
file
pagescanner
extracts
urls
from
page
and
returns
one
time
major
data
structures
three
helper
modules
provide
data
structures
bag
page
url
depth
structures
set
urls
indirectly
used
hashtable
hashtable
urls
testing
plan
unit
testing
small
test
program
test
each
module
make
sure
does
what
supposed
integration
testing
assemble
the
crawler
and
test
whole
each
case
examine
the
output
files
carefully
sure
they
have
the
contents
the
correct
page
with
the
correct
url
and
the
correct
depth
ensure
that
pages
are
missing
duplicated
print
progress
indicators
from
the
crawler
proceeds
print
each
url
explored
and
each
url
found
the
pages
explores
you
can
watch
its
progress
runs
test
the
program
with
various
forms
incorrect
command
line
arguments
ensure
that
its
command
line
parsing
and
validation
those
parameters
works
correctly
test
the
crawler
with
seedurl
that
points
non
existent
server
test
the
crawler
with
seedurl
that
points
non
internal
server
test
the
crawler
with
seedurl
that
points
valid
server
but
non
existent
page
crawl
simple
closed
set
cross
linked
web
pages
crawl
ensure
that
some
page
are
mentioned
multiple
times
within
page
and
multiple
times
across
the
set
pages
ensure
there
loop
cycle
the
graph
pages
such
little
site
you
know
exactly
what
set
pages
should
crawled
what
depths
and
you
know
where
your
program
might
trip
point
the
crawler
page
that
site
and
explore
depths
verify
that
the
files
created
match
expectations
repeat
with
different
seed
page
that
same
site
the
site
indeed
graph
with
cycles
there
should
several
interesting
starting
points
point
the
crawler
our
wikipedia
playground
explore
depths
takes
long
time
run
depth
higher
verify
that
the
files
created
match
expectations
when
you
are
confident
that
your
crawler
runs
well
test
part
our
playground
with
greater
depth
but
ready
kill
seems
running
amok
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
tse
indexer
requirements
spec
engs
labs
notes
reading
resources
examples
tse
indexer
requirements
spec
the
tse
indexer
standalone
program
that
reads
the
document
files
produced
the
tse
crawler
builds
index
and
writes
that
index
file
its
companion
the
index
tester
loads
index
file
produced
the
indexer
and
saves
another
file
the
indexer
shall
execute
from
command
line
with
usage
syntax
indexer
pagedirectory
indexfilename
where
pagedirectory
the
pathname
directory
produced
the
crawler
and
where
indexfilename
the
pathname
file
into
which
the
index
should
written
the
indexer
creates
the
file
needed
and
overwrites
the
file
already
exists
read
documents
from
the
pagedirectory
each
which
has
unique
document
wherein
the
document
starts
and
increments
for
each
new
page
and
the
filename
form
pagedirectory
and
the
first
line
the
file
the
url
and
the
second
line
the
file
the
depth
and
the
rest
the
file
the
page
content
the
html
unchanged
build
inverted
index
data
structure
mapping
from
words
documentid
count
pairs
wherein
each
count
represents
the
number
occurrences
the
given
word
the
given
document
ignore
words
with
fewer
than
three
characters
and
normalize
the
word
before
indexing
here
normalize
means
convert
all
letters
lower
case
create
file
indexfilename
and
write
the
index
that
file
the
format
described
below
the
indexer
shall
validate
its
command
line
arguments
pagedirectory
the
pathname
for
existing
directory
produced
the
crawler
and
indexfilename
the
pathname
writeable
file
may
may
not
already
exist
the
indexer
may
assume
that
pagedirectory
has
files
named
without
gaps
the
content
files
pagedirectory
follow
the
format
defined
the
specs
thus
your
code
read
the
files
need
not
have
extensive
error
checking
the
index
tester
shall
execute
from
command
line
with
usage
syntax
indextest
oldindexfilename
newindexfilename
where
oldindexfilename
the
name
file
produced
the
indexer
and
where
newindexfilename
the
name
file
into
which
the
index
should
written
load
the
index
from
the
oldindexfilename
into
inverted
index
data
structure
create
file
newindexfilename
and
write
the
index
that
file
the
format
described
below
need
not
validate
its
command
line
arguments
other
than
ensure
that
receives
precisely
two
arguments
may
simply
try
open
the
oldindexfilename
for
reading
and
later
try
open
the
newindexfilename
for
writing
you
may
want
run
this
program
part
testing
script
that
verifies
that
the
output
identical
equivalent
the
input
the
index
tester
may
assume
that
the
content
the
index
file
follows
the
format
specified
below
thus
your
code
recreate
index
structure
reading
file
need
not
have
extensive
error
checking
index
file
format
the
indexer
writes
the
inverted
index
file
and
both
the
index
tester
and
the
querier
read
the
inverted
index
from
file
the
file
shall
the
following
format
one
line
per
word
one
word
per
line
each
line
provides
the
word
and
one
more
docid
count
pairs
the
format
word
docid
count
docid
count
where
word
string
lower
case
letters
where
docid
positive
non
zero
integer
where
count
positive
non
zero
integer
where
the
word
and
integers
are
separated
spaces
within
the
file
the
lines
may
any
order
within
line
the
docids
may
any
order
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
tse
querier
requirements
spec
engs
labs
notes
reading
resources
examples
tse
querier
requirements
spec
the
tse
querier
standalone
program
that
reads
the
index
file
produced
the
tse
indexer
and
page
files
produced
the
tse
querier
and
answers
search
queries
submitted
via
stdin
the
querier
shall
execute
from
command
line
with
usage
syntax
querier
pagedirectory
indexfilename
where
pagedirectory
the
pathname
directory
produced
the
crawler
and
where
indexfilename
the
pathname
file
produced
the
indexer
load
the
index
from
indexfilename
into
internal
data
structure
read
search
queries
from
stdin
one
per
line
until
eof
clean
and
parse
each
query
according
the
syntax
described
below
the
query
syntax
somehow
invalid
print
error
message
not
perform
the
query
and
prompt
for
the
next
query
print
the
clean
query
for
user
see
use
the
index
identify
the
set
documents
that
satisfy
the
query
described
below
the
query
empty
words
print
nothing
documents
satisfy
the
query
print
documents
match
otherwise
rank
the
resulting
set
documents
according
its
score
described
below
and
print
the
set
documents
decreasing
rank
order
for
each
list
the
score
document
and
url
obtain
the
url
reading
the
first
line
the
relevant
document
file
from
the
pagedirectory
exit
with
zero
status
when
eof
reached
stdin
the
querier
shall
validate
its
command
line
arguments
pagedirectory
the
pathname
for
existing
directory
produced
the
crawler
and
indexfilename
the
pathname
readable
file
the
querier
may
assume
that
the
input
directory
and
files
follow
the
designated
formats
pagedirectory
has
files
named
without
gaps
the
content
files
pagedirectory
follow
the
format
defined
the
specs
thus
your
code
read
the
files
need
not
have
extensive
error
checking
the
content
the
file
named
indexfilename
follows
our
index
file
format
thus
your
code
recreate
index
structure
reading
file
need
not
have
extensive
error
checking
queries
the
specs
above
indicate
that
you
read
one
query
per
line
parse
the
query
according
its
syntax
determine
which
documents
satisfy
the
query
and
determine
score
for
each
document
satisfying
the
query
define
each
term
below
syntax
queries
are
sequence
words
with
optional
boolean
operators
and
where
and
has
higher
precedence
than
first
ignore
blank
lines
empty
nothing
but
spaces
second
translate
all
upper
case
letters
the
input
line
into
lower
case
then
use
backus
naur
form
for
describing
the
query
syntax
you
have
not
heard
bnf
before
you
sure
see
future
classes
software
specs
query
andsequence
andsequence
andsequence
word
and
word
and
word
sequence
one
more
lower
case
letters
think
the
query
sequence
tokens
each
word
literal
and
with
space
between
tokens
and
optional
space
the
beginning
end
the
line
note
too
that
the
literal
and
may
left
out
and
thus
implicit
notice
how
the
structure
the
syntax
indicates
that
and
has
higher
precedence
binds
more
tightly
than
query
sequence
and
sequences
for
those
you
familiar
with
logic
disjunction
conjunctions
the
way
this
very
similar
another
grammar
you
know
well
arithmetic
expression
product
product
product
number
number
and
number
sequence
one
more
digits
equation
like
the
answer
not
because
has
higher
precedence
than
see
lecture
notes
single
word
examples
all
equivalent
dartmouth
dartmouth
dartmouth
two
word
examples
all
equivalent
dartmouth
college
dartmouth
college
dartmouth
and
college
dartmouth
and
college
the
following
two
examples
are
different
dartmouth
college
and
computer
science
dartmouth
college
computer
science
there
implicit
and
between
dartmouth
and
college
and
between
computer
and
science
capitalization
does
not
matter
thus
the
above
two
queries
are
equivalent
dartmouth
and
college
and
computer
and
science
dartmouth
and
college
computer
and
science
the
first
single
andsequence
single
conjunction
the
second
combination
first
andsequence
and
second
andsequence
that
disjunction
two
conjunctions
you
can
combine
words
more
richly
course
dartmouth
computer
science
programming
unix
doug
mcilroy
the
following
queries
all
have
syntax
errors
and
and
dartmouth
dartmouth
dartmouth
college
dartmouth
college
and
dartmouth
college
and
computer
dartmouth
college
and
and
computer
dartmouth
college
and
computer
computer
science
dartmouth
backus
naur
form
because
per
the
syntax
the
literal
and
must
come
between
words
and
the
literal
must
come
between
andsequences
they
cannot
appear
the
beginning
end
query
the
literals
and
amp
cannot
adjacent
characters
other
than
letters
spaces
are
disallowed
example
output
from
the
querier
for
some
the
queries
above
query
dartmouth
computer
science
programming
unix
doug
mcilroy
matches
documents
ranked
score
doc
http
old
www
dartmouth
edu
dfk
papers
index
html
score
doc
http
old
www
dartmouth
edu
dfk
postdoc
html
score
doc
http
old
www
dartmouth
edu
dfk
people
html
score
doc
http
old
www
dartmouth
edu
dfk
index
html
score
doc
http
old
www
dartmouth
edu
dfk
championinternationalprofessor
html
score
doc
http
old
www
dartmouth
edu
score
doc
http
old
www
dartmouth
edu
dfk
teaching
html
query
and
error
and
cannot
first
query
error
cannot
first
query
and
dartmouth
error
and
cannot
first
query
dartmouth
error
cannot
first
query
dartmouth
college
error
cannot
last
query
dartmouth
college
and
error
and
cannot
last
query
dartmouth
college
and
computer
error
and
and
cannot
adjacent
query
dartmouth
college
and
and
computer
error
and
and
and
cannot
adjacent
query
dartmouth
college
and
computer
error
and
and
cannot
adjacent
error
bad
character
query
error
bad
character
query
error
bad
character
query
satisfy
document
satisfies
single
word
query
for
word
that
word
appears
that
document
document
satisfies
conjunction
aka
andsequence
worda
and
wordb
both
worda
and
wordb
appear
the
document
induction
document
satisfies
andsequence
and
wordc
the
document
satisfies
the
andsequence
and
wordc
also
appears
the
document
document
satisfies
disjunction
worda
wordb
either
worda
and
wordb
appear
the
document
induction
document
satisfies
andsequencea
andsequenceb
the
document
satisfies
the
andsequenceb
satisfies
andsequenceb
both
score
because
want
rank
the
documents
satisfying
the
query
need
score
each
document
how
well
satisfies
the
document
the
score
for
document
satisfying
single
word
query
for
word
the
number
occurrences
word
that
document
fortunately
that
what
your
index
tells
you
the
score
for
document
satisfying
conjunction
aka
andsequence
worda
and
wordb
the
minimum
the
score
for
worda
and
the
score
for
wordb
this
document
induction
the
score
for
document
satisfying
andsequence
and
wordc
the
minimum
the
score
for
the
andsequence
and
the
score
for
wordc
this
document
the
score
for
document
satisfying
disjunction
worda
wordb
the
sum
the
score
for
worda
and
the
score
for
wordb
this
document
induction
the
score
for
document
satisfying
andsequencea
andsequenceb
the
sum
the
score
for
andsequencea
and
the
score
for
andsequenceb
this
document
for
example
consider
three
documents
and
three
queries
query
matches
cat
dog
emu
cat
dog
emu
cat
dog
emu
cat
and
dog
score
score
score
cat
dog
score
score
score
cat
and
dog
emu
score
score
score
where
indicates
the
highest
rank
for
each
query
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
moved
permanently
moved
permanently
nginx
moved
permanently
moved
permanently
nginx
activity
shell
pipelines
engs
labs
notes
reading
resources
examples
activity
shell
pipelines
billboard
hot
let
play
with
the
billboard
hot
from
which
extracted
into
text
file
write
pipelines
find
out
sort
the
list
start
and
countdown
how
many
song
titles
mention
love
how
many
artists
are
the
top
which
artist
had
the
most
hits
top
some
useful
commands
public
html
lectures
bash
billboard
hot
txt
less
cut
less
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
activity
shell
script
engs
labs
notes
reading
resources
examples
activity
shell
script
read
backup
diff
what
does
now
make
copy
for
yourself
examples
backup
diff
work
your
laptop
scp
username
flume
dartmouth
edu
examples
backup
diff
and
modify
your
copy
exits
with
zero
status
when
there
are
differences
and
non
zero
status
when
there
are
any
missing
backups
differing
files
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
extra
introduction
engs
labs
notes
reading
resources
examples
extra
introduction
this
lecture
extra
meant
complement
today
lecture
notes
warning
the
examples
cited
this
lecture
extra
may
not
follow
programming
style
cover
operators
precedence
base
data
types
storage
modifiers
scope
rules
global
and
local
variables
flow
control
programs
let
basic
operators
nearly
all
operators
are
identical
those
java
however
the
role
system
programming
exposes
much
more
use
the
shift
and
bit
wise
operators
than
java
here
are
the
basic
operators
assignment
arithmetic
unary
priorities
may
overridden
with
relational
all
these
have
the
same
precedence
equality
logical
amp
amp
and
not
pre
and
post
decrement
and
increment
operators
any
integer
character
pointer
variable
may
either
incremented
decremented
before
after
its
value
used
expression
for
example
fred
will
decrement
fred
before
its
value
used
fred
will
increment
fred
before
its
value
used
fred
will
get
old
value
and
then
decrement
fred
fred
will
get
old
value
and
then
increment
fred
let
write
some
code
look
pre
and
post
increment
and
decrement
code
increment
file
increment
description
illustrate
pre
and
post
increment
and
decrement
include
stdio
int
main
int
fred
printf
start
fred
and
fred
fred
printf
fred
fred
and
fred
fred
printf
fred
fred
and
fred
fred
printf
fred
fred
and
fred
fred
printf
fred
fred
and
fred
return
once
have
the
code
have
compile
with
gcc
with
the
various
compiler
switches
discussed
lecture
see
all
the
options
try
gcc
help
man
gcc
use
mygcc
filename
filename
our
compilation
command
for
now
later
use
the
more
powerful
make
utility
bashrc
already
defined
mygcc
alias
alias
mygcc
alias
mygcc
gcc
wall
pedantic
std
ggdb
mygcc
increment
increment
increment
rwxr
atc
admin
jan
increment
increment
start
fred
and
fred
fred
and
fred
fred
and
fred
fred
and
fred
fred
and
the
compiler
produces
executable
file
named
increment
you
not
have
use
chmod
make
executable
the
compiler
takes
care
that
when
creates
executable
with
the
correct
permission
for
the
file
increment
try
yourself
save
the
file
your
directory
code
and
compile
and
run
the
code
verify
that
the
output
matches
the
above
more
about
gcc
and
mygcc
word
warning
whether
using
gcc
hello
hello
mygcc
hello
hello
you
must
take
care
avoid
getting
the
order
the
files
wrong
with
the
switch
which
tells
the
complier
that
the
name
the
file
following
the
switch
will
the
name
the
executable
one
student
compiled
the
correct
way
mygcc
hello
hello
producing
executable
hello
correctly
and
then
recompiled
but
got
the
order
wrong
mygcc
hello
hello
what
the
gcc
compiler
did
wasn
pleasant
took
the
executable
hello
the
source
file
and
and
hello
the
name
the
executable
created
the
result
was
the
real
source
file
hello
disappeared
well
didn
actually
disappear
was
just
erased
the
compiler
got
ready
produce
new
output
file
that
same
name
please
careful
the
tells
the
compiler
that
the
executable
creates
should
given
the
name
that
follows
the
you
can
always
use
the
default
out
and
not
use
the
option
concerned
the
other
gcc
switches
are
important
use
because
make
sure
write
good
clean
code
let
discuss
what
these
gcc
options
are
wall
pedantic
std
wall
turns
all
optional
warnings
which
are
desirable
for
normal
code
pedantic
checks
programs
for
strict
iso
conformance
and
issues
all
the
warnings
demanded
strict
iso
std
indicates
the
language
standard
want
using
these
options
the
compiler
forces
resolve
various
warning
that
you
would
not
see
you
just
used
gcc
without
any
switches
always
use
these
options
wall
pedantic
std
from
now
this
course
you
can
man
gcc
and
look
the
option
meanings
for
the
nitty
gritty
details
these
settings
bitwise
operators
and
masking
amp
bitwise
and
bitwise
bitwise
negation
you
can
use
these
check
certain
bits
are
nextchar
amp
you
see
how
this
works
shift
operators
shift
left
shift
right
shifting
bits
the
left
right
note
results
may
vary
based
upon
whether
the
type
the
variable
being
shifted
signed
unsigned
see
amp
combined
operators
and
assignment
example
combined
include
stdio
include
stdlib
int
main
int
these
lines
printf
could
have
been
written
this
way
printf
exit
type
coercion
permits
assignments
and
parameter
passing
between
variables
different
types
using
type
casts
coercion
casts
are
not
implicit
and
are
used
where
some
languages
require
transfer
function
will
see
examples
cast
operator
later
the
course
precedence
operators
expressions
are
all
evaluated
from
left
right
and
the
default
precedence
may
overridden
with
brackets
operator
precedence
highest
amp
amp
amp
lowest
variable
names
variable
names
and
type
and
function
names
shall
see
later
must
commence
with
alphabetic
the
underscore
character
and
followed
zero
more
alphabetic
underscore
digit
characters
most
compilers
such
gcc
accept
and
support
variable
type
and
function
names
characters
length
some
older
compilers
only
supported
variable
names
with
unique
leading
characters
and
keeping
this
limit
may
preferred
maintain
portable
code
also
preferred
that
you
not
use
variable
names
consisting
entirely
uppercase
characters
all
uppercase
variable
names
are
typically
reserved
for
constants
such
maxbufsize
avagadros
number
maxusers
importantly
variable
names
are
case
sensitive
mylimit
mylimit
mylimit
and
mylimit
are
four
different
variable
names
there
are
some
specific
variable
function
naming
styles
that
you
may
encounter
the
major
ones
are
camelcase
writing
compound
words
with
the
first
letter
each
word
capitalized
except
for
the
first
word
first
letter
which
not
capitalized
pascalcase
writing
compound
words
just
camelcase
with
the
first
letter
the
first
word
also
capitalized
java
common
use
this
case
for
class
names
but
camel
case
for
member
names
snake
case
writing
compound
words
with
underscore
between
each
word
with
little
any
capitalization
for
short
history
how
these
came
about
and
some
discussion
see
brad
abrams
blog
post
any
programming
project
including
all
your
assignments
should
pick
variable
function
naming
style
and
stick
with
base
types
variables
are
declared
certain
type
this
type
may
either
base
type
supported
the
language
itself
user
defined
type
consisting
elements
drawn
from
set
base
types
base
types
and
their
representation
our
lab
systems
are
type
description
char
the
character
type
bits
long
short
the
short
integer
type
bits
long
int
the
standard
integer
type
bits
long
long
the
longer
integer
type
bits
long
float
the
standard
floating
point
real
type
bits
long
about
decimal
digits
precision
double
the
extra
precision
floating
point
type
bits
long
about
decimal
digits
precision
can
determine
the
number
bytes
required
for
datatypes
and
other
things
will
see
later
with
the
sizeof
operator
contrast
java
defines
how
long
each
datatype
may
the
sizes
vary
from
machine
machine
with
the
details
managed
the
compiler
only
guarantee
that
sizeof
char
sizeof
short
sizeof
int
sizeof
long
let
write
some
code
look
these
base
data
types
will
use
the
sizeof
operator
and
the
printf
function
will
also
define
variables
each
the
base
types
and
print
the
initialized
values
part
the
data
types
code
example
data
types
the
contents
data
types
looks
like
this
file
data
types
description
sets
variables
for
different
base
data
types
intialises
them
and
print
the
data
and
the
size
the
base
data
types
number
bytes
revised
version
code
program
bronson
first
book
ansi
include
stdio
int
main
char
int
short
long
long
long
llo
float
double
long
double
printf
contents
sizeof
printf
contents
char
sizeof
bytes
sizeof
char
printf
contents
int
sizeof
bytes
sizeof
int
printf
contents
short
sizeof
bytes
sizeof
short
printf
contents
long
sizeof
bytes
sizeof
long
printf
contents
long
long
lld
sizeof
bytes
llo
sizeof
long
long
printf
contents
float
sizeof
bytes
sizeof
float
printf
contents
double
sizeof
bytes
sizeof
double
printf
contents
long
double
sizeof
bytes
sizeof
long
double
return
let
compile
and
run
the
code
mygcc
data
types
data
types
data
types
contents
sizeof
contents
char
sizeof
bytes
contents
int
sizeof
bytes
contents
short
sizeof
bytes
contents
long
sizeof
bytes
contents
long
long
sizeof
bytes
contents
float
sizeof
bytes
contents
double
sizeof
bytes
contents
long
double
sizeof
bytes
check
out
save
the
file
your
directory
compile
and
run
the
code
check
the
output
storage
modifiers
variables
base
types
may
preceded
with
one
more
storage
modifier
storage
meaning
modifier
auto
the
variable
placed
the
stack
default
deprecated
const
the
variable
constant
and
can
will
never
change
value
extern
the
variable
defined
outside
the
current
file
register
request
that
the
variable
placed
register
mostly
ignored
static
the
variable
placed
global
storage
with
limited
visibility
typedef
introduces
user
defined
type
unsigned
stored
and
used
only
positive
integers
initialization
variables
all
scalar
auto
and
static
variables
may
initialized
immediately
after
their
definition
typically
with
constants
simple
expressions
that
the
compiler
can
evaluate
compile
time
the
language
defines
that
all
uninitialized
global
variables
and
all
uninitialized
static
local
variables
will
have
the
starting
values
resulting
from
their
memory
locations
being
filled
with
zeroes
conveniently
the
value
for
integer
and
for
floating
point
number
scope
rules
global
variables
scope
defined
the
section
function
block
the
program
where
the
variable
valid
and
known
java
variable
simply
used
name
which
refer
object
newly
created
object
given
name
for
later
reference
and
that
name
may
used
refer
another
object
later
the
program
variable
more
strictly
refers
memory
address
contiguous
memory
address
starting
from
the
indicated
point
and
the
type
the
variable
declares
how
that
memory
contents
should
interpreted
and
modified
only
has
two
true
lexical
levels
global
and
function
though
sub
blocks
variables
and
statements
may
introduced
sub
blocks
many
places
seemingly
creating
new
lexical
levels
such
variables
are
typically
defined
globally
lexical
level
the
start
statement
block
where
function
body
understood
statement
block
variables
defined
globally
file
are
visible
until
the
end
that
file
they
need
not
declared
the
top
file
but
typically
are
global
variable
has
storage
modifier
static
means
that
the
variable
only
available
from
within
that
file
the
static
modifier
missing
that
variable
may
accessed
from
another
file
part
program
compiled
and
linked
from
multiple
source
files
the
extern
modifier
used
within
given
file
declare
that
the
indicated
variable
defined
another
file
the
variable
may
declared
extern
all
files
but
must
defined
and
not
static
only
single
file
scope
rules
local
variables
variables
may
also
declared
the
beginning
statement
block
but
may
not
declared
anywhere
other
than
the
top
the
block
such
variables
are
visible
until
the
end
that
block
most
variables
are
declared
the
top
function
block
and
are
thus
visible
until
the
end
the
current
function
variables
name
may
shadow
that
global
variable
making
that
global
variable
inaccessible
blocks
not
have
names
and
shadowed
variables
cannot
named
local
variables
are
accessible
until
the
end
the
block
which
they
are
defined
local
variables
are
implicitly
preceded
the
auto
modifier
control
flow
enters
the
block
memory
for
the
variable
allocated
the
run
time
stack
the
memory
automatically
deallocated
simply
becomes
inaccessible
control
flow
leaves
the
block
the
implicit
auto
modifier
facilitates
recursion
each
entry
into
new
block
allocates
memory
for
new
local
variables
and
these
unique
instances
are
accessible
only
while
that
block
local
variable
preceded
the
static
modifier
its
memory
not
allocated
the
run
time
stack
but
the
same
memory
for
global
variables
when
control
flow
leaves
the
block
the
memory
not
deallocated
and
remains
for
the
exclusive
use
that
local
variable
the
result
that
static
local
variable
retains
its
value
between
entries
its
block
whereas
the
starting
value
auto
local
variable
sitting
the
stack
cannot
assumed
more
correctly
should
considered
contain
totally
random
value
the
starting
value
static
local
variable
was
when
the
variable
was
last
used
examples
global
and
local
variables
let
look
some
code
snippets
reinforce
the
ideas
local
and
global
variables
and
the
issue
the
scope
these
variables
section
code
example
scope
file
scope
description
illustrates
the
use
global
and
local
variables
and
global
function
prototypes
revised
code
taken
from
program
bronson
first
book
ansi
include
stdio
firstnum
global
variable
not
defined
the
main
stack
has
full
scope
all
functions
the
file
scope
any
code
the
file
can
read
and
write
once
main
teriminates
the
variable
dellocated
and
longer
exists
int
firstnum
create
global
variable
named
firstnum
void
valfun
global
function
prototype
int
main
int
secnum
create
local
variable
named
secnum
firstnum
store
value
into
the
global
variable
secnum
store
value
into
the
local
variable
printf
from
main
firstnum
firstnum
printf
from
main
secnum
secnum
valfun
call
the
function
valfun
printf
from
main
again
firstnum
firstnum
printf
from
main
again
secnum
secnum
return
void
valfun
values
are
passed
this
function
secum
local
variable
created
the
stack
when
valfun
executes
when
valfun
exits
the
stack
deallocated
and
the
variable
longer
exists
local
and
its
scope
valfun
int
secnum
create
second
local
variable
named
secnum
secnum
this
only
affects
this
local
variable
value
printf
from
valfun
firstnum
firstnum
printf
from
valfun
secnum
secnum
firstnum
this
changes
firstnum
for
both
functions
run
the
code
the
output
follows
mygcc
scope
scope
scope
from
main
firstnum
from
main
secnum
from
valfun
firstnum
from
valfun
secnum
from
main
again
firstnum
from
main
again
secnum
study
the
output
what
you
expected
the
first
thing
note
about
the
source
code
that
defines
global
variable
firstnum
that
scope
the
complete
file
and
therefore
accessible
from
main
and
the
valfun
note
scope
has
main
and
valfun
function
the
prototype
for
valfun
declared
the
top
the
file
giving
global
scope
the
file
scope
will
discuss
prototypes
more
later
both
main
and
valfun
update
and
print
the
value
firstnum
which
represents
variable
with
memory
address
space
not
allocated
the
stack
the
case
auto
variables
such
secnum
note
that
main
and
valfun
both
have
local
variables
named
secnum
this
name
collision
not
problem
and
causes
clash
because
the
scope
these
two
different
local
variables
that
happen
have
the
same
name
only
have
local
scope
inside
the
main
and
valfun
functions
respectively
their
instances
are
private
main
and
valfun
respectively
they
have
association
other
than
having
the
same
names
they
are
auto
variables
created
the
stack
and
longer
exist
when
the
function
exits
for
example
valfun
creates
variable
for
secnum
integer
type
its
local
stack
when
executes
but
when
returns
control
main
the
stack
deallocated
and
the
variable
longer
exists
contrast
the
global
variable
firstnum
and
its
current
value
are
not
changed
when
valfun
exits
examples
auto
and
static
local
variables
consider
another
storage
modifier
that
impacted
scope
static
here
the
variable
placed
global
storage
with
limited
visibility
depending
where
defined
let
look
two
code
snippets
that
illustrate
the
use
local
auto
and
static
variables
these
represent
two
important
cases
first
let
look
the
case
auto
local
variables
example
auto
file
auto
description
illustrates
the
auto
local
variables
code
taken
from
program
bronson
first
book
ansi
include
stdio
void
testauto
function
prototype
int
main
int
count
create
the
auto
variable
count
for
count
count
count
testauto
return
void
testauto
int
num
create
the
auto
variable
num
and
initialize
zero
printf
the
value
the
automatic
variable
num
num
num
run
the
code
the
output
follows
auto
the
value
the
automatic
variable
num
the
value
the
automatic
variable
num
the
value
the
automatic
variable
num
study
the
output
what
you
expected
now
let
look
the
case
when
num
defined
static
inside
the
scope
the
function
teststat
note
that
the
value
num
now
persistent
across
multiple
invocations
the
function
this
direct
contrast
the
auto
local
varable
the
last
code
snippet
auto
essence
the
operator
static
allocates
memory
the
variable
type
int
that
outside
the
stack
just
like
global
variable
scope
firstnum
however
the
distinction
here
that
static
not
global
only
accessible
the
function
teststat
hope
that
clarifies
the
issue
scope
local
and
global
variables
and
the
issue
auto
variables
and
static
variables
first
let
look
the
case
static
local
variables
example
static
file
static
description
illustrates
the
use
auto
variables
with
static
revised
code
taken
from
program
bronson
first
book
ansi
include
stdio
void
teststat
function
prototype
int
main
int
count
count
local
auto
variable
for
count
count
count
teststat
return
note
that
the
varuable
num
teststat
only
set
zero
once
the
value
set
the
local
scope
static
variable
num
detains
its
value
when
teststat
returns
void
teststat
static
int
num
num
local
static
variable
printf
the
value
the
static
variable
num
now
num
num
run
the
code
the
output
follows
static
the
value
the
static
variable
num
now
the
value
the
static
variable
num
now
the
value
the
static
variable
num
now
this
what
you
expected
question
have
defined
static
int
num
the
top
static
how
would
that
change
the
scope
the
static
variable
different
int
num
defined
global
variable
like
firstnum
scope
flow
control
program
control
flow
within
programs
almost
identical
the
equivalent
constructs
java
however
provides
exception
mechanism
and
has
try
catch
and
finally
constructs
conditional
execution
expression
statement
expression
statement
statement
expression
statement
else
statement
significance
and
very
common
cause
errors
programs
that
before
has
boolean
datatype
instead
any
expression
that
evaluates
the
integer
value
considered
false
and
any
nonzero
value
true
the
opposite
bash
conditional
statement
controlling
expression
evaluated
and
non
zero
true
the
following
statement
executed
most
errors
are
introduced
when
programmers
accidentally
use
embedded
assignment
statements
conditional
expressions
loop
index
maxindex
statement
instead
loop
index
maxindex
statement
good
habit
get
into
place
constants
the
left
potential
assignments
value
statement
when
compiling
with
gcc
std
wall
pedantic
the
compiler
will
complain
about
the
use
assignment
operators
inside
conditions
the
only
way
shut
the
compiler
use
extra
parentheses
loop
index
maxindex
statement
other
control
flow
statements
are
very
unsurprising
while
conditional
expression
statement
statement
statement
statement
while
conditional
expression
for
initialization
conditional
expression
adjustment
statement
statement
examples
code
snippets
loops
using
the
for
statement
define
array
length
long
array
array
length
int
for
array
length
array
printf
value
any
the
components
the
for
statement
for
expressions
may
missing
the
conditional
expression
missing
always
true
infinite
loops
may
requested
with
for
with
while
the
equivalence
for
and
while
for
expression
expression
expression
statement
expression
while
expression
statement
expression
example
equivalence
using
the
while
statement
while
array
length
array
printf
value
the
switch
statement
switch
expression
case
const
statement
break
case
const
statement
break
case
const
case
const
statement
default
statementn
break
one
the
few
differences
here
between
and
java
that
permits
control
drop
down
following
case
constructs
unless
there
explicit
break
statement
example
operator
file
operator
description
implements
basic
operations
multiplication
division
addition
modulos
revised
version
code
program
bronson
first
book
ansi
include
stdio
int
main
int
opselect
float
fnum
snum
printf
please
type
two
numbers
scanf
amp
fnum
amp
snum
printf
enter
select
code
printf
for
addition
printf
for
multiplication
printf
for
division
printf
for
modulus
scanf
amp
opselect
this
line
below
intentional
bug
commented
out
causes
segmentation
fault
segfault
for
short
scanf
opselect
switch
opselect
case
printf
the
sum
the
numbers
entered
fnum
snum
break
case
printf
the
product
the
numbers
entered
fnum
snum
break
case
snum
printf
the
first
number
divided
the
second
fnum
snum
else
printf
division
zero
not
allowed
break
case
printf
the
modulus
the
numbers
entered
int
fnum
int
snum
break
default
printf
need
enter
number
between
return
the
break
statement
for
expression
expression
expression
statement
break
statementn
while
expression
statement
break
statementn
switch
expression
case
const
statement
break
case
const
statement
break
case
const
statement
break
default
statement
break
the
continue
statement
for
expression
expression
expression
statement
continue
statementn
while
expression
statement
continue
statementn
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
activity
program
engs
labs
notes
reading
resources
examples
activity
program
goals
experience
use
mygcc
compile
programs
use
editor
edit
program
and
write
some
simple
code
tasks
copy
the
guessprime
program
into
your
own
directory
and
compile
examples
guessprime
guessprime
mygcc
guessprime
guessprime
try
running
the
program
few
times
edit
guessprime
add
and
call
new
function
print
the
list
prime
numbers
from
min
max
inclusive
void
listprimes
const
int
min
const
int
max
and
arrange
call
when
the
player
gets
the
right
answer
enter
prime
between
you
win
here
list
primes
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
lecture
extra
the
standard
libraries
engs
labs
notes
reading
resources
examples
lecture
extra
the
standard
libraries
these
notes
are
meant
complement
the
lecture
warning
the
examples
cited
this
lecture
extra
may
not
follow
programming
style
the
standard
library
the
language
itself
does
not
define
any
particular
file
character
based
input
output
routines
nor
any
windowing
routines
unlike
java
instead
any
program
may
provide
its
own
clearly
this
daunting
task
and
the
standard
library
provides
collection
functions
perform
file
based
input
and
output
the
standard
library
functions
provide
efficient
buffered
and
from
both
terminals
and
files
programs
requiring
standard
should
include
the
line
include
stdio
note
the
include
preprocessor
directive
simply
instructs
the
compiler
find
the
stdio
file
the
usual
system
place
and
include
its
contents
this
point
the
source
stream
learn
more
about
the
preprocessor
later
all
transactions
through
the
standard
functions
require
file
pointer
file
fopen
file
dat
fclose
although
file
pointer
strictly
speaking
pointer
don
care
much
about
what
simply
pass
this
pointer
functions
the
standard
library
some
texts
will
refer
this
pointer
file
stream
and
confused
this
term
even
more
but
these
should
not
confused
with
nor
described
akin
java
streams
the
standard
library
aka
stdio
predefines
three
file
pointers
stdin
stdout
and
stderr
which
are
already
opened
for
you
the
shell
other
program
that
executed
your
program
and
which
you
can
read
write
manipulate
using
stdio
functions
several
functions
are
provided
check
the
status
file
operations
given
file
pointer
including
feof
checks
for
end
file
ferror
checks
for
error
file
the
standard
functions
all
return
null
appropriate
when
error
detected
for
example
include
stdio
int
main
int
argc
char
argv
file
fopen
etc
passwd
null
error
message
else
process
the
file
fclose
the
preceding
notice
how
embeds
assignment
statement
inside
the
condition
the
statement
that
because
assignment
statement
expression
that
itself
has
value
the
value
that
assigned
the
variable
the
left
hand
side
and
that
value
then
used
the
outer
expression
here
conditional
expression
testing
equality
thus
the
statement
could
have
been
written
fopen
etc
passwd
null
but
such
construct
appears
often
that
they
are
often
combined
when
the
assignment
included
the
condition
was
wrapped
parentheses
just
sure
that
treated
whole
the
left
hand
side
the
comparison
operator
the
most
frequently
used
functions
the
standard
library
perform
output
formatted
data
also
see
here
the
most
frequent
use
acceptance
functions
receiving
variable
number
arguments
fprintf
file
char
format
arg
arg
the
fprintf
function
generalization
printf
put
another
way
printf
format
arg
shorthand
for
fprintf
stdout
format
arg
int
class
char
department
computer
science
fprintf
course
department
class
many
standard
functions
accept
format
specifier
which
string
describing
how
the
following
arguments
are
interpreted
this
mechanism
contrast
java
tostring
facility
which
each
object
knows
how
output
display
itself
string
object
there
are
many
possible
format
specifiers
the
most
common
ones
being
for
character
values
for
decimal
values
for
floating
point
values
and
for
character
strings
format
specifiers
may
preceded
number
format
modifiers
which
may
further
specify
their
data
type
and
may
indicate
the
width
the
required
output
characters
the
standard
library
provides
efficient
buffering
this
means
that
although
appears
that
the
output
has
gone
the
file
pointer
may
still
held
within
internal
character
buffer
the
library
and
will
hence
not
actually
written
the
hard
disk
the
screen
until
more
output
accumulated
and
the
buffer
becomes
full
often
need
flush
our
output
allow
know
when
the
output
will
written
disk
the
screen
format
some
output
fflush
you
might
expect
file
pointers
are
automatically
flushed
when
file
closed
the
process
exits
well
outputting
file
pointers
may
also
perform
formatted
output
character
array
string
with
very
similar
series
functions
int
class
char
department
computer
science
char
buffer
bufsiz
sprintf
buffer
course
department
class
security
alert
what
the
potential
exposure
the
code
above
standard
library
may
also
used
input
values
from
file
pointers
and
character
arrays
using
fscanf
and
sscanf
because
want
the
contents
variables
modified
the
standard
functions
need
pass
them
reference
which
accomplished
passing
the
address
the
variables
using
the
amp
operator
fscanf
format
amp
arg
amp
arg
like
this
int
res
char
buffer
bufsiz
fscanf
amp
amp
res
sscanf
buffer
amp
amp
res
talk
more
about
addresses
and
pointers
couple
days
when
using
the
standard
functions
must
pay
attention
the
particular
return
values
from
those
functions
the
functions
themselves
may
return
null
file
pointers
the
number
input
items
read
the
number
characters
written
special
non
zero
values
that
indicate
the
end
file
some
other
error
condition
always
check
the
man
page
sure
some
the
special
return
values
have
constants
defined
the
system
include
files
for
convenience
improved
code
readability
and
consistency
here
are
some
sample
code
snippets
include
stdio
define
maxline
int
sum
char
line
maxline
for
fgets
line
sizeof
line
feof
break
process
the
line
just
read
fclose
for
numlines
fopen
thefile
feof
numlines
fgets
buffer
sizeof
buffer
sum
while
fscanf
amp
sum
fclose
here
code
snippet
that
uses
fopen
fgets
strlen
printf
sscanf
and
fclose
reads
frmo
the
file
into
character
array
and
then
applies
sscanf
that
array
extract
information
from
the
array
into
various
variables
example
files
see
the
full
code
files
and
sample
input
file
input
why
not
use
gets
example
dangerous
code
there
saying
you
learn
from
your
mistakes
make
lots
them
there
another
one
don
make
the
same
mistake
twice
the
use
the
stdio
function
gets
mistake
lots
programmers
have
made
this
mistake
and
caused
headaches
for
millions
computer
users
around
the
world
the
lesson
never
use
gets
let
look
the
following
buffer
overflow
which
could
have
been
named
really
bad
code
apart
the
use
gets
this
nice
little
string
manipulation
program
that
uses
number
other
library
calls
that
are
interest
example
buffer
overflow
file
buffer
overflow
description
this
bad
program
but
fun
the
basic
idea
the
program
input
and
manipulate
strings
using
arrays
chars
fun
however
there
serious
flaw
the
program
the
book
uses
the
function
gets
this
seriously
dangerous
function
call
don
use
revised
code
taken
from
program
bronson
first
book
ansi
include
stdio
include
string
required
for
the
string
function
library
define
maxels
int
main
char
string
maxels
hello
char
string
maxels
hello
there
int
strcmp
string
string
printf
less
than
string
string
else
printf
equal
string
string
else
printf
greater
than
string
string
printf
the
length
string
characters
strlen
string
printf
the
length
string
characters
strlen
string
strcat
string
there
world
printf
after
concatenation
string
contains
the
string
value
printf
string
printf
the
length
this
string
characters
strlen
string
printf
please
enter
line
text
for
string
max
characters
sizeof
string
the
code
below
comment
and
uncomment
the
gets
code
gets
string
the
code
below
comment
and
uncomment
the
fgets
code
segment
fgets
string
sizeof
string
stdin
printf
thanks
for
entering
string
strcpy
string
string
printf
after
copying
string
string
printf
the
string
value
string
printf
string
printf
the
length
string
characters
strlen
string
printf
the
starting
address
the
string
string
string
printf
the
starting
address
the
string
string
string
return
let
look
the
output
when
running
the
program
first
with
gets
and
then
with
the
safer
fgets
run
the
code
with
gets
get
segmentation
fault
when
entering
characters
buffer
overflow
hello
less
than
hello
there
the
length
string
characters
the
length
string
characters
after
concatenation
string
contains
the
string
value
hello
there
world
the
length
this
string
characters
warning
this
program
uses
gets
which
unsafe
please
enter
line
text
for
string
max
characters
thanks
for
entering
segmentation
fault
comment
out
gets
uncomment
fgets
and
recompile
are
safe
buffer
overflow
hello
less
than
hello
there
the
length
string
characters
the
length
string
characters
after
concatenation
string
contains
the
string
value
hello
there
world
the
length
this
string
characters
please
enter
line
text
for
string
max
characters
thanks
for
entering
after
copying
string
string
the
string
value
string
the
length
string
characters
the
starting
address
the
string
string
bffff
the
starting
address
the
string
string
bffff
this
bad
program
the
basic
idea
the
program
accept
and
manipulate
strings
using
arrays
chars
however
there
serious
flaw
the
program
some
older
books
use
the
function
gets
seriously
dangerous
function
call
not
use
gets
the
program
defines
buffer
chars
length
the
user
types
characters
from
the
keyboard
and
they
are
written
the
buffer
string
and
string
the
input
parameter
gets
the
name
the
array
which
pointer
more
pointers
later
the
function
does
not
know
how
long
the
array
impossible
determine
the
length
string
and
string
from
pointer
alone
run
the
program
and
type
characters
including
the
newline
all
safe
but
type
more
characters
over
run
overflow
the
buffer
end
writing
past
the
end
the
array
this
overflow
can
happen
even
without
calling
unsafe
function
such
gets
important
lesson
learn
buffer
overflows
can
have
rather
spectacular
results
bugs
often
happen
boundary
conditions
and
one
important
boundary
the
end
the
array
overwrite
string
might
write
into
string
recall
that
convention
strings
are
terminated
aka
null
this
character
overwritten
then
piece
code
operating
the
array
will
keep
scanning
until
finds
run
this
code
and
type
more
than
chars
did
above
anything
can
happen
for
example
the
code
could
work
with
visible
affect
the
bug
immediate
segfault
segfault
later
the
code
stream
mistakes
happen
unrelated
functions
strcat
our
code
some
books
use
gets
and
promote
its
use
just
say
instead
use
the
safe
fgets
buffer
safe
function
its
prototype
char
fgets
char
int
size
file
stream
requires
you
identify
which
file
yes
but
more
importantly
requires
you
identify
the
size
the
character
buffer
into
which
will
write
characters
fgets
will
not
write
more
characters
than
the
size
the
buffer
example
fgets
buf
sizeof
buf
stdin
the
fgets
function
shall
read
bytes
from
stream
into
the
array
pointed
buf
until
sizeof
buf
bytes
are
read
newline
read
and
transferred
buf
end
file
condition
encountered
the
string
then
terminated
with
null
byte
replace
gets
with
fgets
the
above
code
and
now
are
safe
you
want
read
just
characters
from
the
screen
one
time
you
can
use
getchar
but
remember
that
you
enter
character
the
keyboard
and
then
hit
return
the
newline
character
also
the
stream
take
look
this
code
and
run
example
getchar
the
operating
system
interface
operating
systems
such
unix
linux
macos
and
windows
will
always
execute
programs
calling
the
function
main
with
two
parameters
integer
argument
count
argc
array
pointers
character
strings
argv
notice
that
many
previous
examples
provided
main
without
any
parameters
all
remember
that
does
not
check
the
length
and
types
parameter
lists
functions
which
does
not
know
about
ones
that
have
not
been
prototyped
addition
the
function
main
has
special
significance
the
compiler
only
the
linker
requires
main
the
apparent
starting
point
any
program
most
programs
you
see
will
look
like
this
int
main
int
argc
char
argv
prefer
declare
them
constant
let
the
compiler
help
avoid
modifying
these
input
parameters
int
main
const
int
argc
const
char
argv
how
you
get
array
pointers
char
out
mouthful
like
char
argv
all
about
operator
precedence
the
highest
precedence
everything
variable
names
and
literals
then
the
next
highest
precedence
thing
the
subscripting
operator
about
halfway
down
the
list
operators
the
indirection
operator
its
precedence
lower
than
the
subscripting
operator
thus
the
above
declaration
read
argv
array
pointers
char
the
following
program
prints
out
its
command
line
note
that
argv
the
command
name
and
argv
argv
are
the
command
line
arguments
after
any
expansion
subsitutions
done
the
shell
example
arguments
look
the
following
snippet
include
stdio
int
main
int
argc
char
argv
int
printf
items
were
input
the
command
line
argc
for
argc
printf
argument
argv
flume
arguments
two
items
were
input
the
command
line
argument
arguments
argument
argument
two
argument
argument
argument
flume
declared
argv
array
pointers
char
for
any
given
argument
argv
one
those
pointers
that
argv
type
char
can
pass
that
pointer
functions
like
printf
wherever
expects
string
more
interesting
snippet
code
shows
that
the
command
line
stored
set
string
arguments
memory
and
that
the
address
the
location
the
first
character
for
each
string
argument
stored
the
argv
array
example
command
lets
look
the
following
snippet
include
int
main
int
argc
char
argv
int
printf
the
number
items
the
command
line
argc
for
argc
printf
argument
argv
printf
the
address
stored
argv
argv
printf
the
first
character
pointed
there
argv
return
you
run
the
program
you
will
see
the
following
output
note
that
the
hexadecimal
address
the
first
character
for
each
argument
printed
out
too
flume
command
hello
ready
skating
the
number
items
the
command
line
argument
command
the
address
stored
argv
fff
the
first
character
pointed
there
argument
hello
the
address
stored
argv
fff
the
first
character
pointed
there
argument
the
address
stored
argv
fff
the
first
character
pointed
there
argument
ready
the
address
stored
argv
fff
the
first
character
pointed
there
argument
the
address
stored
argv
fff
the
first
character
pointed
there
argument
the
address
stored
argv
fff
the
first
character
pointed
there
argument
skating
the
address
stored
argv
fff
the
first
character
pointed
there
flume
common
activity
the
start
program
search
the
argument
list
for
command
line
switches
commencing
with
dash
character
the
remaining
command
line
parameters
are
often
assumed
filenames
example
nosort
the
program
below
parses
the
command
line
sort
command
will
process
nosort
nosort
nosort
nosort
any
variation
the
above
also
supported
but
not
nosort
run
example
defensive
programming
the
user
enters
bad
option
then
the
user
informed
with
usage
message
tahoe
nosort
usage
bad
option
the
program
nosort
sort
code
included
only
the
command
line
parsing
looks
like
this
the
program
parses
the
input
switches
sort
supports
command
lines
such
sort
but
not
sort
run
which
you
will
need
for
the
lab
include
stdio
int
main
int
argc
char
argv
int
unique
reverse
numsort
char
progname
progname
argv
numsort
reverse
unique
run
through
the
input
commands
looking
for
switches
while
argc
amp
amp
argv
argv
the
actual
option
switch
argv
case
printf
switch
argv
reverse
break
case
printf
switch
argv
unique
break
case
printf
switch
argv
numsort
break
default
printf
error
bad
option
argv
printf
usage
progname
break
decrement
the
number
arguments
left
increment
the
argv
pointer
the
next
argument
argc
argv
printf
numsort
unique
reverse
numsort
unique
reverse
other
processing
return
the
above
demonstrates
several
things
about
and
idioms
the
switch
statement
and
its
component
case
and
break
statements
the
use
argc
argv
way
stepping
through
array
note
each
time
argv
incremented
changes
the
base
address
which
subscript
like
interpreted
effect
subscripting
form
pointer
arithmetic
adding
the
necessary
amount
the
base
pointer
find
the
address
the
relevant
item
the
array
more
that
when
discuss
pointers
the
syntax
for
subscripting
two
dimensional
array
like
argv
note
argv
not
strictly
speaking
two
dimensional
array
and
does
not
strictly
speaking
support
multi
dimensional
arrays
the
first
subscript
selects
one
the
char
pointers
the
array
pointers
that
argv
the
second
subscript
selects
one
the
characters
the
array
characters
which
that
pointer
refers
getopt
example
nosort
getopt
another
way
process
command
line
arguments
use
the
getopt
library
function
which
specifically
designed
help
parse
switches
the
common
and
switch
formats
see
man
getopt
the
program
parses
the
input
switches
sort
supports
command
lines
such
sort
but
not
sort
run
include
stdio
include
unistd
include
getopt
how
did
know
include
this
man
getopt
int
main
int
argc
char
argv
int
unique
reverse
numsort
char
char
progname
progname
argv
run
through
the
input
commands
looking
for
switches
using
the
handy
dandy
getopt
function
while
getopt
argc
argv
run
switch
while
argc
amp
amp
argv
case
printf
switch
reverse
break
case
printf
switch
unique
break
case
printf
switch
numsort
break
default
printf
error
bad
option
printf
usage
progname
break
printf
numsort
unique
reverse
numsort
unique
reverse
other
processing
return
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
activity
strings
are
arrays
engs
labs
notes
reading
resources
examples
activity
strings
are
arrays
string
actually
array
characters
which
convention
terminated
null
character
examine
this
program
overflow
int
main
int
buflen
char
buf
buflen
char
buf
buflen
int
example
printf
buf
buf
example
buf
buf
assign
constant
each
buffer
strcpy
buf
hello
like
buf
hello
printf
buf
buf
example
buf
buf
strcpy
buf
class
like
buf
class
printf
buf
buf
example
buf
buf
assign
longer
constant
each
buffer
strcpy
buf
hellohellohello
characters
printf
buf
buf
example
buf
buf
strcpy
buf
class
class
class
characters
printf
buf
buf
example
buf
buf
putchar
for
int
buflen
printf
buf
buf
return
explain
its
output
below
which
may
not
what
you
expected
buf
buf
buf
hello
buf
buf
hello
buf
class
buf
hellohellohello
buf
class
buf
buf
class
class
class
buf
buf
buf
buf
buf
buf
buf
buf
buf
buf
buf
buf
buf
buf
buf
buf
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
activity
pointers
engs
labs
notes
reading
resources
examples
activity
pointers
review
the
example
stringcopy
excerpted
below
buggy
and
triggers
segmentation
fault
when
run
mac
explain
the
pointer
notation
used
the
parameters
explain
the
pointer
notation
used
the
conditional
explain
what
happens
inside
the
loop
why
there
assignment
after
the
loop
where
the
bug
main
what
might
wrong
inside
stringcopy
int
main
char
src
computer
science
char
dest
abc
copy
src
dest
and
print
them
out
stringcopy
src
dest
printf
src
src
printf
dest
dest
return
stringcopy
copy
string
from
source
destination
void
stringcopy
char
char
while
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
activity
malloc
engs
labs
notes
reading
resources
examples
activity
malloc
starting
with
names
replace
the
line
the
end
main
here
are
lazy
and
not
free
the
list
with
loop
that
calls
free
every
malloc
pointer
the
list
all
malloc
memory
free
careful
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
activity
modular
data
structures
engs
labs
notes
reading
resources
examples
activity
modular
data
structures
grab
classroom
demo
code
demo
names
demo
readlinep
and
work
pairs
modify
the
bag
module
keeps
track
the
number
items
the
bag
you
need
modify
struct
bag
include
counter
bag
new
initialize
the
counter
bag
insert
increment
the
counter
bag
extract
decrement
the
counter
bag
print
you
can
print
the
counter
compiling
mygcc
names
readlinep
names
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
extra
the
make
utility
engs
labs
notes
reading
resources
examples
extra
the
make
utility
this
page
written
charles
palmer
with
examples
from
ira
jenkins
but
not
updated
for
the
make
utility
concept
recall
the
compilation
process
discussed
earlier
class
source
files
such
weather
and
mycurl
are
compiled
into
object
files
such
weather
and
mycurl
respectively
each
object
file
contains
compiled
system
dependent
representation
the
source
file
the
source
files
include
the
header
files
part
the
preprocessor
phase
the
compilation
the
linker
links
the
object
files
together
resolve
the
function
calls
and
global
variable
references
between
them
and
then
does
the
same
with
any
needed
library
functions
and
variables
and
produces
executable
when
invoked
the
loader
may
then
load
the
program
into
memory
ready
run
until
now
have
been
typing
out
the
gcc
command
lines
build
and
executable
gcc
wall
pedantic
std
weather
weather
mycurl
more
specifically
with
our
alias
mygcc
mygcc
weather
weather
mycurl
from
now
will
use
better
method
for
building
systems
will
use
the
make
software
which
automates
the
building
software
systems
the
make
utility
essentially
command
generator
you
provide
with
file
that
describes
the
interdependencies
among
the
files
that
are
used
build
particular
target
which
can
executable
other
kind
file
doesn
have
executable
make
builds
dependency
tree
all
the
files
that
the
requested
target
depends
determines
whether
any
the
files
have
changed
and
then
issues
the
commands
shown
the
makefile
that
will
bring
any
dependent
files
date
and
then
the
target
itself
you
can
view
the
gnu
documentation
for
make
the
manual
pages
for
make
steve
talbot
oldie
but
goodie
book
managing
projects
with
make
which
has
been
updated
robert
mecklenburg
for
gnu
make
any
the
variety
online
tutorials
for
make
for
more
information
note
there
are
three
popular
make
like
utilities
for
java
programs
that
you
may
encounter
ant
maven
and
gradle
they
share
many
the
same
ideas
make
but
with
decidedly
java
orientation
the
bottom
line
you
can
build
java
systems
with
make
but
these
java
specific
alternatives
are
generally
faster
and
offer
more
options
makefile
basics
makefile
which
plain
text
file
that
you
write
that
the
make
utility
interprets
describe
set
rules
that
capture
the
various
actions
that
must
performed
build
target
targets
can
specific
files
most
commonly
executable
library
documentation
etc
more
abstract
thing
such
specific
system
state
software
repository
inquiries
any
sequence
commands
these
rules
are
captured
the
makefile
that
typically
found
the
source
file
directory
before
describe
the
make
tool
and
give
some
examples
makefile
lets
talk
about
the
reasons
for
moving
more
formal
tool
for
compiling
and
linking
our
source
code
first
tedious
keep
typing
out
list
files
maybe
large
number
files
upon
which
several
programs
such
compilers
and
linkers
need
operate
the
make
utility
automates
the
compilation
and
linking
process
with
make
you
specify
all
the
files
that
make
your
project
and
how
they
fit
together
and
make
takes
care
the
rest
the
key
function
the
make
utility
that
determines
any
files
for
typically
and
files
have
changed
since
the
last
build
where
build
here
means
the
new
executable
that
would
created
make
the
target
file
you
want
make
build
depends
any
files
which
have
been
updated
make
then
ensures
those
files
are
recompiled
here
example
such
dependency
tree
where
the
top
the
tree
represents
the
target
myapp
which
depends
upon
those
files
below
and
they
turn
depend
upon
the
files
below
them
this
example
the
ovals
represent
files
that
the
programmer
created
using
editor
downloaded
from
github
received
from
another
programmer
the
rectangles
represent
files
that
are
the
result
some
processing
that
performed
upon
one
the
programmer
generated
files
files
that
have
extension
result
from
the
compiler
being
run
file
that
might
use
file
some
files
might
include
several
files
because
uses
functions
defined
other
files
addition
file
might
call
functions
that
are
kept
common
library
the
file
will
include
the
file
associated
with
that
library
when
one
the
files
changes
how
you
determine
which
ones
needs
recompiled
bring
the
target
executable
file
date
for
example
hash
changes
then
the
files
that
depend
must
rebuilt
this
case
those
would
myapp
and
hash
and
then
myapp
itself
this
both
efficient
and
can
save
significant
amount
time
the
lecturer
has
worked
many
projects
where
complete
rebuild
for
large
project
took
several
hours
you
may
find
you
are
recompiling
project
every
few
minutes
because
the
enhancements
and
fixes
you
are
making
clearly
good
goal
developers
large
project
only
recompile
the
necessary
files
and
not
waste
time
recompiling
those
files
that
have
not
changed
have
dependencies
files
that
have
changed
how
translate
this
dependency
tree
into
something
make
can
handle
the
make
utility
uses
files
called
makefiles
guide
its
work
can
describe
the
above
dependency
tree
makefile
makefile
gcc
cflags
wall
pedantic
std
utildir
util
utilflag
ltseutil
utillib
utildir
libmylib
utilc
utildir
file
utildir
file
utildir
file
utildir
file
utilh
utilc
luckily
make
has
comments
too
myapp
myapp
html
hash
utillib
cflags
myapp
myapp
html
hash
lmylib
myapp
myapp
myapp
html
hash
mylib
cflags
myapp
html
html
html
cflags
html
hash
hash
hash
mylib
cflags
hash
utillib
utilc
utilh
utildir
make
clean
myapp
utildir
make
clean
the
makefile
includes
number
variable
definitions
and
dependency
rules
variables
where
you
see
can
used
define
list
directories
search
set
files
the
compiler
and
options
use
etc
make
rules
can
very
simple
include
complicated
collections
shell
commands
the
make
utility
supports
defined
variables
conditionals
and
some
other
very
sophisticated
features
there
are
lots
things
going
here
first
you
see
some
make
macro
constant
definitions
defines
the
name
the
compiler
used
and
defaults
gcc
this
case
gcc
defined
cflags
defines
set
options
passed
the
compiler
for
all
source
file
compilation
our
case
specify
the
same
options
have
used
throughout
the
course
wall
pedantic
std
could
also
specify
other
options
like
the
include
path
include
standard
directories
debugging
ggdb
wish
utildir
defines
where
the
utility
library
maintained
utilflag
defines
the
switch
give
gcc
link
with
that
library
utilc
defines
the
list
files
that
are
compiled
into
that
library
utilh
defines
via
very
tricky
macro
expansion
the
list
files
that
are
used
the
files
that
make
the
library
similar
the
shell
these
macros
can
used
specifying
their
name
within
and
after
those
definitions
see
the
target
specifications
the
strings
before
the
are
the
targets
the
makefile
they
are
the
things
that
this
makefile
can
produce
after
the
the
list
files
other
targets
upon
which
that
target
depends
after
that
target
and
dependency
line
the
following
lines
that
begin
with
tab
character
are
executed
order
bring
that
target
date
yes
the
tab
character
little
annoying
but
that
the
way
author
expressed
well
the
entry
for
make
wikipedia
the
syntax
used
make
gives
tab
whitespace
character
different
meaning
from
the
space
character
this
problematic
since
there
usually
visual
difference
between
tab
and
number
space
characters
thus
the
syntax
make
often
subject
criticism
citation
http
wikipedia
org
you
cut
and
paste
makefile
from
these
html
lecture
notes
into
editor
you
will
likely
have
problems
with
the
tab
characters
and
make
will
not
execute
correctly
instead
you
click
the
supplied
link
and
download
the
file
will
arrive
intact
all
the
example
makefiles
presented
here
actions
start
with
tab
and
not
spaces
all
other
formatting
uses
single
spaces
you
are
the
same
directory
makefile
and
enter
make
with
parameters
the
utility
will
read
the
makefile
check
the
first
target
reads
and
out
date
try
execute
the
commands
that
are
specified
let
have
example
suppose
the
html
file
has
changed
since
the
last
time
myapp
was
built
then
myapp
out
date
the
makefile
the
current
directory
you
can
simply
run
make
and
these
commands
will
executed
gcc
wall
pedantic
std
hash
gcc
wall
pedantic
std
myapp
myapp
html
hash
lmylib
any
the
commands
make
executing
exits
with
non
zero
return
code
make
will
then
erase
the
current
target
was
working
issue
message
exit
with
non
zero
return
code
without
trying
build
anything
else
often
you
will
see
other
uses
macros
the
makefile
here
another
sample
makefile
which
variation
the
previous
example
makefile
makefile
gcc
cflags
wall
pedantic
std
utildir
util
utilflag
lmylib
utillib
utildir
libmylib
utilc
utildir
file
utildir
file
comments
utildir
file
utildir
file
utilh
utilc
project
details
exec
myapp
objs
myapp
html
hash
srcs
myapp
html
hash
myapp
html
hash
luckily
make
has
comments
too
exec
objs
utillib
cflags
exec
objs
utilflag
objs
srcs
cflags
srcs
debug
srcs
cflags
ggdb
srcs
cflags
ggdb
exec
objs
utilflag
utillib
utilc
utilh
utildir
make
clean
myapp
utildir
make
clean
here
see
some
new
macros
being
used
exec
which
defines
the
name
the
executable
file
srcs
which
defines
the
list
source
files
objs
which
defines
the
list
object
files
the
makefile
default
action
when
simply
typing
make
builds
the
first
target
finds
namely
the
myapp
executable
the
programmer
types
make
debug
then
make
will
build
the
first
target
myapp
with
the
ggdb
options
which
allows
the
gnu
debugger
gdb
run
the
executable
the
example
makefile
above
defines
the
set
rules
and
dependencies
follow
order
build
the
executable
myapp
make
the
exec
you
need
the
objs
get
the
objs
you
need
the
srcs
another
common
target
defined
makefiles
clean
example
target
that
does
not
result
new
file
being
created
updated
here
the
clean
target
has
dependencies
and
thus
can
thought
always
out
date
you
enter
make
clean
the
make
utility
will
skip
the
clean
target
and
seeing
dependencies
proceed
directly
the
associated
commands
the
idea
clean
target
good
one
but
surprisingly
hard
get
right
often
the
case
with
software
there
are
many
little
files
that
get
created
here
and
there
and
often
developer
will
update
the
real
targets
and
dependencies
part
the
makefile
without
checking
see
also
needs
update
the
clean
target
commands
this
example
usman
law
one
solution
this
challenge
described
there
because
the
pitfalls
make
clean
the
best
way
not
have
make
clean
the
most
reliable
method
follows
the
project
makefile
must
write
its
output
sub
directory
the
directory
make
clean
you
one
directory
and
delete
the
entire
hierarchy
then
make
again
you
create
new
directory
check
out
the
sources
enter
the
directory
and
run
make
make
command
usage
here
are
some
the
command
line
arguments
you
can
use
with
make
see
all
them
use
man
make
file
use
file
the
makefile
produce
debugging
information
while
running
while
particular
target
and
the
things
that
depend
might
have
failed
continue
trying
make
the
other
dependencies
these
targets
anyway
determine
which
commands
need
run
but
don
actually
execute
any
them
just
print
them
unconditionally
make
all
targets
how
does
make
respond
assuming
you
have
errors
your
makefile
when
you
invoke
the
make
utility
one
four
things
will
happen
when
has
nothing
make
responds
with
the
following
and
halts
target
date
bunch
commands
are
executed
try
what
you
asked
continuing
until
either
error
occurs
compile
error
all
the
commands
are
executed
when
doesn
know
what
make
responds
with
the
following
and
halts
don
know
how
make
some
target
sometimes
make
can
decide
what
responds
with
nothing
this
usually
due
missing
component
file
for
example
you
have
target
main
and
then
enter
make
target
make
will
try
find
some
way
check
main
date
guess
how
make
main
depends
upon
file
that
doesn
exist
the
file
main
does
exist
target
either
doesn
exist
out
date
with
respect
main
then
the
make
command
will
either
remain
totally
silent
old
systems
respond
with
something
like
make
rule
make
target
mainline
needed
target
stop
more
macros
any
symbol
that
defined
makefile
like
this
name
value
called
macro
once
defined
you
can
expand
them
using
name
any
environment
variables
that
were
set
prior
your
running
make
are
automatically
made
available
during
the
execution
make
makefile
makefile
top
middle
echo
building
the
top
middle
whoami
echo
building
the
middle
whoami
echo
make
invoked
user
user
running
shell
shell
ccpalmer
swamp
make
makefile
make
invoked
user
ccpalmer
running
shell
bin
building
the
middle
building
the
top
ccpalmer
swamp
the
make
utility
also
provides
some
useful
builtin
macros
name
the
current
target
the
list
dependencies
that
are
newer
than
the
target
target
echo
working
due
updates
ccpalmer
swamp
touch
target
ccpalmer
swamp
touch
ccpalmer
swamp
make
makefile
working
target
due
updates
ccpalmer
swamp
note
course
that
the
target
doesn
necessarily
represent
file
but
using
touch
target
force
creation
empty
file
with
the
current
timestamp
directory
path
file
name
target
echo
working
due
updates
echo
dollar
with
echo
dollar
with
ccpalmer
swamp
touch
target
ccpalmer
swamp
touch
ccpalmer
swamp
make
makefile
working
target
due
updates
dollar
with
dollar
with
target
ccpalmer
swamp
suffix
rules
further
reduce
the
complexity
your
makefiles
you
can
use
make
suffix
rules
suffix
this
context
talking
about
filetypes
extensions
etc
these
rules
are
defined
the
makefile
and
show
default
way
making
file
with
one
suffix
into
file
with
another
suffix
for
example
you
might
have
all
your
makefiles
some
suffix
rules
like
these
suffixes
cflags
asflags
the
suffixes
line
identifies
which
suffixes
make
should
consider
special
after
that
you
see
lines
with
two
suffixes
target
followed
statements
how
turn
files
with
the
first
suffix
into
files
with
the
second
essence
these
suffix
rules
provide
default
means
producing
one
kind
file
from
another
these
defaults
are
sufficient
you
won
need
define
specific
targets
for
these
targets
there
are
also
some
more
builtin
macros
that
are
only
available
suffix
rules
the
name
dependency
file
derived
selected
for
use
with
implicit
rule
the
basename
the
current
target
that
the
name
the
current
target
without
its
suffix
more
cool
make
ideas
from
ask
make
ccp
amp
others
printing
out
make
variables
sometimes
you
need
know
what
while
the
makefile
being
run
easy
way
print
out
its
value
add
the
rule
myvar
target
echo
the
top
echo
myvar
print
echo
tahoe
make
mak
the
top
tahoe
make
mak
print
myvar
myvar
tahoe
special
capabilities
dont
forget
you
can
include
shell
commands
the
makefile
makefiles
can
invoke
other
makefiles
makefiles
can
create
all
the
other
makefiles
for
system
see
the
postfix
project
for
excellent
example
non
compilation
makefiles
you
can
use
makefiles
solve
many
your
daily
challenges
involving
sequences
dependent
actions
running
test
shell
scripts
during
development
and
regression
testing
will
this
creating
documents
with
latex
see
the
following
example
maintaining
webpages
staging
and
live
directories
including
verifying
accessibility
compliance
style
rules
etc
automated
documentation
generation
including
literate
programming
sourcecode
management
large
example
makefile
here
are
some
excerpts
the
makefile
use
build
test
and
run
our
server
for
the
project
makefile
for
app
server
author
ira
ray
jenkins
date
sun
may
note
gnumake
assumed
directories
inc
dir
src
dir
src
bld
dir
build
bin
dir
bin
tst
dir
test
compiler
and
flags
gcc
cflags
std
wall
pedantic
libs
lcrypto
lgd
incs
inc
dir
src
dir
what
doing
hdr
inc
dir
app
src
app
file
hash
genstack
obj
patsubst
src
dir
bld
dir
src
bin
bin
dir
appd
tst
bins
bin
dir
app
test
bin
dir
genstack
test
these
targets
not
produce
real
targets
phony
clean
setup
test
server
start
server
stop
server
client
start
client
stop
client
ignore
errors
from
these
targets
ignore
stop
server
default
target
the
server
bin
setup
obj
hdr
echo
building
cflags
incs
obj
libs
app
test
bin
dir
app
test
setup
bld
dir
app
test
bld
dir
file
bld
dir
genstack
hdr
echo
building
cflags
incs
bld
dir
app
test
bld
dir
file
bld
dir
genstack
libs
bin
dir
app
test
genstack
test
bin
dir
genstack
test
setup
bld
dir
genstack
test
bld
dir
genstack
hdr
echo
building
cflags
incs
bld
dir
genstack
test
bld
dir
genstack
libs
bin
dir
genstack
test
appc
bin
dir
appc
setup
bld
dir
appc
hdr
echo
building
cflags
incs
bld
dir
appc
libs
general
rule
for
files
with
bld
dir
src
dir
src
dir
hdr
echo
building
cflags
incs
libs
echo
general
rule
for
files
with
bld
dir
src
dir
hdr
echo
building
cflags
incs
libs
echo
bld
dir
tst
dir
hdr
echo
building
cflags
incs
libs
echo
test
tst
bins
client
bin
dir
appc
start
client
client
bin
dir
appc
pierce
dartmouth
edu
stop
client
killall
appc
server
bin
start
server
bin
bin
amp
stop
server
killall
appd
setup
mkdir
bin
dir
mkdir
bld
dir
clean
the
directories
clean
stop
server
core
png
bld
dir
bin
dir
test
log
log
notes
the
above
normally
make
will
echo
each
command
running
the
screen
preceding
command
with
you
can
prevent
this
echoing
but
the
command
will
run
normally
patsubst
changes
strings
that
match
the
first
arg
into
strings
that
look
like
the
second
arg
with
the
third
arg
providing
the
list
strings
gnumake
phony
provides
list
targets
that
don
correspond
actual
files
for
example
using
this
directive
makefile
with
target
clean
then
even
there
file
named
clean
the
system
will
not
considered
and
the
clean
target
will
made
when
needed
requested
ignore
provides
list
targets
for
which
errors
should
ignored
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
extra
the
preprocessor
engs
labs
notes
reading
resources
examples
extra
the
preprocessor
you
will
notice
that
few
lines
typically
near
the
beginning
program
begin
with
the
character
aka
hash
pound
sharp
these
lines
are
preprocessor
directives
and
are
actually
instructions
directives
special
program
called
the
preprocessor
its
name
suggests
the
preprocessor
processes
the
text
program
before
the
compiler
sees
the
preprocessor
directives
all
beginning
with
should
begin
column
the
column
any
source
line
which
they
appear
the
preprocessor
very
powerful
but
will
use
only
for
very
specific
purposes
most
the
other
common
uses
for
preprocessor
directives
are
either
beyond
the
scope
this
course
unnecessary
and
bad
style
modern
header
file
inclusion
the
include
directive
often
pronounced
pound
include
should
appear
the
beginning
program
used
literally
copy
the
entire
contents
another
file
the
point
the
include
directive
common
include
directive
seen
the
beginning
most
files
include
stdio
this
directive
indicates
that
the
contents
the
file
named
stdio
should
included
this
point
the
directive
replaced
with
the
contents
there
limit
the
number
lines
that
may
included
with
this
directive
and
fact
the
contents
the
included
file
may
contain
other
include
directives
which
are
handled
the
same
way
say
that
the
inclusions
are
nested
and
course
care
should
taken
avoid
duplicate
even
worse
recursive
nestings
the
example
using
stdio
above
demonstrates
two
important
points
the
filename
itself
appears
between
the
characters
the
use
these
characters
indicates
that
the
enclosed
filename
should
found
the
standard
include
directory
usr
include
the
required
file
then
usr
include
stdio
the
standard
include
files
are
used
consistently
provide
system
wide
data
structures
declarations
that
are
required
many
different
files
having
the
standard
include
files
centrally
located
and
globally
available
all
programmers
are
guaranteed
using
the
same
data
structures
and
declarations
that
they
all
require
alternatively
the
characters
may
also
used
the
following
example
include
readline
include
the
contents
the
file
readline
the
correct
point
the
program
because
double
quotes
are
used
the
file
sought
the
present
working
directory
that
readline
the
filename
double
quotes
can
actually
pathname
your
source
code
spread
over
several
directories
for
example
include
includes
readline
both
the
above
examples
the
indicated
filename
had
the
extension
whereas
have
previously
said
that
the
extension
expected
the
compiler
the
use
only
convention
within
unix
the
indicates
that
the
file
header
file
because
they
generally
contain
information
required
the
head
beginning
program
header
files
typically
and
should
contain
only
declarations
constructs
like
data
types
data
structures
and
constants
used
throughout
the
program
particular
include
files
should
contain
only
declarations
and
definitions
variables
functions
you
can
also
give
the
compiler
command
line
flag
identify
directory
where
can
search
for
non
standard
include
files
for
example
you
moved
your
includes
directory
level
you
might
write
include
readline
but
then
tell
the
compiler
where
look
for
such
files
mygcc
includes
readline
conditional
compilation
another
often
used
feature
the
preprocessor
the
use
conditional
compilation
directives
define
debug
ifdef
debug
code
for
use
when
debug
defined
else
debug
code
for
use
when
debug
not
defined
endif
debug
the
preprocessor
actually
includes
some
code
and
strips
out
other
code
before
passing
the
compiler
the
above
example
define
the
preprocessor
constant
called
debug
and
later
test
its
value
with
ifdef
notice
the
use
comments
the
else
and
endif
lines
help
readability
the
above
example
common
approach
for
debugging
even
better
remove
the
debug
line
and
let
that
determined
the
programmer
compile
time
ifdef
debug
code
for
use
when
debug
defined
else
debug
code
for
use
when
debug
not
defined
endif
debug
mygcc
ddebug
program
program
the
program
compiles
and
behaves
differently
with
and
without
the
compile
time
switch
ddebug
header
file
protection
the
one
place
really
must
use
conditional
compilation
header
files
look
our
example
readline
readline
utility
function
safely
read
one
line
input
see
readline
for
documentation
david
kotz
april
ifndef
readline
define
readline
include
stdbool
extern
bool
readline
char
buf
const
int
len
endif
readline
the
constant
readline
not
yet
defined
ifndef
then
incude
the
remainder
the
file
endif
the
first
thing
does
define
that
readline
thus
file
happens
include
readline
twice
which
can
happen
complex
programs
when
header
files
include
other
include
files
the
compiler
won
see
multiple
copies
the
included
code
that
include
readline
include
readline
does
not
translate
extern
bool
readline
char
buf
const
int
len
extern
bool
readline
char
buf
const
int
len
but
just
extern
bool
readline
char
buf
const
int
len
the
standard
file
stdbool
protects
itself
this
way
which
good
because
programmer
may
well
write
into
her
file
something
like
include
stdio
include
stdbool
include
readline
and
because
readline
also
includes
stdbool
the
latter
might
get
imported
several
times
without
that
protection
why
care
some
include
files
can
safely
repeated
and
the
compiler
won
care
actually
readline
one
like
that
but
others
they
declare
global
constants
will
cause
the
compiler
complain
about
multiply
defined
variables
testing
header
files
how
can
you
sure
your
header
file
has
included
all
the
relevant
header
files
compile
compile
the
header
file
foo
itself
mygcc
foo
there
are
any
errors
probaby
because
you
forgot
one
the
include
files
when
done
foo
gch
clean
the
compiler
output
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
extra
header
files
engs
labs
notes
reading
resources
examples
extra
header
files
examples
are
not
yet
updated
for
but
the
concepts
are
still
correct
let
look
the
contents
and
purpose
readline
that
file
was
used
the
recent
examples
names
arrays
strings
reading
and
copying
lines
into
array
names
scanning
string
and
truncating
overwriting
character
with
the
null
character
these
use
readline
file
defining
the
function
readline
used
names
readline
header
file
that
provides
prototypes
needed
any
program
wanting
use
readline
why
did
need
this
include
file
readline
because
compiled
names
and
readline
separately
when
compiled
names
needed
declare
the
prototype
for
the
function
readline
just
would
have
readline
had
been
defined
within
names
because
the
function
was
not
defined
within
names
though
the
prototype
needs
prefixed
with
extern
indicating
that
the
function
external
the
current
file
the
compiler
leaves
that
symbol
readline
unresolved
and
hopes
the
linker
will
later
able
connect
the
actual
function
definition
when
names
linked
with
other
object
files
could
have
simply
typed
the
prototype
into
names
but
put
separate
file
header
and
then
used
the
special
compiler
directive
include
literally
copy
the
contents
header
into
the
file
that
point
see
the
lecture
extra
about
the
preprocessor
just
case
the
header
file
gets
included
multiple
times
the
pair
directives
ifndef
not
defined
and
define
define
ensure
the
body
this
file
only
processed
once
per
file
readline
utility
function
safely
read
one
line
input
see
readline
for
documentation
david
kotz
april
ifndef
readline
define
readline
include
stdbool
extern
bool
readline
char
buf
const
int
len
endif
readline
also
include
header
readline
this
way
write
the
prototype
only
one
place
and
yet
give
the
compiler
information
both
places
where
needed
and
give
the
compiler
chance
help
catch
any
inconsistencies
between
the
prototype
and
the
function
call
names
between
the
prototype
and
the
function
definition
readline
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
activity
makefiles
engs
labs
notes
reading
resources
examples
activity
makefiles
grab
classroom
demo
code
demo
demo
and
work
pairs
modify
the
makefile
adds
phony
test
target
enabling
you
later
type
make
test
and
see
build
names
necessary
and
run
test
the
names
program
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
extra
more
gdb
and
profiling
performance
with
gprof
engs
labs
notes
reading
resources
examples
extra
more
gdb
and
profiling
performance
with
gprof
using
gdb
debug
core
files
something
you
will
likely
encounter
your
programming
endevors
the
notorious
core
dump
core
dump
really
nothing
more
than
record
the
working
memory
program
specific
point
time
usually
this
point
time
when
program
does
something
bad
and
the
computer
doesn
know
how
handle
the
issue
the
computer
simply
raises
its
hands
and
says
done
killed
the
program
and
dumped
bunch
information
file
for
you
review
you
want
common
notice
the
segfault
segmentation
fault
which
refers
accessing
invalid
memory
just
happens
that
gdb
can
take
core
dump
files
input
generally
speaking
you
can
start
gdb
with
arguments
with
the
name
exectuable
argument
you
can
also
start
gdb
with
both
executable
program
and
core
file
specified
gdb
program
core
important
linux
has
recently
changed
the
way
core
dumps
are
produced
traditionally
when
your
program
crashed
with
segmentation
fault
certain
other
errors
unix
would
dump
core
that
wrote
snapshot
copy
the
process
memory
into
file
called
core
the
current
working
directory
these
files
are
huge
programmers
users
often
don
notice
them
and
the
file
system
becomes
littered
with
droppings
huge
droppings
linux
now
dumps
core
files
central
location
where
they
can
managed
and
cleaned
find
your
core
files
type
coredumpctl
list
and
use
one
those
core
files
with
gdb
say
the
one
associated
with
dead
process
coredumpctl
gdb
for
more
information
read
the
department
wiki
page
about
core
dumps
this
class
usually
sufficient
debug
the
program
directly
and
you
really
shouldn
need
concern
yourself
with
debugging
core
files
directly
there
are
advantages
debugging
core
file
however
since
generally
captures
state
such
the
values
the
processor
registers
the
time
the
core
dump
information
about
the
processor
flags
that
are
set
your
configurations
and
forth
the
gprof
tool
note
these
notes
there
are
many
references
the
crawler
this
program
will
coded
you
future
assignment
the
gprof
tool
used
profile
the
runtime
performance
code
many
times
you
might
confident
that
the
code
bug
free
because
there
are
functional
problems
however
the
code
could
worthless
does
not
meet
its
performance
requirements
the
gprof
tool
execution
profiling
tool
that
useful
when
tracking
down
performance
problems
warning
gprof
doesn
always
work
well
macos
log
machine
the
lab
try
out
anecdotal
evidence
many
time
programmers
focus
getting
the
code
work
functionally
and
then
think
about
speed
this
not
always
the
most
productive
approach
design
systems
development
best
design
for
speed
needed
use
hash
table
instead
searching
long
double
linked
list
anecdote
from
andrew
campbell
recall
once
working
consultant
improving
the
performance
radio
router
the
performance
the
system
coded
ada
was
appalling
and
someone
head
was
about
roll
spend
probably
two
weeks
just
studying
the
code
very
large
system
difficult
keep
that
all
your
head
profiling
the
code
highlighted
the
cost
system
that
had
been
desiged
and
coded
with
excessive
number
tasks
and
rendezvous
the
cost
interprocess
communications
was
high
what
did
was
not
nice
turned
the
system
into
one
large
task
and
replaced
all
interprocess
communications
ipc
which
represented
system
calls
with
library
that
implemented
the
ipc
api
changed
couple
lines
code
system
lines
code
the
improvement
was
massive
packets
could
forwarded
from
one
radio
input
the
output
radio
under
msec
which
was
down
from
second
was
king
for
the
day
week
made
changes
tested
them
locally
desk
checked
the
code
closely
and
ran
first
time
the
guy
who
designed
the
system
wanted
fail
could
feel
but
when
that
router
ran
first
time
well
that
moment
will
always
remember
reward
got
design
the
next
system
the
problem
was
essentially
performance
bug
the
changes
were
simple
once
the
problem
was
identified
took
very
radical
approach
that
ran
against
design
but
that
what
was
needed
router
that
forwarded
packets
second
intervals
was
not
going
fly
with
the
customer
run
the
gprof
tool
first
use
the
switch
the
compiler
flags
filename
makefile
description
the
make
file
build
the
crawler
gcc
cflags
wall
pedantic
std
sources
list
list
crawler
util
hash
util
html
once
you
have
done
build
with
then
run
the
application
pwd
net
nusers
campbell
lab
src
crawler
crawler
www
dartmouth
edu
data
now
you
are
ready
run
the
gprof
tool
gprof
crawler
gmon
out
profile
excerpt
from
the
output
the
profile
below
you
can
learn
lot
about
where
your
program
spending
time
studying
this
output
there
reasonable
amount
documentation
included
the
report
which
will
help
the
interested
person
navigate
the
report
output
and
there
also
lots
more
the
man
pages
flat
profile
each
sample
counts
seconds
cumulative
self
self
total
time
seconds
seconds
calls
call
call
name
removewhitespace
hash
getnexturl
normalizeurl
dadd
getaddressfromthelinkstobevisited
extracturls
updatelistlinktobevisited
make
hash
getdatawithkey
addelement
seturlasvisited
getpage
readfiletomemoryordie
file
length
cleandictionary
initdictionary
isdirectory
cleanup
initlist
the
percentage
the
total
running
time
the
time
program
used
this
function
cumulative
running
sum
the
number
seconds
accounted
seconds
for
this
function
and
those
listed
above
self
the
number
seconds
accounted
for
this
seconds
function
alone
this
the
major
sort
for
this
listing
calls
the
number
times
this
function
was
invoked
this
function
profiled
else
blank
self
the
average
number
milliseconds
spent
this
call
function
per
call
this
function
profiled
else
blank
total
the
average
number
milliseconds
spent
this
call
function
and
its
descendents
per
call
this
function
profiled
else
blank
name
the
name
the
function
this
the
minor
sort
for
this
listing
the
index
shows
the
location
the
function
the
gprof
listing
the
index
parenthesis
shows
where
would
appear
the
gprof
listing
were
printed
call
graph
explanation
follows
granularity
each
sample
hit
covers
byte
for
seconds
index
time
self
children
called
name
main
extracturls
updatelistlinktobevisited
getaddressfromthelinkstobevisited
seturlasvisited
getpage
isdirectory
initlist
cleanup
main
extracturls
getnexturl
getnexturl
extracturls
getnexturl
removewhitespace
getnexturl
getnexturl
removewhitespace
main
updatelistlinktobevisited
addelement
normalizeurl
seturlasvisited
updatelistlinktobevisited
addelement
getdatawithkey
dadd
make
hash
hash
lines
omitted
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
activity
debugging
engs
labs
notes
reading
resources
examples
activity
debugging
grab
classroom
demo
code
password
mygcc
password
password
and
work
pairs
using
gdb
track
down
the
bug
that
allows
successful
authentication
when
certain
passwords
are
entered
you
should
able
use
gdb
show
where
the
bug
located
hint
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
extra
using
git
tags
engs
labs
notes
reading
resources
examples
extra
using
git
tags
students
member
some
project
you
can
add
tags
your
repository
tags
are
nice
for
adding
annotations
your
history
tags
don
change
your
commit
history
but
they
can
used
sort
bookmark
often
use
tags
for
highlighting
new
versions
milestones
projects
when
you
submit
lab
the
crawler
that
sort
milestone
that
says
finished
the
crawler
ready
move
the
indexer
couple
weeks
months
years
from
now
you
might
interested
revisiting
the
state
your
code
when
you
had
finished
the
crawler
for
example
rather
than
trying
remember
some
long
git
hash
for
your
last
commit
lab
and
help
and
your
future
selves
want
you
add
tag
the
project
indicate
when
the
work
complete
for
lab
default
git
tag
tagname
will
add
tag
the
current
head
your
working
tree
git
tag
lab
submit
you
can
also
add
tag
previous
commit
this
might
useful
you
charged
ahead
and
made
few
commits
but
want
back
and
mark
some
commit
the
past
with
tag
git
tag
oops
you
accidentally
add
tag
add
tag
the
wrong
commit
you
can
always
delete
tag
using
the
flag
and
identifying
the
tag
the
name
you
gave
git
tag
oops
this
method
only
affects
the
local
repository
you
have
already
pushed
tag
the
remote
you
need
run
specific
command
remove
that
tag
from
the
remote
remove
tag
oops
git
push
delete
origin
oops
once
you
pushed
your
tags
the
remote
you
should
gitlab
and
verify
that
you
can
see
any
tags
that
you
created
and
pushed
the
main
page
your
project
gitlab
you
should
see
buttons
for
commits
branches
and
tags
click
tags
alternatively
you
can
click
the
commits
icon
the
left
navbar
and
will
take
you
screen
where
you
can
browse
things
like
commits
branches
and
tags
alternative
way
delete
already
pushed
tag
visit
the
tags
page
gitlab
and
click
the
trash
can
icon
delete
that
tag
that
change
affects
the
remote
repo
but
not
your
local
repo
you
need
git
pull
your
terminal
update
your
local
repo
from
the
remote
learn
more
about
git
tag
run
git
help
tag
actually
has
nice
section
about
how
delete
already
pushed
tags
move
tag
newer
commit
graders
for
the
sake
transparency
let
take
quick
look
how
graders
will
use
the
tags
you
create
checkout
appropriate
versions
your
code
for
example
will
something
akin
the
following
when
grade
your
lab
submission
the
crawler
clone
the
student
repo
git
clone
url
list
any
all
existing
tags
should
hopefully
see
the
appropriate
submission
tag
lab
submit
git
tag
now
can
checkout
the
code
that
was
the
repo
the
time
that
tag
the
state
the
code
the
time
submitting
lab
git
checkout
tags
lab
submit
can
create
new
branch
from
the
code
base
the
point
the
specified
tag
the
grader
can
now
freely
edit
the
code
and
there
are
concerns
about
messing
anything
the
master
branch
git
checkout
tags
lab
submit
lab
testing
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
activity
git
and
gitlab
engs
labs
notes
reading
resources
examples
activity
git
and
gitlab
goals
gain
experience
with
git
and
gitlab
create
and
share
repo
within
your
team
activity
the
lecture
notes
has
section
about
the
gitlab
server
that
shows
similar
though
not
identical
activity
use
browser
https
gitlab
dartmouth
edu
each
member
your
group
that
doesn
already
have
one
should
create
gitlab
userid
that
identical
your
login
name
when
the
gitlab
userid
created
back
and
login
one
member
your
group
should
follow
steps
through
the
gitlab
server
section
today
lecture
notes
after
the
project
has
been
created
the
same
person
should
click
settings
and
then
members
this
page
allows
you
share
the
repo
with
other
gitlab
users
type
the
usernames
each
your
group
members
and
pick
master
from
the
role
menu
then
click
add
project
below
adding
travis
master
binary
tree
repo
other
members
your
group
should
then
receive
email
message
confirming
their
addition
this
repo
they
should
click
the
link
that
message
visit
the
repo
the
browser
all
members
your
group
should
then
click
the
repo
name
right
near
the
top
the
page
example
binary
tree
pop
back
the
home
page
for
this
repo
important
click
the
ssh
pop
change
https
scroll
down
see
the
command
line
instructions
for
using
this
project
before
you
proceed
copy
the
two
git
global
setup
commands
and
paste
them
into
terminal
window
while
you
run
two
more
commands
git
config
global
push
default
simple
git
config
global
core
editor
emacs
vim
you
prefer
emacs
back
the
new
project
since
this
brand
new
project
you
have
repository
your
local
computer
whether
that
your
laptop
flume
look
the
instructions
under
create
new
git
repository
copy
the
git
clone
command
you
see
there
your
terminal
window
and
your
usual
workspace
for
this
class
paste
the
git
clone
command
this
command
clones
the
remote
repository
the
one
gitlab
into
new
subdirectory
enter
your
gitlab
username
and
password
should
proceed
create
the
local
repository
one
member
your
group
should
create
and
push
readme
file
you
prefer
plaintext
just
call
readme
the
gitlab
page
lists
the
commands
add
empty
readme
file
but
you
might
want
write
something
that
readme
meanwhile
other
members
the
group
should
each
create
file
about
where
they
replace
with
their
name
for
example
would
create
about
david
the
file
they
should
write
sentence
describing
themself
then
git
add
about
with
the
appropriate
filename
git
commit
about
editor
will
open
you
can
type
commit
message
git
push
you
may
need
enter
your
gitlab
password
back
the
browser
refresh
the
repo
home
page
you
should
all
see
the
new
readme
you
click
files
you
should
see
all
the
other
files
people
added
the
repo
all
members
the
group
should
git
pull
their
terminal
window
which
should
download
all
the
files
created
others
their
local
copy
the
repo
you
now
have
shared
repo
for
use
your
group
tips
after
class
you
may
want
run
those
four
global
configuration
commands
both
your
laptop
and
flume
and
install
the
gitignore
file
both
your
laptop
and
flume
described
above
check
out
markdown
easy
learn
why
git
always
asking
for
password
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
activity
crawler
engs
labs
notes
reading
resources
examples
activity
crawler
goals
start
thinking
about
design
for
the
crawler
activity
your
group
consider
the
following
informal
description
the
crawler
takes
three
parameters
the
url
for
web
page
use
starting
point
seed
for
the
crawl
the
maximum
depth
should
crawl
from
that
seed
and
the
name
directory
where
can
cache
copies
the
web
pages
crawls
should
start
from
given
url
called
the
seed
the
web
page
that
url
said
depth
should
explore
that
url
that
should
download
the
web
page
that
url
and
scan
that
page
html
for
embedded
links
urls
assume
you
are
given
function
that
can
pick
urls
out
html
when
exploring
page
depth
its
embedded
urls
refer
pages
that
are
said
depth
ignore
urls
that
don
point
html
ignore
urls
depth
greater
than
maxdepth
explore
each
non
ignored
url
downloading
its
html
and
scanning
that
html
for
urls
above
for
each
page
explores
should
create
one
file
that
contains
the
url
that
page
its
depth
the
crawl
and
the
html
for
that
page
discuss
how
you
could
structure
crawler
accomplish
the
above
goals
probably
two
nested
loops
and
leverage
your
lab
data
structures
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
moved
permanently
moved
permanently
nginx
activity
tse
crawler
engs
labs
notes
reading
resources
examples
activity
tse
crawler
goals
run
the
crawler
over
small
website
understand
how
explores
from
page
page
activity
one
person
your
group
should
run
crawler
over
little
website
various
depths
and
try
understand
what
doing
long
command
broke
over
several
lines
demo
crawler
http
old
www
dartmouth
edu
data
tse
letters
index
html
data
another
person
your
group
should
examine
the
source
files
for
that
website
data
tse
letters
less
html
another
person
your
group
can
visit
the
page
your
browser
here
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
software
design
methodology
engs
labs
notes
reading
resources
examples
software
design
methodology
goals
this
lecture
introduce
simple
software
design
methodology
means
the
only
methodology
but
straightforward
and
useful
for
all
programmers
are
optimists
frederick
brooks
here
cool
source
thoughtful
maxims
for
software
development
the
pragmatic
programmer
andrew
hunt
and
david
thomas
addison
wesley
their
book
super
and
their
tip
list
available
the
web
sprinkle
some
their
tips
throughout
the
lectures
software
system
design
methodology
there
are
many
techniques
for
the
design
and
development
good
code
including
top
down
bottom
design
divide
and
conquer
breaking
the
system
down
into
smaller
more
understandable
components
structured
design
data
flow
oriented
design
approach
and
object
oriented
design
modularity
abstraction
and
information
hiding
for
quick
survey
these
and
other
techniques
see
survey
major
software
design
methodologies
author
unknown
many
these
techniques
use
similar
approaches
and
embrace
fundamental
concepts
like
abstraction
data
representation
data
flow
data
structures
and
top
down
decomposition
from
requirements
structure
seems
unlikely
that
someone
could
give
you
steps
follow
and
assured
great
system
software
every
non
trivial
project
has
its
special
cases
unique
environments
unexpected
uses
often
best
begin
development
module
system
with
small
experiments
building
prototype
and
throwing
away
because
you
can
learn
and
make
mistakes
building
small
prototype
systems
pragmatic
programmer
tip
prototype
learn
prototyping
learning
experience
its
value
lies
not
the
code
you
produce
but
the
lessons
you
learn
clarity
comes
from
the
experience
working
from
requirements
through
system
design
implementation
and
testing
integration
and
customer
feedback
the
requirements
the
following
figure
shows
the
software
design
methodology
that
use
the
design
the
tinysearchengine
and
the
project
let
step
through
the
phases
software
design
shown
the
figure
above
procurement
phase
the
procurement
phase
project
represents
its
early
stages
represents
deep
discussion
between
customer
and
provider
software
systems
software
developer
you
have
clearly
understand
and
capture
the
customers
needs
our
case
you
are
the
provider
and
staff
are
your
customer
requirements
spec
pragmatic
programmer
tip
don
gather
requirements
dig
for
them
requirements
rarely
lie
the
surface
they
buried
deep
beneath
layers
assumptions
misconceptions
and
politics
the
system
requirements
spec
captures
all
the
requirements
the
system
that
the
customer
wants
built
typically
the
provider
and
customer
get
into
deep
discussion
requirements
and
their
cost
the
requirements
must
written
down
and
reviewed
both
customer
and
provider
sure
all
are
agreement
sometimes
these
documents
are
written
contractual
legal
language
the
customer
gets
system
that
does
not
meet
the
spec
the
two
parties
disagree
about
whether
the
finished
product
meets
the
spec
lawyers
may
get
involved
system
late
financial
penalties
may
arise
the
hardest
part
design
keeping
features
out
anonymous
the
system
requirement
spec
may
have
variety
requirements
typically
considered
the
shalls
such
the
crawler
shall
crawl
sites
minutes
these
requirements
include
functional
requirements
performance
requirements
security
requirements
and
cost
requirements
common
challenge
during
this
phase
that
the
customer
either
doesn
know
what
she
really
wants
expresses
poorly
some
extreme
cases
the
customer
may
not
able
provide
you
with
the
ultimate
intended
use
your
system
due
proprietary
security
concerns
you
must
realize
that
the
customer
may
have
these
difficulties
and
iterate
with
the
customer
until
you
both
are
full
agreement
one
useful
technique
provide
the
customer
with
the
system
requirements
specification
and
sometimes
later
specs
too
and
then
have
the
customer
explain
the
spec
amazing
how
many
misunderstandings
and
false
assumptions
come
light
when
the
customer
doing
the
explaining
the
requirements
spec
may
address
many
all
the
following
issues
functionality
what
should
the
system
performance
goals
for
speed
size
energy
efficiency
etc
cost
goals
for
cost
system
operation
incurs
costs
compliance
with
federal
state
law
institutional
policy
compatibility
with
standards
with
existing
systems
security
against
specific
threat
model
under
certain
trust
assumptions
new
concern
system
development
the
issue
the
services
oriented
model
referred
the
cloud
software
service
infrastructure
service
etc
the
decision
whether
develop
specific
system
running
traditional
manner
build
cloud
based
solution
should
made
early
will
affect
many
the
later
stages
the
development
process
some
would
argue
about
where
needs
fit
the
methodology
but
feel
that
the
sooner
you
and
the
customer
know
where
this
system
headed
the
better
pragmatic
programmer
tip
make
quality
requirements
issue
involve
your
users
determining
the
project
real
quality
requirements
although
the
customer
may
make
some
assumptions
this
point
your
best
interests
make
priority
remember
the
broken
window
theory
pragmatic
programmer
tip
don
live
with
broken
windows
fix
bad
designs
wrong
decisions
and
poor
code
when
you
see
them
design
spec
the
design
spec
the
result
studying
the
system
requirements
and
applying
the
art
design
the
magic
with
design
team
this
phase
you
translate
the
requirements
into
full
system
design
specification
this
design
specification
shows
how
the
complete
system
broken
into
specific
subsystems
and
all
the
requirements
are
mapped
those
subsystems
the
design
spec
for
system
subsystem
module
includes
user
interface
inputs
and
outputs
functional
decomposition
into
modules
dataflow
through
modules
pseudo
code
plain
english
like
language
for
logic
algorithmic
flow
major
data
structures
testing
plan
this
last
point
pragmatic
programmer
tip
design
test
start
thinking
about
testing
before
you
write
line
code
the
design
specification
independent
your
choice
language
operating
system
and
hardware
principle
could
implemented
any
language
from
java
micro
code
and
run
anything
from
cray
supercomputer
toaster
implementation
phase
this
phase
turn
the
design
spec
into
implementation
spec
then
code
the
modules
unit
test
each
module
integrate
the
modules
and
test
them
integrated
sub
system
and
then
system
implementation
spec
the
implementation
spec
represents
further
refinement
and
decomposition
the
system
language
operating
system
and
hardware
dependent
many
cases
the
language
abstracts
the
and
out
the
equation
but
not
this
course
the
implementation
spec
includes
many
all
these
topics
detailed
pseudo
code
for
each
the
objects
components
functions
definition
detailed
apis
interfaces
function
prototypes
and
their
parameters
data
structures
struct
names
and
members
security
and
privacy
properties
error
handling
and
recovery
resource
management
persistant
storage
files
database
etc
coding
coding
often
the
fun
part
the
software
development
cycle
but
not
usually
the
largest
amount
time
software
developer
industry
you
might
spend
only
about
your
time
coding
perhaps
lot
more
you
startup
the
rest
the
time
will
dealing
with
the
other
phases
the
methodology
particularly
the
last
few
testing
integration
fixing
problems
with
the
product
and
meetings
with
your
team
and
with
your
customers
goals
during
coding
correctness
the
program
correct
does
work
and
error
free
duh
clarity
the
code
easy
read
well
commented
and
uses
good
variable
and
function
names
essence
easy
use
understand
and
maintain
clarity
makes
sure
that
the
code
easy
understand
people
with
range
skills
and
across
variety
machine
architectures
and
operating
systems
kernighan
amp
pike
simplicity
the
code
simple
possible
but
simpler
simplicity
keeps
the
program
short
and
manageable
kernighan
amp
pike
generality
the
program
can
easily
adapt
change
generality
means
the
code
can
work
well
broad
range
situations
and
tolerant
new
environments
can
easily
made
kernighan
amp
pike
unit
and
sub
system
testing
pragmatic
programmer
tip
test
your
software
your
users
will
testing
critical
part
the
whole
process
any
development
effort
whether
you
building
bridges
software
unit
testing
modules
isolation
and
integration
testing
modules
are
assembled
into
sub
systems
and
ultimately
the
whole
system
result
better
safer
more
reliable
code
talk
more
about
testing
soon
the
ultimate
goal
testing
exercise
all
paths
through
the
code
course
with
most
applications
this
may
prove
daunting
task
most
the
time
the
code
will
execute
small
set
the
branches
the
module
when
special
conditions
occur
and
newly
executed
code
paths
fail
can
really
hard
find
those
problems
large
complex
pieces
code
the
better
organized
and
modularized
your
code
the
easier
will
understand
test
and
maintain
even
you
write
test
scripts
tools
throughout
the
development
process
quickly
give
confidence
that
even
though
new
code
has
been
added
new
bugs
emerged
because
our
test
scripts
assured
that
integration
testing
the
system
incrementally
developed
put
together
and
tested
various
levels
subsystems
could
integrate
many
modules
and
sometimes
new
hardware
the
developer
will
run
the
integrated
system
against
the
original
requirements
see
there
are
any
gotchas
for
example
some
performance
requirements
can
only
tested
once
the
full
system
comes
together
while
other
commonly
used
utility
functions
could
have
performance
analysis
done
them
early
you
can
simulate
external
influences
well
such
increasing
the
external
processing
communications
load
the
host
system
way
see
how
your
program
operates
when
the
host
system
heavily
loaded
resource
limited
quote
the
pragmatic
programmer
again
pragmatic
programmer
tip
don
think
outside
the
box
find
the
box
when
faced
with
impossible
problem
identify
the
real
constraints
ask
yourself
does
have
done
this
way
does
have
done
all
feedback
phase
this
phase
the
design
team
sits
down
with
its
customer
and
demonstrates
its
implementation
the
customer
and
the
team
review
the
original
requirement
spec
and
check
each
requirement
for
completion
the
tse
and
project
emphasize
understanding
the
requirements
the
system
want
build
writing
good
design
and
implementation
specs
before
coding
you
shall
apply
the
coding
principles
simplicity
clarity
and
generality
will
put
more
weight
these
move
forward
with
assignments
and
the
project
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
more
about
makefiles
engs
labs
notes
reading
resources
examples
more
about
makefiles
goals
another
look
makefiles
producing
and
using
library
archives
for
deeper
dive
into
make
recall
the
lecture
extra
makefiles
recall
the
makefile
wrote
lecture
available
names
makefile
our
examples
directory
makefile
for
the
names
program
that
uses
the
bag
module
david
kotz
april
gcc
cflags
wall
pedantic
std
ggdb
prog
names
objs
names
bag
readlinep
libs
phony
all
clean
all
names
executable
depends
object
files
prog
objs
cflags
objs
libs
prog
object
files
depend
include
files
names
bag
readlinep
bag
bag
readlinep
readlinep
clean
prog
dsym
let
modify
the
makefile
leverage
our
new
libcs
library
from
the
lab
starter
kit
adapted
the
names
for
use
with
library
provided
bag
resulting
file
names
one
directory
and
dropped
the
libcs
directory
peer
this
program
now
available
namesb
flume
demo
tree
lecture
libcs
lecture
makefile
names
libcs
bag
bag
counters
counters
file
file
file
hashtable
hashtable
jhash
jhash
makefile
memory
memory
memory
readme
set
set
webpage
webpage
fetch
webpage
webpage
internal
webpage
the
new
makefile
for
names
follows
notice
several
important
features
definition
macro
shorthand
for
the
directory
name
not
the
library
name
where
the
library
lives
make
allows
substitute
the
value
single
letter
macro
names
without
using
parens
thus
can
use
substitute
this
directory
name
addition
the
cflags
which
tells
the
compiler
look
for
include
files
the
directory
the
existing
libs
macro
meaning
libraries
used
tell
the
linker
link
with
the
math
library
the
new
llibs
macro
which
mean
local
libraries
used
tell
the
linker
link
with
the
libcs
library
keep
this
separate
from
libs
because
want
inform
make
that
the
program
depends
this
library
directories
the
default
all
rule
just
clear
the
updated
prog
general
rule
which
indicates
dependence
llibs
and
also
provides
them
the
linker
command
the
next
line
the
names
rule
which
uses
refer
the
include
files
needed
this
program
the
lack
any
rule
build
the
library
libcs
not
the
job
this
makefile
build
that
library
makefile
for
the
names
program
that
uses
the
bag
module
david
kotz
april
libcs
gcc
cflags
wall
pedantic
std
ggdb
prog
names
objs
names
libs
llibs
libcs
phony
all
clean
all
prog
executable
depends
object
files
prog
objs
llibs
cflags
objs
llibs
libs
prog
object
files
depend
include
files
names
bag
file
clean
prog
dsym
producing
library
archives
what
library
file
and
how
you
make
one
library
file
simply
archive
object
files
archive
single
file
that
contains
collection
other
files
you
probably
downloaded
zip
tgz
dmg
files
before
those
are
various
forms
archive
inside
those
files
some
metadata
describing
the
enclosed
files
well
the
often
compressed
data
the
original
files
unix
there
specific
type
archive
used
for
coalescing
object
files
into
single
file
for
convenience
the
linker
knows
how
read
files
links
any
files
that
contain
symbols
that
are
yet
unresolved
when
reaches
that
point
its
argument
list
files
when
pulls
file
pulls
that
whole
file
that
file
may
turn
reference
other
symbols
those
are
another
file
the
same
archive
the
linker
loads
them
too
any
symbols
still
unresolved
after
the
current
file
exhausted
better
another
file
later
the
argument
list
thus
the
order
arguments
the
linker
important
anyway
peek
inside
libcs
makefile
shows
how
build
archive
object
files
and
the
target
library
objs
bag
counters
file
hashtable
jhash
memory
set
webpage
webpage
fetch
lib
libcs
build
the
library
archiving
object
files
lib
objs
lib
objs
the
command
manipulates
archive
file
specifically
creates
the
file
needed
and
replaces
the
enclosed
files
with
those
its
command
line
thus
libcs
holds
all
those
files
which
can
show
with
flume
demo
libcs
libcs
bag
counters
file
hashtable
jhash
memory
set
webpage
webpage
fetch
flume
demo
libcs
building
all
build
the
whole
program
need
build
the
library
and
then
the
program
could
from
the
directory
above
with
two
calls
make
flume
demo
make
libcs
make
entering
directory
net
class
demo
libcs
gcc
wall
pedantic
std
ggdb
bag
bag
gcc
wall
pedantic
std
ggdb
counters
counters
gcc
wall
pedantic
std
ggdb
file
file
gcc
wall
pedantic
std
ggdb
hashtable
hashtable
gcc
wall
pedantic
std
ggdb
jhash
jhash
gcc
wall
pedantic
std
ggdb
memory
memory
gcc
wall
pedantic
std
ggdb
set
set
gcc
wall
pedantic
std
ggdb
webpage
webpage
gcc
wall
pedantic
std
ggdb
webpage
fetch
webpage
fetch
libcs
bag
counters
file
hashtable
jhash
memory
set
webpage
webpage
fetch
make
leaving
directory
net
class
demo
libcs
flume
demo
make
lecture
make
entering
directory
net
class
demo
lecture
gcc
wall
pedantic
std
ggdb
libcs
names
names
gcc
wall
pedantic
std
ggdb
libcs
names
libcs
libcs
names
make
leaving
directory
net
class
demo
lecture
flume
demo
notice
that
all
but
one
the
gcc
commands
are
executed
make
implicit
rule
for
producing
file
from
file
the
final
gcc
command
actually
running
the
linker
and
not
the
compiler
its
arguments
include
names
libcs
and
the
math
library
this
final
command
most
the
cflags
are
irrelevant
including
the
directive
that
only
for
include
files
but
include
cflags
the
command
line
just
for
completeness
indeed
could
write
top
level
makefile
that
makes
those
calls
make
shown
the
the
lab
starter
kit
you
may
want
use
similar
techniques
building
common
lab
just
arrange
your
files
appropriate
directory
structure
and
think
carefully
about
the
include
path
specified
with
and
the
way
you
list
dependencies
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
activity
preprocessor
engs
labs
notes
reading
resources
examples
activity
preprocessor
goals
use
the
preprocessor
understand
when
linker
might
produce
errors
activity
examine
the
source
files
examples
seuss
shown
below
try
compile
the
program
why
you
get
error
the
compiler
linker
reporting
the
error
what
could
you
fix
run
gcc
seuss
which
runs
the
preprocessor
only
this
output
what
the
compiler
would
consume
look
the
output
ignore
the
lines
which
are
annotations
help
the
compiler
produce
error
messages
that
reference
the
original
file
name
and
line
number
notice
how
the
preprocessor
has
copied
everything
from
the
include
files
right
into
the
input
the
point
where
they
are
included
seuss
and
then
stripped
out
all
the
comments
after
class
read
the
lecture
extra
about
the
preprocessor
seuss
uses
thing
one
and
thing
two
include
one
include
two
int
main
int
fun
thing
one
thing
two
return
fun
exit
status
one
int
one
extern
int
thing
one
void
two
int
two
extern
int
thing
two
void
one
include
one
int
thing
one
void
return
one
two
include
two
int
thing
two
void
return
two
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
activity
mid
term
feedback
engs
labs
notes
reading
resources
examples
activity
mid
term
feedback
goals
for
students
identify
how
they
can
help
improve
their
own
learning
for
students
identify
how
they
can
help
their
group
learn
for
the
professor
identify
how
can
help
students
learn
activity
discuss
the
feedback
from
the
mid
term
survey
conducted
dcal
and
the
instructional
team
below
are
few
the
themes
that
came
through
loud
and
clear
things
well
compliment
each
other
respect
each
other
work
together
learn
together
all
contribute
understanding
the
task
understanding
the
material
and
devising
solution
rotate
partners
and
the
point
person
activities
explain
difficult
concepts
others
our
group
ask
each
other
questions
when
need
help
ask
questions
help
guide
others
toward
understanding
ask
our
learning
fellow
when
get
stuck
where
have
different
levels
experience
the
more
experienced
help
the
less
experienced
things
students
can
can
pay
more
attention
lecture
and
ready
engage
with
the
group
activity
can
attend
regularly
and
part
group
can
participate
more
group
activity
can
encourage
group
work
together
rather
than
independently
can
encourage
each
member
actively
contribute
can
rotate
partners
with
whom
work
can
encourage
group
rotate
the
point
person
activities
can
ask
more
questions
help
others
understand
the
activity
the
material
can
make
sure
everyone
voice
heard
can
create
groupme
slack
other
chat
group
encourage
group
communication
outside
class
can
get
know
team
better
get
together
outside
class
can
read
the
lecture
notes
and
labs
more
carefully
can
help
everyone
contributing
answers
piazza
things
the
professor
can
can
clarify
opportunities
for
help
outside
class
can
vary
how
conveys
concepts
lecture
whiteboard
work
live
coding
programs
finished
programs
class
activities
can
choose
better
more
interesting
examples
can
explain
pointers
more
clearly
can
slow
down
the
pace
can
speed
the
pace
can
spend
more
time
class
activities
can
spend
less
time
class
activities
can
provide
solutions
class
activities
can
ensure
the
lectures
and
notes
cover
everything
needed
for
the
labs
can
streamline
the
lecture
material
avoid
lecture
extras
can
clarify
the
expectations
for
each
lab
can
ensure
faster
turnaround
lab
grades
feedback
can
ensure
section
leaders
are
better
prepared
for
sections
can
reconsider
the
policies
attendance
and
assigned
seating
can
reconsider
the
assigment
groups
start
term
other
observations
the
classroom
furniture
arrangement
not
conducive
lecture
class
activities
are
helpful
some
students
out
class
coding
how
students
learn
best
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
activity
unit
testing
engs
labs
notes
reading
resources
examples
activity
unit
testing
consider
the
simple
one
function
jhash
module
used
lab
and
the
tse
comprises
jhash
and
jhash
and
implements
the
jenkinshash
function
below
with
your
group
list
all
the
tests
good
unit
test
should
run
against
this
unit
can
you
spot
the
bug
just
noticed
one
overlooked
before
you
have
time
download
the
above
files
copy
them
public
html
labs
lab
starter
hashtable
jhash
extend
jhash
with
unit
test
like
those
saw
demonstrated
class
today
you
can
include
unittest
and
copy
that
file
from
examples
unittest
for
your
testing
unsigned
long
jenkinshash
const
char
str
unsigned
long
mod
str
null
return
size
len
strlen
str
unsigned
long
hash
for
hash
len
hash
str
hash
hash
hash
hash
hash
hash
hash
hash
hash
hash
return
hash
mod
include
unittest
int
main
start
test
case
jhash
expect
jenkinshash
null
expect
jenkinshash
expect
jenkinshash
expect
jenkinshash
jenkinshash
expect
jenkinshash
expect
jenkinshash
this
very
long
string
and
will
make
hard
read
this
test
fortunately
the
function
does
not
care
end
test
case
return
test
result
endif
unit
test
did
not
test
the
mod
case
because
don
want
crash
the
program
fix
that
bug
changing
the
first
lines
the
function
str
null
mod
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
moved
permanently
moved
permanently
nginx
activity
design
tse
indexer
engs
labs
notes
reading
resources
examples
activity
design
tse
indexer
review
the
indexer
requirements
spec
what
data
structure
would
good
representation
for
the
inverted
index
inverted
index
allows
maps
from
words
document
ids
given
word
which
documents
contain
that
word
and
for
each
document
you
want
know
how
many
times
did
that
word
appear
that
document
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
activity
set
intersection
engs
labs
notes
reading
resources
examples
activity
set
intersection
review
set
iterate
note
also
set
iterate
makefile
shows
how
construct
the
union
two
sets
discuss
how
you
would
construct
the
intersection
two
sets
very
analogous
but
bit
trickier
found
that
the
itemfunc
needed
pointer
each
set
not
just
the
one
set
the
example
above
you
need
this
for
lab
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
activity
cohesion
and
coupling
engs
labs
notes
reading
resources
examples
activity
cohesion
and
coupling
with
your
group
take
look
the
example
code
and
comment
its
naming
cohesion
and
coupling
the
code
reproduced
below
pseudo
code
from
calendar
datebook
application
typedef
struct
date
date
typedef
struct
calendar
calendar
typedef
struct
event
event
given
one
date
compute
the
next
date
account
for
leap
years
etc
date
date
next
date
day
compute
the
number
days
from
this
date
until
that
date
int
date
computedaysuntil
const
date
this
const
date
that
return
current
date
date
date
today
void
print
calendar
void
calendar
print
calendar
cal
print
the
month
name
print
the
day
names
for
each
row
print
the
dates
that
row
print
calendar
void
calendar
print
calendar
cal
int
which
date
day
which
print
the
month
name
print
the
day
names
for
each
row
print
the
dates
that
row
else
which
print
the
month
name
day
name
and
day
number
print
the
events
occurring
that
day
print
calendar
void
calendar
print
calendar
cal
print
the
month
name
day
name
and
day
number
foreach
event
occurring
that
day
print
the
time
the
event
print
the
type
event
print
the
description
the
event
void
doprintbook
calendar
cal
const
char
intro
image
frontcover
image
backcover
print
the
frontcover
print
the
intro
foreach
month
foreach
day
that
month
calendar
print
cal
day
print
the
backcover
calendar
thecalendar
the
calendar
use
below
void
initialize
string
filename
window
window
initialize
thecalendar
for
each
event
read
from
the
file
add
event
the
calendar
initialize
the
window
create
some
buttons
the
window
current
date
today
display
the
current
day
window
look
for
any
events
the
next
hour
pop
dialog
box
for
each
such
event
update
cal
window
void
update
date
today
window
window
check
the
current
time
look
through
thecalendar
eventlist
for
events
date
today
some
events
are
now
the
past
change
their
state
past
update
today
events
the
window
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
activity
query
expressions
engs
labs
notes
reading
resources
examples
activity
query
expressions
consider
the
query
syntax
for
the
querier
think
about
expressions
and
accumulators
from
class
discuss
how
you
would
parse
and
evaluate
query
expressed
the
tse
query
syntax
you
need
this
for
lab
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
activity
networking
with
tcp
engs
labs
notes
reading
resources
examples
activity
networking
with
tcp
grab
copy
the
example
client
server
code
examples
client
server
examples
client
server
one
person
your
group
should
run
the
server
and
the
others
your
group
should
connect
and
write
some
encouraging
remarks
what
happens
when
several
you
connect
the
same
server
engs
dartmouth
college
this
version
the
course
based
upon
those
designed
professors
palmer
kotz
zhou
campbell
and
balkcom
deeply
indebted
these
outstanding
educators
stephen
taylor
this
page
was
last
updated
